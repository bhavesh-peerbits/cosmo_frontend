/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { Email } from '../models';
/**
 * SendMailControllerApi - axios parameter creator
 * @export
 */
export const SendMailControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {Email} email
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		sendEmail: async (
			email: Email,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'email' is not null or undefined
			assertParamExists('sendEmail', 'email', email);
			const localVarPath = `/api/sendmail`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				email,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {Email} email
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		sendNarrativeEmail: async (
			email: Email,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'email' is not null or undefined
			assertParamExists('sendNarrativeEmail', 'email', email);
			const localVarPath = `/api/sendmail/narrative`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				email,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * SendMailControllerApi - functional programming interface
 * @export
 */
export const SendMailControllerApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = SendMailControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {Email} email
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async sendEmail(
			email: Email,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.sendEmail(email, options);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {Email} email
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async sendNarrativeEmail(
			email: Email,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.sendNarrativeEmail(
				email,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * SendMailControllerApi - factory interface
 * @export
 */
export const SendMailControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = SendMailControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {Email} email
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		sendEmail(email: Email, options?: any): AxiosPromise<string> {
			return localVarFp
				.sendEmail(email, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {Email} email
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		sendNarrativeEmail(email: Email, options?: any): AxiosPromise<string> {
			return localVarFp
				.sendNarrativeEmail(email, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for sendEmail operation in SendMailControllerApi.
 * @export
 * @interface SendMailControllerApiSendEmailRequest
 */
export interface SendMailControllerApiSendEmailRequest {
	/**
	 *
	 * @type {Email}
	 * @memberof SendMailControllerApiSendEmail
	 */
	readonly email: Email;
}

/**
 * Request parameters for sendNarrativeEmail operation in SendMailControllerApi.
 * @export
 * @interface SendMailControllerApiSendNarrativeEmailRequest
 */
export interface SendMailControllerApiSendNarrativeEmailRequest {
	/**
	 *
	 * @type {Email}
	 * @memberof SendMailControllerApiSendNarrativeEmail
	 */
	readonly email: Email;
}

/**
 * SendMailControllerApi - object-oriented interface
 * @export
 * @class SendMailControllerApi
 * @extends {BaseAPI}
 */
export class SendMailControllerApi extends BaseAPI {
	/**
	 *
	 * @param {SendMailControllerApiSendEmailRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof SendMailControllerApi
	 */
	public sendEmail(
		requestParameters: SendMailControllerApiSendEmailRequest,
		options?: AxiosRequestConfig
	) {
		return SendMailControllerApiFp(this.configuration)
			.sendEmail(requestParameters.email, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {SendMailControllerApiSendNarrativeEmailRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof SendMailControllerApi
	 */
	public sendNarrativeEmail(
		requestParameters: SendMailControllerApiSendNarrativeEmailRequest,
		options?: AxiosRequestConfig
	) {
		return SendMailControllerApiFp(this.configuration)
			.sendNarrativeEmail(requestParameters.email, options)
			.then(request => request(this.axios, this.basePath));
	}
}

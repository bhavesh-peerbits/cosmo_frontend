/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { ConfigModule } from '../models';
// @ts-ignore
import { ConfigModuleKey } from '../models';
/**
 * ConfigElementModuleControllerApi - axios parameter creator
 * @export
 */
export const ConfigElementModuleControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} configId
		 * @param {number} moduleId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createConfigForModule: async (
			configId: number,
			moduleId: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'configId' is not null or undefined
			assertParamExists('createConfigForModule', 'configId', configId);
			// verify required parameter 'moduleId' is not null or undefined
			assertParamExists('createConfigForModule', 'moduleId', moduleId);
			const localVarPath = `/api/configmodule`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (configId !== undefined) {
				localVarQueryParameter['configId'] = configId;
			}

			if (moduleId !== undefined) {
				localVarQueryParameter['moduleId'] = moduleId;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {ConfigModuleKey} configModuleKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteConfigModule: async (
			configModuleKey: ConfigModuleKey,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'configModuleKey' is not null or undefined
			assertParamExists('deleteConfigModule', 'configModuleKey', configModuleKey);
			const localVarPath = `/api/configmodule/{configModuleKey}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (configModuleKey !== undefined) {
				localVarQueryParameter['configModuleKey'] = configModuleKey;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllConfigModules: async (
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/configmodule`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {ConfigModuleKey} configModuleKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getConfigModule: async (
			configModuleKey: ConfigModuleKey,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'configModuleKey' is not null or undefined
			assertParamExists('getConfigModule', 'configModuleKey', configModuleKey);
			const localVarPath = `/api/configmodule/{configModuleKey}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (configModuleKey !== undefined) {
				localVarQueryParameter['configModuleKey'] = configModuleKey;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {ConfigModuleKey} configModuleKey
		 * @param {ConfigModule} configModule
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyConfigModule: async (
			configModuleKey: ConfigModuleKey,
			configModule: ConfigModule,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'configModuleKey' is not null or undefined
			assertParamExists('modifyConfigModule', 'configModuleKey', configModuleKey);
			// verify required parameter 'configModule' is not null or undefined
			assertParamExists('modifyConfigModule', 'configModule', configModule);
			const localVarPath = `/api/configmodule/{configModuleKey}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (configModuleKey !== undefined) {
				localVarQueryParameter['configModuleKey'] = configModuleKey;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				configModule,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * ConfigElementModuleControllerApi - functional programming interface
 * @export
 */
export const ConfigElementModuleControllerApiFp = function (
	configuration?: Configuration
) {
	const localVarAxiosParamCreator =
		ConfigElementModuleControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} configId
		 * @param {number} moduleId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createConfigForModule(
			configId: number,
			moduleId: number,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigModule>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createConfigForModule(
				configId,
				moduleId,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {ConfigModuleKey} configModuleKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteConfigModule(
			configModuleKey: ConfigModuleKey,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteConfigModule(
				configModuleKey,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllConfigModules(
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConfigModule>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllConfigModules(
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {ConfigModuleKey} configModuleKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getConfigModule(
			configModuleKey: ConfigModuleKey,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigModule>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getConfigModule(
				configModuleKey,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {ConfigModuleKey} configModuleKey
		 * @param {ConfigModule} configModule
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async modifyConfigModule(
			configModuleKey: ConfigModuleKey,
			configModule: ConfigModule,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfigModule>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.modifyConfigModule(
				configModuleKey,
				configModule,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * ConfigElementModuleControllerApi - factory interface
 * @export
 */
export const ConfigElementModuleControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = ConfigElementModuleControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} configId
		 * @param {number} moduleId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createConfigForModule(
			configId: number,
			moduleId: number,
			options?: any
		): AxiosPromise<ConfigModule> {
			return localVarFp
				.createConfigForModule(configId, moduleId, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {ConfigModuleKey} configModuleKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteConfigModule(
			configModuleKey: ConfigModuleKey,
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.deleteConfigModule(configModuleKey, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllConfigModules(options?: any): AxiosPromise<Array<ConfigModule>> {
			return localVarFp
				.getAllConfigModules(options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {ConfigModuleKey} configModuleKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getConfigModule(
			configModuleKey: ConfigModuleKey,
			options?: any
		): AxiosPromise<ConfigModule> {
			return localVarFp
				.getConfigModule(configModuleKey, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {ConfigModuleKey} configModuleKey
		 * @param {ConfigModule} configModule
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyConfigModule(
			configModuleKey: ConfigModuleKey,
			configModule: ConfigModule,
			options?: any
		): AxiosPromise<ConfigModule> {
			return localVarFp
				.modifyConfigModule(configModuleKey, configModule, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for createConfigForModule operation in ConfigElementModuleControllerApi.
 * @export
 * @interface ConfigElementModuleControllerApiCreateConfigForModuleRequest
 */
export interface ConfigElementModuleControllerApiCreateConfigForModuleRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ConfigElementModuleControllerApiCreateConfigForModule
	 */
	readonly configId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ConfigElementModuleControllerApiCreateConfigForModule
	 */
	readonly moduleId: number;
}

/**
 * Request parameters for deleteConfigModule operation in ConfigElementModuleControllerApi.
 * @export
 * @interface ConfigElementModuleControllerApiDeleteConfigModuleRequest
 */
export interface ConfigElementModuleControllerApiDeleteConfigModuleRequest {
	/**
	 *
	 * @type {ConfigModuleKey}
	 * @memberof ConfigElementModuleControllerApiDeleteConfigModule
	 */
	readonly configModuleKey: ConfigModuleKey;
}

/**
 * Request parameters for getConfigModule operation in ConfigElementModuleControllerApi.
 * @export
 * @interface ConfigElementModuleControllerApiGetConfigModuleRequest
 */
export interface ConfigElementModuleControllerApiGetConfigModuleRequest {
	/**
	 *
	 * @type {ConfigModuleKey}
	 * @memberof ConfigElementModuleControllerApiGetConfigModule
	 */
	readonly configModuleKey: ConfigModuleKey;
}

/**
 * Request parameters for modifyConfigModule operation in ConfigElementModuleControllerApi.
 * @export
 * @interface ConfigElementModuleControllerApiModifyConfigModuleRequest
 */
export interface ConfigElementModuleControllerApiModifyConfigModuleRequest {
	/**
	 *
	 * @type {ConfigModuleKey}
	 * @memberof ConfigElementModuleControllerApiModifyConfigModule
	 */
	readonly configModuleKey: ConfigModuleKey;

	/**
	 *
	 * @type {ConfigModule}
	 * @memberof ConfigElementModuleControllerApiModifyConfigModule
	 */
	readonly configModule: ConfigModule;
}

/**
 * ConfigElementModuleControllerApi - object-oriented interface
 * @export
 * @class ConfigElementModuleControllerApi
 * @extends {BaseAPI}
 */
export class ConfigElementModuleControllerApi extends BaseAPI {
	/**
	 *
	 * @param {ConfigElementModuleControllerApiCreateConfigForModuleRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ConfigElementModuleControllerApi
	 */
	public createConfigForModule(
		requestParameters: ConfigElementModuleControllerApiCreateConfigForModuleRequest,
		options?: AxiosRequestConfig
	) {
		return ConfigElementModuleControllerApiFp(this.configuration)
			.createConfigForModule(
				requestParameters.configId,
				requestParameters.moduleId,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ConfigElementModuleControllerApiDeleteConfigModuleRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ConfigElementModuleControllerApi
	 */
	public deleteConfigModule(
		requestParameters: ConfigElementModuleControllerApiDeleteConfigModuleRequest,
		options?: AxiosRequestConfig
	) {
		return ConfigElementModuleControllerApiFp(this.configuration)
			.deleteConfigModule(requestParameters.configModuleKey, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ConfigElementModuleControllerApi
	 */
	public getAllConfigModules(options?: AxiosRequestConfig) {
		return ConfigElementModuleControllerApiFp(this.configuration)
			.getAllConfigModules(options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ConfigElementModuleControllerApiGetConfigModuleRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ConfigElementModuleControllerApi
	 */
	public getConfigModule(
		requestParameters: ConfigElementModuleControllerApiGetConfigModuleRequest,
		options?: AxiosRequestConfig
	) {
		return ConfigElementModuleControllerApiFp(this.configuration)
			.getConfigModule(requestParameters.configModuleKey, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ConfigElementModuleControllerApiModifyConfigModuleRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ConfigElementModuleControllerApi
	 */
	public modifyConfigModule(
		requestParameters: ConfigElementModuleControllerApiModifyConfigModuleRequest,
		options?: AxiosRequestConfig
	) {
		return ConfigElementModuleControllerApiFp(this.configuration)
			.modifyConfigModule(
				requestParameters.configModuleKey,
				requestParameters.configModule,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}
}

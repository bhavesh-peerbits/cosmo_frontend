/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { ProcedureAppInstanceDto } from '../models';
// @ts-ignore
import { ProcedureDto } from '../models';
/**
 * ProcedureControllerApi - axios parameter creator
 * @export
 */
export const ProcedureControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} procId
		 * @param {number} appId
		 * @param {ProcedureAppInstanceDto} procedureAppInstanceDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addApplicationToProcedure: async (
			procId: number,
			appId: number,
			procedureAppInstanceDto: ProcedureAppInstanceDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'procId' is not null or undefined
			assertParamExists('addApplicationToProcedure', 'procId', procId);
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('addApplicationToProcedure', 'appId', appId);
			// verify required parameter 'procedureAppInstanceDto' is not null or undefined
			assertParamExists(
				'addApplicationToProcedure',
				'procedureAppInstanceDto',
				procedureAppInstanceDto
			);
			const localVarPath = `/api/procedure/admin/{procId}/applications/{appId}`
				.replace(`{${'procId'}}`, encodeURIComponent(String(procId)))
				.replace(`{${'appId'}}`, encodeURIComponent(String(appId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				procedureAppInstanceDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {ProcedureDto} procedureDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createNewProcedure: async (
			procedureDto: ProcedureDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'procedureDto' is not null or undefined
			assertParamExists('createNewProcedure', 'procedureDto', procedureDto);
			const localVarPath = `/api/procedure/admin`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				procedureDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} procId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteProcedure: async (
			procId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'procId' is not null or undefined
			assertParamExists('deleteProcedure', 'procId', procId);
			const localVarPath = `/api/procedure/admin/{procId}`.replace(
				`{${'procId'}}`,
				encodeURIComponent(String(procId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} procedureAppInstanceId
		 * @param {number} appId
		 * @param {number} procId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteProcedureApplicationAssociation: async (
			procedureAppInstanceId: number,
			appId: number,
			procId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'procedureAppInstanceId' is not null or undefined
			assertParamExists(
				'deleteProcedureApplicationAssociation',
				'procedureAppInstanceId',
				procedureAppInstanceId
			);
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('deleteProcedureApplicationAssociation', 'appId', appId);
			// verify required parameter 'procId' is not null or undefined
			assertParamExists('deleteProcedureApplicationAssociation', 'procId', procId);
			const localVarPath =
				`/api/procedure/admin/{procId}/applications/{appId}/{procedureAppInstanceId}`
					.replace(
						`{${'procedureAppInstanceId'}}`,
						encodeURIComponent(String(procedureAppInstanceId))
					)
					.replace(`{${'appId'}}`, encodeURIComponent(String(appId)))
					.replace(`{${'procId'}}`, encodeURIComponent(String(procId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} procId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplicationForProcedure: async (
			procId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'procId' is not null or undefined
			assertParamExists('getAllApplicationForProcedure', 'procId', procId);
			const localVarPath = `/api/procedure/{procId}/applications`.replace(
				`{${'procId'}}`,
				encodeURIComponent(String(procId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllProcedure: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/procedure`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllProcedureApp: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/procedure/procedure-applications`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} procedureAppInstanceName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getProcedureAppInstance: async (
			procedureAppInstanceName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'procedureAppInstanceName' is not null or undefined
			assertParamExists(
				'getProcedureAppInstance',
				'procedureAppInstanceName',
				procedureAppInstanceName
			);
			const localVarPath =
				`/api/procedure/procedure-applications/{procedureAppInstanceName}`.replace(
					`{${'procedureAppInstanceName'}}`,
					encodeURIComponent(String(procedureAppInstanceName))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} procName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getProcedureByName: async (
			procName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'procName' is not null or undefined
			assertParamExists('getProcedureByName', 'procName', procName);
			const localVarPath = `/api/procedure/name/{procName}`.replace(
				`{${'procName'}}`,
				encodeURIComponent(String(procName))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} procId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getSingleProcedure: async (
			procId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'procId' is not null or undefined
			assertParamExists('getSingleProcedure', 'procId', procId);
			const localVarPath = `/api/procedure/{procId}`.replace(
				`{${'procId'}}`,
				encodeURIComponent(String(procId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} procId
		 * @param {number} procedureAppInstanceId
		 * @param {ProcedureAppInstanceDto} procedureAppInstanceDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyApplicationToProcedure: async (
			appId: number,
			procId: number,
			procedureAppInstanceId: number,
			procedureAppInstanceDto: ProcedureAppInstanceDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('modifyApplicationToProcedure', 'appId', appId);
			// verify required parameter 'procId' is not null or undefined
			assertParamExists('modifyApplicationToProcedure', 'procId', procId);
			// verify required parameter 'procedureAppInstanceId' is not null or undefined
			assertParamExists(
				'modifyApplicationToProcedure',
				'procedureAppInstanceId',
				procedureAppInstanceId
			);
			// verify required parameter 'procedureAppInstanceDto' is not null or undefined
			assertParamExists(
				'modifyApplicationToProcedure',
				'procedureAppInstanceDto',
				procedureAppInstanceDto
			);
			const localVarPath =
				`/api/procedure/admin/{procId}/applications/{appId}/{procedureAppInstanceId}`
					.replace(`{${'appId'}}`, encodeURIComponent(String(appId)))
					.replace(`{${'procId'}}`, encodeURIComponent(String(procId)))
					.replace(
						`{${'procedureAppInstanceId'}}`,
						encodeURIComponent(String(procedureAppInstanceId))
					);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				procedureAppInstanceDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {ProcedureDto} procedureDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyProcedure: async (
			procedureDto: ProcedureDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'procedureDto' is not null or undefined
			assertParamExists('modifyProcedure', 'procedureDto', procedureDto);
			const localVarPath = `/api/procedure/admin`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				procedureDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * ProcedureControllerApi - functional programming interface
 * @export
 */
export const ProcedureControllerApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		ProcedureControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} procId
		 * @param {number} appId
		 * @param {ProcedureAppInstanceDto} procedureAppInstanceDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addApplicationToProcedure(
			procId: number,
			appId: number,
			procedureAppInstanceDto: ProcedureAppInstanceDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcedureAppInstanceDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addApplicationToProcedure(
				procId,
				appId,
				procedureAppInstanceDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {ProcedureDto} procedureDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createNewProcedure(
			procedureDto: ProcedureDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcedureDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createNewProcedure(
				procedureDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} procId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteProcedure(
			procId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProcedure(
				procId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} procedureAppInstanceId
		 * @param {number} appId
		 * @param {number} procId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteProcedureApplicationAssociation(
			procedureAppInstanceId: number,
			appId: number,
			procId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.deleteProcedureApplicationAssociation(
					procedureAppInstanceId,
					appId,
					procId,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} procId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllApplicationForProcedure(
			procId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<ProcedureAppInstanceDto>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getAllApplicationForProcedure(
					procId,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllProcedure(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProcedureDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProcedure(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllProcedureApp(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<ProcedureAppInstanceDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProcedureApp(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} procedureAppInstanceName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getProcedureAppInstance(
			procedureAppInstanceName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcedureAppInstanceDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getProcedureAppInstance(
				procedureAppInstanceName,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} procName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getProcedureByName(
			procName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcedureDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getProcedureByName(
				procName,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} procId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getSingleProcedure(
			procId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcedureDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleProcedure(
				procId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} procId
		 * @param {number} procedureAppInstanceId
		 * @param {ProcedureAppInstanceDto} procedureAppInstanceDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async modifyApplicationToProcedure(
			appId: number,
			procId: number,
			procedureAppInstanceId: number,
			procedureAppInstanceDto: ProcedureAppInstanceDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcedureAppInstanceDto>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.modifyApplicationToProcedure(
					appId,
					procId,
					procedureAppInstanceId,
					procedureAppInstanceDto,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {ProcedureDto} procedureDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async modifyProcedure(
			procedureDto: ProcedureDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcedureDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.modifyProcedure(
				procedureDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * ProcedureControllerApi - factory interface
 * @export
 */
export const ProcedureControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = ProcedureControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} procId
		 * @param {number} appId
		 * @param {ProcedureAppInstanceDto} procedureAppInstanceDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addApplicationToProcedure(
			procId: number,
			appId: number,
			procedureAppInstanceDto: ProcedureAppInstanceDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ProcedureAppInstanceDto> {
			return localVarFp
				.addApplicationToProcedure(
					procId,
					appId,
					procedureAppInstanceDto,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {ProcedureDto} procedureDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createNewProcedure(
			procedureDto: ProcedureDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ProcedureDto> {
			return localVarFp
				.createNewProcedure(procedureDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} procId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteProcedure(
			procId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.deleteProcedure(procId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} procedureAppInstanceId
		 * @param {number} appId
		 * @param {number} procId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteProcedureApplicationAssociation(
			procedureAppInstanceId: number,
			appId: number,
			procId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.deleteProcedureApplicationAssociation(
					procedureAppInstanceId,
					appId,
					procId,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} procId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplicationForProcedure(
			procId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ProcedureAppInstanceDto>> {
			return localVarFp
				.getAllApplicationForProcedure(procId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllProcedure(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ProcedureDto>> {
			return localVarFp
				.getAllProcedure(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllProcedureApp(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ProcedureAppInstanceDto>> {
			return localVarFp
				.getAllProcedureApp(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} procedureAppInstanceName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getProcedureAppInstance(
			procedureAppInstanceName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ProcedureAppInstanceDto> {
			return localVarFp
				.getProcedureAppInstance(procedureAppInstanceName, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} procName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getProcedureByName(
			procName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ProcedureDto> {
			return localVarFp
				.getProcedureByName(procName, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} procId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getSingleProcedure(
			procId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ProcedureDto> {
			return localVarFp
				.getSingleProcedure(procId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} procId
		 * @param {number} procedureAppInstanceId
		 * @param {ProcedureAppInstanceDto} procedureAppInstanceDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyApplicationToProcedure(
			appId: number,
			procId: number,
			procedureAppInstanceId: number,
			procedureAppInstanceDto: ProcedureAppInstanceDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ProcedureAppInstanceDto> {
			return localVarFp
				.modifyApplicationToProcedure(
					appId,
					procId,
					procedureAppInstanceId,
					procedureAppInstanceDto,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {ProcedureDto} procedureDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyProcedure(
			procedureDto: ProcedureDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ProcedureDto> {
			return localVarFp
				.modifyProcedure(procedureDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for addApplicationToProcedure operation in ProcedureControllerApi.
 * @export
 * @interface ProcedureControllerApiAddApplicationToProcedureRequest
 */
export interface ProcedureControllerApiAddApplicationToProcedureRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProcedureControllerApiAddApplicationToProcedure
	 */
	readonly procId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProcedureControllerApiAddApplicationToProcedure
	 */
	readonly appId: number;

	/**
	 *
	 * @type {ProcedureAppInstanceDto}
	 * @memberof ProcedureControllerApiAddApplicationToProcedure
	 */
	readonly procedureAppInstanceDto: ProcedureAppInstanceDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ProcedureControllerApiAddApplicationToProcedure
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for createNewProcedure operation in ProcedureControllerApi.
 * @export
 * @interface ProcedureControllerApiCreateNewProcedureRequest
 */
export interface ProcedureControllerApiCreateNewProcedureRequest {
	/**
	 *
	 * @type {ProcedureDto}
	 * @memberof ProcedureControllerApiCreateNewProcedure
	 */
	readonly procedureDto: ProcedureDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ProcedureControllerApiCreateNewProcedure
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for deleteProcedure operation in ProcedureControllerApi.
 * @export
 * @interface ProcedureControllerApiDeleteProcedureRequest
 */
export interface ProcedureControllerApiDeleteProcedureRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProcedureControllerApiDeleteProcedure
	 */
	readonly procId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ProcedureControllerApiDeleteProcedure
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for deleteProcedureApplicationAssociation operation in ProcedureControllerApi.
 * @export
 * @interface ProcedureControllerApiDeleteProcedureApplicationAssociationRequest
 */
export interface ProcedureControllerApiDeleteProcedureApplicationAssociationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProcedureControllerApiDeleteProcedureApplicationAssociation
	 */
	readonly procedureAppInstanceId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProcedureControllerApiDeleteProcedureApplicationAssociation
	 */
	readonly appId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProcedureControllerApiDeleteProcedureApplicationAssociation
	 */
	readonly procId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ProcedureControllerApiDeleteProcedureApplicationAssociation
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllApplicationForProcedure operation in ProcedureControllerApi.
 * @export
 * @interface ProcedureControllerApiGetAllApplicationForProcedureRequest
 */
export interface ProcedureControllerApiGetAllApplicationForProcedureRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProcedureControllerApiGetAllApplicationForProcedure
	 */
	readonly procId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ProcedureControllerApiGetAllApplicationForProcedure
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllProcedure operation in ProcedureControllerApi.
 * @export
 * @interface ProcedureControllerApiGetAllProcedureRequest
 */
export interface ProcedureControllerApiGetAllProcedureRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ProcedureControllerApiGetAllProcedure
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllProcedureApp operation in ProcedureControllerApi.
 * @export
 * @interface ProcedureControllerApiGetAllProcedureAppRequest
 */
export interface ProcedureControllerApiGetAllProcedureAppRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ProcedureControllerApiGetAllProcedureApp
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getProcedureAppInstance operation in ProcedureControllerApi.
 * @export
 * @interface ProcedureControllerApiGetProcedureAppInstanceRequest
 */
export interface ProcedureControllerApiGetProcedureAppInstanceRequest {
	/**
	 *
	 * @type {string}
	 * @memberof ProcedureControllerApiGetProcedureAppInstance
	 */
	readonly procedureAppInstanceName: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ProcedureControllerApiGetProcedureAppInstance
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getProcedureByName operation in ProcedureControllerApi.
 * @export
 * @interface ProcedureControllerApiGetProcedureByNameRequest
 */
export interface ProcedureControllerApiGetProcedureByNameRequest {
	/**
	 *
	 * @type {string}
	 * @memberof ProcedureControllerApiGetProcedureByName
	 */
	readonly procName: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ProcedureControllerApiGetProcedureByName
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getSingleProcedure operation in ProcedureControllerApi.
 * @export
 * @interface ProcedureControllerApiGetSingleProcedureRequest
 */
export interface ProcedureControllerApiGetSingleProcedureRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProcedureControllerApiGetSingleProcedure
	 */
	readonly procId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ProcedureControllerApiGetSingleProcedure
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for modifyApplicationToProcedure operation in ProcedureControllerApi.
 * @export
 * @interface ProcedureControllerApiModifyApplicationToProcedureRequest
 */
export interface ProcedureControllerApiModifyApplicationToProcedureRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProcedureControllerApiModifyApplicationToProcedure
	 */
	readonly appId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProcedureControllerApiModifyApplicationToProcedure
	 */
	readonly procId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ProcedureControllerApiModifyApplicationToProcedure
	 */
	readonly procedureAppInstanceId: number;

	/**
	 *
	 * @type {ProcedureAppInstanceDto}
	 * @memberof ProcedureControllerApiModifyApplicationToProcedure
	 */
	readonly procedureAppInstanceDto: ProcedureAppInstanceDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ProcedureControllerApiModifyApplicationToProcedure
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for modifyProcedure operation in ProcedureControllerApi.
 * @export
 * @interface ProcedureControllerApiModifyProcedureRequest
 */
export interface ProcedureControllerApiModifyProcedureRequest {
	/**
	 *
	 * @type {ProcedureDto}
	 * @memberof ProcedureControllerApiModifyProcedure
	 */
	readonly procedureDto: ProcedureDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ProcedureControllerApiModifyProcedure
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * ProcedureControllerApi - object-oriented interface
 * @export
 * @class ProcedureControllerApi
 * @extends {BaseAPI}
 */
export class ProcedureControllerApi extends BaseAPI {
	/**
	 *
	 * @param {ProcedureControllerApiAddApplicationToProcedureRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProcedureControllerApi
	 */
	public addApplicationToProcedure(
		requestParameters: ProcedureControllerApiAddApplicationToProcedureRequest,
		options?: AxiosRequestConfig
	) {
		return ProcedureControllerApiFp(this.configuration)
			.addApplicationToProcedure(
				requestParameters.procId,
				requestParameters.appId,
				requestParameters.procedureAppInstanceDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProcedureControllerApiCreateNewProcedureRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProcedureControllerApi
	 */
	public createNewProcedure(
		requestParameters: ProcedureControllerApiCreateNewProcedureRequest,
		options?: AxiosRequestConfig
	) {
		return ProcedureControllerApiFp(this.configuration)
			.createNewProcedure(
				requestParameters.procedureDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProcedureControllerApiDeleteProcedureRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProcedureControllerApi
	 */
	public deleteProcedure(
		requestParameters: ProcedureControllerApiDeleteProcedureRequest,
		options?: AxiosRequestConfig
	) {
		return ProcedureControllerApiFp(this.configuration)
			.deleteProcedure(
				requestParameters.procId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProcedureControllerApiDeleteProcedureApplicationAssociationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProcedureControllerApi
	 */
	public deleteProcedureApplicationAssociation(
		requestParameters: ProcedureControllerApiDeleteProcedureApplicationAssociationRequest,
		options?: AxiosRequestConfig
	) {
		return ProcedureControllerApiFp(this.configuration)
			.deleteProcedureApplicationAssociation(
				requestParameters.procedureAppInstanceId,
				requestParameters.appId,
				requestParameters.procId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProcedureControllerApiGetAllApplicationForProcedureRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProcedureControllerApi
	 */
	public getAllApplicationForProcedure(
		requestParameters: ProcedureControllerApiGetAllApplicationForProcedureRequest,
		options?: AxiosRequestConfig
	) {
		return ProcedureControllerApiFp(this.configuration)
			.getAllApplicationForProcedure(
				requestParameters.procId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProcedureControllerApiGetAllProcedureRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProcedureControllerApi
	 */
	public getAllProcedure(
		requestParameters: ProcedureControllerApiGetAllProcedureRequest = {},
		options?: AxiosRequestConfig
	) {
		return ProcedureControllerApiFp(this.configuration)
			.getAllProcedure(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProcedureControllerApiGetAllProcedureAppRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProcedureControllerApi
	 */
	public getAllProcedureApp(
		requestParameters: ProcedureControllerApiGetAllProcedureAppRequest = {},
		options?: AxiosRequestConfig
	) {
		return ProcedureControllerApiFp(this.configuration)
			.getAllProcedureApp(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProcedureControllerApiGetProcedureAppInstanceRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProcedureControllerApi
	 */
	public getProcedureAppInstance(
		requestParameters: ProcedureControllerApiGetProcedureAppInstanceRequest,
		options?: AxiosRequestConfig
	) {
		return ProcedureControllerApiFp(this.configuration)
			.getProcedureAppInstance(
				requestParameters.procedureAppInstanceName,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProcedureControllerApiGetProcedureByNameRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProcedureControllerApi
	 */
	public getProcedureByName(
		requestParameters: ProcedureControllerApiGetProcedureByNameRequest,
		options?: AxiosRequestConfig
	) {
		return ProcedureControllerApiFp(this.configuration)
			.getProcedureByName(
				requestParameters.procName,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProcedureControllerApiGetSingleProcedureRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProcedureControllerApi
	 */
	public getSingleProcedure(
		requestParameters: ProcedureControllerApiGetSingleProcedureRequest,
		options?: AxiosRequestConfig
	) {
		return ProcedureControllerApiFp(this.configuration)
			.getSingleProcedure(
				requestParameters.procId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProcedureControllerApiModifyApplicationToProcedureRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProcedureControllerApi
	 */
	public modifyApplicationToProcedure(
		requestParameters: ProcedureControllerApiModifyApplicationToProcedureRequest,
		options?: AxiosRequestConfig
	) {
		return ProcedureControllerApiFp(this.configuration)
			.modifyApplicationToProcedure(
				requestParameters.appId,
				requestParameters.procId,
				requestParameters.procedureAppInstanceId,
				requestParameters.procedureAppInstanceDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ProcedureControllerApiModifyProcedureRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProcedureControllerApi
	 */
	public modifyProcedure(
		requestParameters: ProcedureControllerApiModifyProcedureRequest,
		options?: AxiosRequestConfig
	) {
		return ProcedureControllerApiFp(this.configuration)
			.modifyProcedure(
				requestParameters.procedureDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}
}

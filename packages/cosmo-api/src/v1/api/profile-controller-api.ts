/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { Profile } from '../models';
// @ts-ignore
import { UserProfile } from '../models';
/**
 * ProfileControllerApi - axios parameter creator
 * @export
 */
export const ProfileControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} profileId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllUsersForAProfile: async (
			profileId: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'profileId' is not null or undefined
			assertParamExists('getAllUsersForAProfile', 'profileId', profileId);
			const localVarPath = `/api/profiles/{profileId}/users`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (profileId !== undefined) {
				localVarQueryParameter['profileId'] = profileId;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getProfiles: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/profiles`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * ProfileControllerApi - functional programming interface
 * @export
 */
export const ProfileControllerApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ProfileControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} profileId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllUsersForAProfile(
			profileId: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserProfile>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsersForAProfile(
				profileId,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getProfiles(
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Profile>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getProfiles(options);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * ProfileControllerApi - factory interface
 * @export
 */
export const ProfileControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = ProfileControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} profileId
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllUsersForAProfile(
			profileId: number,
			options?: any
		): AxiosPromise<Array<UserProfile>> {
			return localVarFp
				.getAllUsersForAProfile(profileId, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getProfiles(options?: any): AxiosPromise<Array<Profile>> {
			return localVarFp.getProfiles(options).then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for getAllUsersForAProfile operation in ProfileControllerApi.
 * @export
 * @interface ProfileControllerApiGetAllUsersForAProfileRequest
 */
export interface ProfileControllerApiGetAllUsersForAProfileRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ProfileControllerApiGetAllUsersForAProfile
	 */
	readonly profileId: number;
}

/**
 * ProfileControllerApi - object-oriented interface
 * @export
 * @class ProfileControllerApi
 * @extends {BaseAPI}
 */
export class ProfileControllerApi extends BaseAPI {
	/**
	 *
	 * @param {ProfileControllerApiGetAllUsersForAProfileRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProfileControllerApi
	 */
	public getAllUsersForAProfile(
		requestParameters: ProfileControllerApiGetAllUsersForAProfileRequest,
		options?: AxiosRequestConfig
	) {
		return ProfileControllerApiFp(this.configuration)
			.getAllUsersForAProfile(requestParameters.profileId, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ProfileControllerApi
	 */
	public getProfiles(options?: AxiosRequestConfig) {
		return ProfileControllerApiFp(this.configuration)
			.getProfiles(options)
			.then(request => request(this.axios, this.basePath));
	}
}

/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { FileLinkDto } from '../models';
// @ts-ignore
import { FileLinkDtoList } from '../models';
/**
 * EvidenceRequestFileS3ControllerApi - axios parameter creator
 * @export
 */
export const EvidenceRequestFileS3ControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} fileId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFile: async (
			fileId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'fileId' is not null or undefined
			assertParamExists('deleteFile', 'fileId', fileId);
			const localVarPath = `/api/evidence-request/file/delete-a-file/{fileId}`.replace(
				`{${'fileId'}}`,
				encodeURIComponent(String(fileId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {FileLinkDtoList} fileLinkDtoList
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteSomeFiles: async (
			fileLinkDtoList: FileLinkDtoList,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'fileLinkDtoList' is not null or undefined
			assertParamExists('deleteSomeFiles', 'fileLinkDtoList', fileLinkDtoList);
			const localVarPath = `/api/evidence-request/file/delete-some-files`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				fileLinkDtoList,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {FileLinkDtoList} fileLinkDtoList
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getASelectionOfFiles: async (
			fileLinkDtoList: FileLinkDtoList,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'fileLinkDtoList' is not null or undefined
			assertParamExists('getASelectionOfFiles', 'fileLinkDtoList', fileLinkDtoList);
			const localVarPath = `/api/evidence-request/file/get-some-files`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				fileLinkDtoList,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} stepId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getASelectionOfFilesFromStep: async (
			stepId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'stepId' is not null or undefined
			assertParamExists('getASelectionOfFilesFromStep', 'stepId', stepId);
			const localVarPath = `/api/evidence-request/file/get-some-files/{stepId}`.replace(
				`{${'stepId'}}`,
				encodeURIComponent(String(stepId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} fileId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFile: async (
			fileId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'fileId' is not null or undefined
			assertParamExists('getFile', 'fileId', fileId);
			const localVarPath = `/api/evidence-request/file/get-a-file/{fileId}`.replace(
				`{${'fileId'}}`,
				encodeURIComponent(String(fileId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} stepId
		 * @param {FileLinkDtoList} fileLinkDtoList
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		putASelectionOfFiles: async (
			stepId: number,
			fileLinkDtoList: FileLinkDtoList,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'stepId' is not null or undefined
			assertParamExists('putASelectionOfFiles', 'stepId', stepId);
			// verify required parameter 'fileLinkDtoList' is not null or undefined
			assertParamExists('putASelectionOfFiles', 'fileLinkDtoList', fileLinkDtoList);
			const localVarPath = `/api/evidence-request/file/put-some-files/{stepId}`.replace(
				`{${'stepId'}}`,
				encodeURIComponent(String(stepId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				fileLinkDtoList,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {FileLinkDto} fileLinkDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		putFile: async (
			fileLinkDto: FileLinkDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'fileLinkDto' is not null or undefined
			assertParamExists('putFile', 'fileLinkDto', fileLinkDto);
			const localVarPath = `/api/evidence-request/file/put-a-file`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				fileLinkDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * EvidenceRequestFileS3ControllerApi - functional programming interface
 * @export
 */
export const EvidenceRequestFileS3ControllerApiFp = function (
	configuration?: Configuration
) {
	const localVarAxiosParamCreator =
		EvidenceRequestFileS3ControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} fileId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteFile(
			fileId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(
				fileId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {FileLinkDtoList} fileLinkDtoList
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteSomeFiles(
			fileLinkDtoList: FileLinkDtoList,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSomeFiles(
				fileLinkDtoList,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {FileLinkDtoList} fileLinkDtoList
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getASelectionOfFiles(
			fileLinkDtoList: FileLinkDtoList,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileLinkDtoList>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getASelectionOfFiles(
				fileLinkDtoList,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} stepId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getASelectionOfFilesFromStep(
			stepId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileLinkDtoList>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getASelectionOfFilesFromStep(
					stepId,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} fileId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFile(
			fileId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileLinkDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(
				fileId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} stepId
		 * @param {FileLinkDtoList} fileLinkDtoList
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async putASelectionOfFiles(
			stepId: number,
			fileLinkDtoList: FileLinkDtoList,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileLinkDtoList>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.putASelectionOfFiles(
				stepId,
				fileLinkDtoList,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {FileLinkDto} fileLinkDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async putFile(
			fileLinkDto: FileLinkDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.putFile(
				fileLinkDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * EvidenceRequestFileS3ControllerApi - factory interface
 * @export
 */
export const EvidenceRequestFileS3ControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = EvidenceRequestFileS3ControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} fileId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteFile(
			fileId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.deleteFile(fileId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {FileLinkDtoList} fileLinkDtoList
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteSomeFiles(
			fileLinkDtoList: FileLinkDtoList,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.deleteSomeFiles(fileLinkDtoList, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {FileLinkDtoList} fileLinkDtoList
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getASelectionOfFiles(
			fileLinkDtoList: FileLinkDtoList,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<FileLinkDtoList> {
			return localVarFp
				.getASelectionOfFiles(fileLinkDtoList, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} stepId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getASelectionOfFilesFromStep(
			stepId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<FileLinkDtoList> {
			return localVarFp
				.getASelectionOfFilesFromStep(stepId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} fileId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFile(
			fileId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<FileLinkDto> {
			return localVarFp
				.getFile(fileId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} stepId
		 * @param {FileLinkDtoList} fileLinkDtoList
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		putASelectionOfFiles(
			stepId: number,
			fileLinkDtoList: FileLinkDtoList,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<FileLinkDtoList> {
			return localVarFp
				.putASelectionOfFiles(stepId, fileLinkDtoList, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {FileLinkDto} fileLinkDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		putFile(
			fileLinkDto: FileLinkDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.putFile(fileLinkDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for deleteFile operation in EvidenceRequestFileS3ControllerApi.
 * @export
 * @interface EvidenceRequestFileS3ControllerApiDeleteFileRequest
 */
export interface EvidenceRequestFileS3ControllerApiDeleteFileRequest {
	/**
	 *
	 * @type {number}
	 * @memberof EvidenceRequestFileS3ControllerApiDeleteFile
	 */
	readonly fileId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof EvidenceRequestFileS3ControllerApiDeleteFile
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for deleteSomeFiles operation in EvidenceRequestFileS3ControllerApi.
 * @export
 * @interface EvidenceRequestFileS3ControllerApiDeleteSomeFilesRequest
 */
export interface EvidenceRequestFileS3ControllerApiDeleteSomeFilesRequest {
	/**
	 *
	 * @type {FileLinkDtoList}
	 * @memberof EvidenceRequestFileS3ControllerApiDeleteSomeFiles
	 */
	readonly fileLinkDtoList: FileLinkDtoList;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof EvidenceRequestFileS3ControllerApiDeleteSomeFiles
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getASelectionOfFiles operation in EvidenceRequestFileS3ControllerApi.
 * @export
 * @interface EvidenceRequestFileS3ControllerApiGetASelectionOfFilesRequest
 */
export interface EvidenceRequestFileS3ControllerApiGetASelectionOfFilesRequest {
	/**
	 *
	 * @type {FileLinkDtoList}
	 * @memberof EvidenceRequestFileS3ControllerApiGetASelectionOfFiles
	 */
	readonly fileLinkDtoList: FileLinkDtoList;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof EvidenceRequestFileS3ControllerApiGetASelectionOfFiles
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getASelectionOfFilesFromStep operation in EvidenceRequestFileS3ControllerApi.
 * @export
 * @interface EvidenceRequestFileS3ControllerApiGetASelectionOfFilesFromStepRequest
 */
export interface EvidenceRequestFileS3ControllerApiGetASelectionOfFilesFromStepRequest {
	/**
	 *
	 * @type {number}
	 * @memberof EvidenceRequestFileS3ControllerApiGetASelectionOfFilesFromStep
	 */
	readonly stepId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof EvidenceRequestFileS3ControllerApiGetASelectionOfFilesFromStep
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getFile operation in EvidenceRequestFileS3ControllerApi.
 * @export
 * @interface EvidenceRequestFileS3ControllerApiGetFileRequest
 */
export interface EvidenceRequestFileS3ControllerApiGetFileRequest {
	/**
	 *
	 * @type {number}
	 * @memberof EvidenceRequestFileS3ControllerApiGetFile
	 */
	readonly fileId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof EvidenceRequestFileS3ControllerApiGetFile
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for putASelectionOfFiles operation in EvidenceRequestFileS3ControllerApi.
 * @export
 * @interface EvidenceRequestFileS3ControllerApiPutASelectionOfFilesRequest
 */
export interface EvidenceRequestFileS3ControllerApiPutASelectionOfFilesRequest {
	/**
	 *
	 * @type {number}
	 * @memberof EvidenceRequestFileS3ControllerApiPutASelectionOfFiles
	 */
	readonly stepId: number;

	/**
	 *
	 * @type {FileLinkDtoList}
	 * @memberof EvidenceRequestFileS3ControllerApiPutASelectionOfFiles
	 */
	readonly fileLinkDtoList: FileLinkDtoList;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof EvidenceRequestFileS3ControllerApiPutASelectionOfFiles
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for putFile operation in EvidenceRequestFileS3ControllerApi.
 * @export
 * @interface EvidenceRequestFileS3ControllerApiPutFileRequest
 */
export interface EvidenceRequestFileS3ControllerApiPutFileRequest {
	/**
	 *
	 * @type {FileLinkDto}
	 * @memberof EvidenceRequestFileS3ControllerApiPutFile
	 */
	readonly fileLinkDto: FileLinkDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof EvidenceRequestFileS3ControllerApiPutFile
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * EvidenceRequestFileS3ControllerApi - object-oriented interface
 * @export
 * @class EvidenceRequestFileS3ControllerApi
 * @extends {BaseAPI}
 */
export class EvidenceRequestFileS3ControllerApi extends BaseAPI {
	/**
	 *
	 * @param {EvidenceRequestFileS3ControllerApiDeleteFileRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EvidenceRequestFileS3ControllerApi
	 */
	public deleteFile(
		requestParameters: EvidenceRequestFileS3ControllerApiDeleteFileRequest,
		options?: AxiosRequestConfig
	) {
		return EvidenceRequestFileS3ControllerApiFp(this.configuration)
			.deleteFile(requestParameters.fileId, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {EvidenceRequestFileS3ControllerApiDeleteSomeFilesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EvidenceRequestFileS3ControllerApi
	 */
	public deleteSomeFiles(
		requestParameters: EvidenceRequestFileS3ControllerApiDeleteSomeFilesRequest,
		options?: AxiosRequestConfig
	) {
		return EvidenceRequestFileS3ControllerApiFp(this.configuration)
			.deleteSomeFiles(
				requestParameters.fileLinkDtoList,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {EvidenceRequestFileS3ControllerApiGetASelectionOfFilesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EvidenceRequestFileS3ControllerApi
	 */
	public getASelectionOfFiles(
		requestParameters: EvidenceRequestFileS3ControllerApiGetASelectionOfFilesRequest,
		options?: AxiosRequestConfig
	) {
		return EvidenceRequestFileS3ControllerApiFp(this.configuration)
			.getASelectionOfFiles(
				requestParameters.fileLinkDtoList,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {EvidenceRequestFileS3ControllerApiGetASelectionOfFilesFromStepRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EvidenceRequestFileS3ControllerApi
	 */
	public getASelectionOfFilesFromStep(
		requestParameters: EvidenceRequestFileS3ControllerApiGetASelectionOfFilesFromStepRequest,
		options?: AxiosRequestConfig
	) {
		return EvidenceRequestFileS3ControllerApiFp(this.configuration)
			.getASelectionOfFilesFromStep(
				requestParameters.stepId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {EvidenceRequestFileS3ControllerApiGetFileRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EvidenceRequestFileS3ControllerApi
	 */
	public getFile(
		requestParameters: EvidenceRequestFileS3ControllerApiGetFileRequest,
		options?: AxiosRequestConfig
	) {
		return EvidenceRequestFileS3ControllerApiFp(this.configuration)
			.getFile(requestParameters.fileId, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {EvidenceRequestFileS3ControllerApiPutASelectionOfFilesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EvidenceRequestFileS3ControllerApi
	 */
	public putASelectionOfFiles(
		requestParameters: EvidenceRequestFileS3ControllerApiPutASelectionOfFilesRequest,
		options?: AxiosRequestConfig
	) {
		return EvidenceRequestFileS3ControllerApiFp(this.configuration)
			.putASelectionOfFiles(
				requestParameters.stepId,
				requestParameters.fileLinkDtoList,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {EvidenceRequestFileS3ControllerApiPutFileRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EvidenceRequestFileS3ControllerApi
	 */
	public putFile(
		requestParameters: EvidenceRequestFileS3ControllerApiPutFileRequest,
		options?: AxiosRequestConfig
	) {
		return EvidenceRequestFileS3ControllerApiFp(this.configuration)
			.putFile(requestParameters.fileLinkDto, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}
}

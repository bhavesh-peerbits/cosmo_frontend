/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { ApplicationDto } from '../models';
// @ts-ignore
import { CreateMonitoringDto } from '../models';
// @ts-ignore
import { FileLinkDto } from '../models';
// @ts-ignore
import { FrameworkTreeDto } from '../models';
// @ts-ignore
import { InlineObject18 } from '../models';
// @ts-ignore
import { InstanceAssetDto } from '../models';
// @ts-ignore
import { MonitoringDto } from '../models';
// @ts-ignore
import { RunDto } from '../models';
// @ts-ignore
import { UserDto } from '../models';
/**
 * AnalystChangeMonitoringControllerApi - axios parameter creator
 * @export
 */
export const AnalystChangeMonitoringControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		changeStatusWaitingForFocalpoint: async (
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('changeStatusWaitingForFocalpoint', 'runId', runId);
			const localVarPath =
				`/api/change-monitoring/analyst/run/change-status-waiting-fp/{runId}`.replace(
					`{${'runId'}}`,
					encodeURIComponent(String(runId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		closeCompletedRun: async (
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('closeCompletedRun', 'runId', runId);
			const localVarPath =
				`/api/change-monitoring/analyst/run/close-completed/{runId}`.replace(
					`{${'runId'}}`,
					encodeURIComponent(String(runId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		closeMonitoring: async (
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'monitoringId' is not null or undefined
			assertParamExists('closeMonitoring', 'monitoringId', monitoringId);
			const localVarPath =
				`/api/change-monitoring/analyst/monitoring/close/{monitoringId}`.replace(
					`{${'monitoringId'}}`,
					encodeURIComponent(String(monitoringId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		closeRun: async (
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('closeRun', 'runId', runId);
			const localVarPath = `/api/change-monitoring/analyst/run/close/{runId}`.replace(
				`{${'runId'}}`,
				encodeURIComponent(String(runId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {CreateMonitoringDto} createMonitoringDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createDraft: async (
			createMonitoringDto: CreateMonitoringDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'createMonitoringDto' is not null or undefined
			assertParamExists('createDraft', 'createMonitoringDto', createMonitoringDto);
			const localVarPath = `/api/change-monitoring/analyst/create-draft`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				createMonitoringDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		echo: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/change-monitoring/analyst`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {InlineObject18} inlineObject18
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		editMonitoringFocalpointAndDelegates: async (
			monitoringId: number,
			inlineObject18: InlineObject18,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'monitoringId' is not null or undefined
			assertParamExists(
				'editMonitoringFocalpointAndDelegates',
				'monitoringId',
				monitoringId
			);
			// verify required parameter 'inlineObject18' is not null or undefined
			assertParamExists(
				'editMonitoringFocalpointAndDelegates',
				'inlineObject18',
				inlineObject18
			);
			const localVarPath =
				`/api/change-monitoring/analyst/monitoring/set-focalpoint-and-delegates/{monitoringId}`.replace(
					`{${'monitoringId'}}`,
					encodeURIComponent(String(monitoringId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				inlineObject18,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplication: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/change-monitoring/analyst/get-all-applications`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllDraftNames: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/change-monitoring/analyst/all-draft-names`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllFilesAnswers: async (
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('getAllFilesAnswers', 'runId', runId);
			const localVarPath = `/api/change-monitoring/analyst/run/filelinks`.replace(
				`{${'runId'}}`,
				encodeURIComponent(String(runId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllMonitoring: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/change-monitoring/analyst/monitoring/all`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllMonitoringDraft: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/change-monitoring/analyst/get-all-draft`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} applicationCodeName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationInstances: async (
			applicationCodeName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationCodeName' is not null or undefined
			assertParamExists(
				'getApplicationInstances',
				'applicationCodeName',
				applicationCodeName
			);
			const localVarPath =
				`/api/change-monitoring/analyst/get-application-instances/{applicationCodeName}`.replace(
					`{${'applicationCodeName'}}`,
					encodeURIComponent(String(applicationCodeName))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getDraft: async (
			draftId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'draftId' is not null or undefined
			assertParamExists('getDraft', 'draftId', draftId);
			const localVarPath = `/api/change-monitoring/analyst/draft/{draftId}`.replace(
				`{${'draftId'}}`,
				encodeURIComponent(String(draftId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} frameworkCode
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFrameworkByCode: async (
			frameworkCode: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'frameworkCode' is not null or undefined
			assertParamExists('getFrameworkByCode', 'frameworkCode', frameworkCode);
			const localVarPath =
				`/api/change-monitoring/analyst/get-framework-code/{frameworkCode}`.replace(
					`{${'frameworkCode'}}`,
					encodeURIComponent(String(frameworkCode))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFrameworkCodes: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/change-monitoring/analyst/get-framework-codes`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getMonitoringById: async (
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'monitoringId' is not null or undefined
			assertParamExists('getMonitoringById', 'monitoringId', monitoringId);
			const localVarPath =
				`/api/change-monitoring/analyst/monitoring/{monitoringId}`.replace(
					`{${'monitoringId'}}`,
					encodeURIComponent(String(monitoringId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getRunById: async (
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('getRunById', 'runId', runId);
			const localVarPath = `/api/change-monitoring/analyst/run/{runId}`.replace(
				`{${'runId'}}`,
				encodeURIComponent(String(runId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {MonitoringDto} monitoringDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveDraft1: async (
			monitoringDto: MonitoringDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'monitoringDto' is not null or undefined
			assertParamExists('saveDraft1', 'monitoringDto', monitoringDto);
			const localVarPath = `/api/change-monitoring/analyst/save-draft`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				monitoringDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {RunDto} runDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveRun: async (
			runDto: RunDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runDto' is not null or undefined
			assertParamExists('saveRun', 'runDto', runDto);
			const localVarPath = `/api/change-monitoring/analyst/run/save`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				runDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {RunDto} runDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveRunAndGoNext: async (
			runDto: RunDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runDto' is not null or undefined
			assertParamExists('saveRunAndGoNext', 'runDto', runDto);
			const localVarPath = `/api/change-monitoring/analyst/run/save-and-go-next`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				runDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {Set<UserDto>} userDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		setMonitoringCollaborator: async (
			monitoringId: number,
			userDto: Set<UserDto>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'monitoringId' is not null or undefined
			assertParamExists('setMonitoringCollaborator', 'monitoringId', monitoringId);
			// verify required parameter 'userDto' is not null or undefined
			assertParamExists('setMonitoringCollaborator', 'userDto', userDto);
			const localVarPath =
				`/api/change-monitoring/analyst/monitoring/set-collaborators/{monitoringId}`.replace(
					`{${'monitoringId'}}`,
					encodeURIComponent(String(monitoringId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				userDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * AnalystChangeMonitoringControllerApi - functional programming interface
 * @export
 */
export const AnalystChangeMonitoringControllerApiFp = function (
	configuration?: Configuration
) {
	const localVarAxiosParamCreator =
		AnalystChangeMonitoringControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async changeStatusWaitingForFocalpoint(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunDto>> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.changeStatusWaitingForFocalpoint(
					runId,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async closeCompletedRun(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.closeCompletedRun(
				runId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async closeMonitoring(
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.closeMonitoring(
				monitoringId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async closeRun(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.closeRun(
				runId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {CreateMonitoringDto} createMonitoringDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createDraft(
			createMonitoringDto: CreateMonitoringDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createDraft(
				createMonitoringDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		async echo(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.echo(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {InlineObject18} inlineObject18
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async editMonitoringFocalpointAndDelegates(
			monitoringId: number,
			inlineObject18: InlineObject18,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDto>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.editMonitoringFocalpointAndDelegates(
					monitoringId,
					inlineObject18,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllApplication(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<ApplicationDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllApplication(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllDraftNames(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<string>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDraftNames(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllFilesAnswers(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<FileLinkDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllFilesAnswers(
				runId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllMonitoring(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<MonitoringDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMonitoring(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllMonitoringDraft(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<MonitoringDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMonitoringDraft(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} applicationCodeName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getApplicationInstances(
			applicationCodeName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<InstanceAssetDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationInstances(
				applicationCodeName,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getDraft(
			draftId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getDraft(
				draftId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} frameworkCode
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFrameworkByCode(
			frameworkCode: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameworkTreeDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFrameworkByCode(
				frameworkCode,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFrameworkCodes(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Set<string>>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFrameworkCodes(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getMonitoringById(
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getMonitoringById(
				monitoringId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getRunById(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getRunById(
				runId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {MonitoringDto} monitoringDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveDraft1(
			monitoringDto: MonitoringDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.saveDraft1(
				monitoringDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {RunDto} runDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveRun(
			runDto: RunDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.saveRun(
				runDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {RunDto} runDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveRunAndGoNext(
			runDto: RunDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.saveRunAndGoNext(
				runDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {Set<UserDto>} userDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async setMonitoringCollaborator(
			monitoringId: number,
			userDto: Set<UserDto>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.setMonitoringCollaborator(
				monitoringId,
				userDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * AnalystChangeMonitoringControllerApi - factory interface
 * @export
 */
export const AnalystChangeMonitoringControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = AnalystChangeMonitoringControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		changeStatusWaitingForFocalpoint(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<RunDto> {
			return localVarFp
				.changeStatusWaitingForFocalpoint(runId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		closeCompletedRun(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<RunDto> {
			return localVarFp
				.closeCompletedRun(runId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		closeMonitoring(
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDto> {
			return localVarFp
				.closeMonitoring(monitoringId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		closeRun(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<RunDto> {
			return localVarFp
				.closeRun(runId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {CreateMonitoringDto} createMonitoringDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createDraft(
			createMonitoringDto: CreateMonitoringDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDto> {
			return localVarFp
				.createDraft(createMonitoringDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		echo(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.echo(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {InlineObject18} inlineObject18
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		editMonitoringFocalpointAndDelegates(
			monitoringId: number,
			inlineObject18: InlineObject18,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDto> {
			return localVarFp
				.editMonitoringFocalpointAndDelegates(
					monitoringId,
					inlineObject18,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplication(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Set<ApplicationDto>> {
			return localVarFp
				.getAllApplication(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllDraftNames(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Set<string>> {
			return localVarFp
				.getAllDraftNames(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllFilesAnswers(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Set<FileLinkDto>> {
			return localVarFp
				.getAllFilesAnswers(runId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllMonitoring(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Set<MonitoringDto>> {
			return localVarFp
				.getAllMonitoring(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllMonitoringDraft(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Set<MonitoringDto>> {
			return localVarFp
				.getAllMonitoringDraft(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} applicationCodeName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationInstances(
			applicationCodeName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Set<InstanceAssetDto>> {
			return localVarFp
				.getApplicationInstances(applicationCodeName, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getDraft(
			draftId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDto> {
			return localVarFp
				.getDraft(draftId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} frameworkCode
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFrameworkByCode(
			frameworkCode: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<FrameworkTreeDto> {
			return localVarFp
				.getFrameworkByCode(frameworkCode, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFrameworkCodes(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Set<string>> {
			return localVarFp
				.getFrameworkCodes(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getMonitoringById(
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDto> {
			return localVarFp
				.getMonitoringById(monitoringId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getRunById(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<RunDto> {
			return localVarFp
				.getRunById(runId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {MonitoringDto} monitoringDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveDraft1(
			monitoringDto: MonitoringDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDto> {
			return localVarFp
				.saveDraft1(monitoringDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {RunDto} runDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveRun(
			runDto: RunDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<RunDto> {
			return localVarFp
				.saveRun(runDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {RunDto} runDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveRunAndGoNext(
			runDto: RunDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<RunDto> {
			return localVarFp
				.saveRunAndGoNext(runDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {Set<UserDto>} userDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		setMonitoringCollaborator(
			monitoringId: number,
			userDto: Set<UserDto>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDto> {
			return localVarFp
				.setMonitoringCollaborator(monitoringId, userDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for changeStatusWaitingForFocalpoint operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiChangeStatusWaitingForFocalpointRequest
 */
export interface AnalystChangeMonitoringControllerApiChangeStatusWaitingForFocalpointRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiChangeStatusWaitingForFocalpoint
	 */
	readonly runId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiChangeStatusWaitingForFocalpoint
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for closeCompletedRun operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiCloseCompletedRunRequest
 */
export interface AnalystChangeMonitoringControllerApiCloseCompletedRunRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiCloseCompletedRun
	 */
	readonly runId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiCloseCompletedRun
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for closeMonitoring operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiCloseMonitoringRequest
 */
export interface AnalystChangeMonitoringControllerApiCloseMonitoringRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiCloseMonitoring
	 */
	readonly monitoringId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiCloseMonitoring
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for closeRun operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiCloseRunRequest
 */
export interface AnalystChangeMonitoringControllerApiCloseRunRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiCloseRun
	 */
	readonly runId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiCloseRun
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for createDraft operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiCreateDraftRequest
 */
export interface AnalystChangeMonitoringControllerApiCreateDraftRequest {
	/**
	 *
	 * @type {CreateMonitoringDto}
	 * @memberof AnalystChangeMonitoringControllerApiCreateDraft
	 */
	readonly createMonitoringDto: CreateMonitoringDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiCreateDraft
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for echo operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiEchoRequest
 */
export interface AnalystChangeMonitoringControllerApiEchoRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiEcho
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for editMonitoringFocalpointAndDelegates operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegatesRequest
 */
export interface AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegatesRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegates
	 */
	readonly monitoringId: number;

	/**
	 *
	 * @type {InlineObject18}
	 * @memberof AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegates
	 */
	readonly inlineObject18: InlineObject18;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegates
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllApplication operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetAllApplicationRequest
 */
export interface AnalystChangeMonitoringControllerApiGetAllApplicationRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetAllApplication
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllDraftNames operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetAllDraftNamesRequest
 */
export interface AnalystChangeMonitoringControllerApiGetAllDraftNamesRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetAllDraftNames
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllFilesAnswers operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetAllFilesAnswersRequest
 */
export interface AnalystChangeMonitoringControllerApiGetAllFilesAnswersRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetAllFilesAnswers
	 */
	readonly runId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetAllFilesAnswers
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllMonitoring operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetAllMonitoringRequest
 */
export interface AnalystChangeMonitoringControllerApiGetAllMonitoringRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetAllMonitoring
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllMonitoringDraft operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetAllMonitoringDraftRequest
 */
export interface AnalystChangeMonitoringControllerApiGetAllMonitoringDraftRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetAllMonitoringDraft
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getApplicationInstances operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetApplicationInstancesRequest
 */
export interface AnalystChangeMonitoringControllerApiGetApplicationInstancesRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystChangeMonitoringControllerApiGetApplicationInstances
	 */
	readonly applicationCodeName: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetApplicationInstances
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getDraft operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetDraftRequest
 */
export interface AnalystChangeMonitoringControllerApiGetDraftRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetDraft
	 */
	readonly draftId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetDraft
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getFrameworkByCode operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetFrameworkByCodeRequest
 */
export interface AnalystChangeMonitoringControllerApiGetFrameworkByCodeRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystChangeMonitoringControllerApiGetFrameworkByCode
	 */
	readonly frameworkCode: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetFrameworkByCode
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getFrameworkCodes operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetFrameworkCodesRequest
 */
export interface AnalystChangeMonitoringControllerApiGetFrameworkCodesRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetFrameworkCodes
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getMonitoringById operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetMonitoringByIdRequest
 */
export interface AnalystChangeMonitoringControllerApiGetMonitoringByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetMonitoringById
	 */
	readonly monitoringId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetMonitoringById
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getRunById operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetRunByIdRequest
 */
export interface AnalystChangeMonitoringControllerApiGetRunByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetRunById
	 */
	readonly runId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetRunById
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for saveDraft1 operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiSaveDraft1Request
 */
export interface AnalystChangeMonitoringControllerApiSaveDraft1Request {
	/**
	 *
	 * @type {MonitoringDto}
	 * @memberof AnalystChangeMonitoringControllerApiSaveDraft1
	 */
	readonly monitoringDto: MonitoringDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiSaveDraft1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for saveRun operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiSaveRunRequest
 */
export interface AnalystChangeMonitoringControllerApiSaveRunRequest {
	/**
	 *
	 * @type {RunDto}
	 * @memberof AnalystChangeMonitoringControllerApiSaveRun
	 */
	readonly runDto: RunDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiSaveRun
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for saveRunAndGoNext operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiSaveRunAndGoNextRequest
 */
export interface AnalystChangeMonitoringControllerApiSaveRunAndGoNextRequest {
	/**
	 *
	 * @type {RunDto}
	 * @memberof AnalystChangeMonitoringControllerApiSaveRunAndGoNext
	 */
	readonly runDto: RunDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiSaveRunAndGoNext
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for setMonitoringCollaborator operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiSetMonitoringCollaboratorRequest
 */
export interface AnalystChangeMonitoringControllerApiSetMonitoringCollaboratorRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiSetMonitoringCollaborator
	 */
	readonly monitoringId: number;

	/**
	 *
	 * @type {Set<UserDto>}
	 * @memberof AnalystChangeMonitoringControllerApiSetMonitoringCollaborator
	 */
	readonly userDto: Set<UserDto>;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiSetMonitoringCollaborator
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * AnalystChangeMonitoringControllerApi - object-oriented interface
 * @export
 * @class AnalystChangeMonitoringControllerApi
 * @extends {BaseAPI}
 */
export class AnalystChangeMonitoringControllerApi extends BaseAPI {
	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiChangeStatusWaitingForFocalpointRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public changeStatusWaitingForFocalpoint(
		requestParameters: AnalystChangeMonitoringControllerApiChangeStatusWaitingForFocalpointRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.changeStatusWaitingForFocalpoint(
				requestParameters.runId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiCloseCompletedRunRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public closeCompletedRun(
		requestParameters: AnalystChangeMonitoringControllerApiCloseCompletedRunRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.closeCompletedRun(
				requestParameters.runId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiCloseMonitoringRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public closeMonitoring(
		requestParameters: AnalystChangeMonitoringControllerApiCloseMonitoringRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.closeMonitoring(
				requestParameters.monitoringId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiCloseRunRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public closeRun(
		requestParameters: AnalystChangeMonitoringControllerApiCloseRunRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.closeRun(requestParameters.runId, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiCreateDraftRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public createDraft(
		requestParameters: AnalystChangeMonitoringControllerApiCreateDraftRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.createDraft(
				requestParameters.createMonitoringDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiEchoRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @deprecated
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public echo(
		requestParameters: AnalystChangeMonitoringControllerApiEchoRequest = {},
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.echo(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegatesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public editMonitoringFocalpointAndDelegates(
		requestParameters: AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegatesRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.editMonitoringFocalpointAndDelegates(
				requestParameters.monitoringId,
				requestParameters.inlineObject18,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetAllApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getAllApplication(
		requestParameters: AnalystChangeMonitoringControllerApiGetAllApplicationRequest = {},
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getAllApplication(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetAllDraftNamesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getAllDraftNames(
		requestParameters: AnalystChangeMonitoringControllerApiGetAllDraftNamesRequest = {},
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getAllDraftNames(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetAllFilesAnswersRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getAllFilesAnswers(
		requestParameters: AnalystChangeMonitoringControllerApiGetAllFilesAnswersRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getAllFilesAnswers(
				requestParameters.runId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetAllMonitoringRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getAllMonitoring(
		requestParameters: AnalystChangeMonitoringControllerApiGetAllMonitoringRequest = {},
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getAllMonitoring(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetAllMonitoringDraftRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getAllMonitoringDraft(
		requestParameters: AnalystChangeMonitoringControllerApiGetAllMonitoringDraftRequest = {},
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getAllMonitoringDraft(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetApplicationInstancesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getApplicationInstances(
		requestParameters: AnalystChangeMonitoringControllerApiGetApplicationInstancesRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getApplicationInstances(
				requestParameters.applicationCodeName,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetDraftRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getDraft(
		requestParameters: AnalystChangeMonitoringControllerApiGetDraftRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getDraft(requestParameters.draftId, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetFrameworkByCodeRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getFrameworkByCode(
		requestParameters: AnalystChangeMonitoringControllerApiGetFrameworkByCodeRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getFrameworkByCode(
				requestParameters.frameworkCode,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetFrameworkCodesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getFrameworkCodes(
		requestParameters: AnalystChangeMonitoringControllerApiGetFrameworkCodesRequest = {},
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getFrameworkCodes(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetMonitoringByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getMonitoringById(
		requestParameters: AnalystChangeMonitoringControllerApiGetMonitoringByIdRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getMonitoringById(
				requestParameters.monitoringId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetRunByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getRunById(
		requestParameters: AnalystChangeMonitoringControllerApiGetRunByIdRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getRunById(requestParameters.runId, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiSaveDraft1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public saveDraft1(
		requestParameters: AnalystChangeMonitoringControllerApiSaveDraft1Request,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.saveDraft1(
				requestParameters.monitoringDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiSaveRunRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public saveRun(
		requestParameters: AnalystChangeMonitoringControllerApiSaveRunRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.saveRun(requestParameters.runDto, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiSaveRunAndGoNextRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public saveRunAndGoNext(
		requestParameters: AnalystChangeMonitoringControllerApiSaveRunAndGoNextRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.saveRunAndGoNext(
				requestParameters.runDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiSetMonitoringCollaboratorRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public setMonitoringCollaborator(
		requestParameters: AnalystChangeMonitoringControllerApiSetMonitoringCollaboratorRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.setMonitoringCollaborator(
				requestParameters.monitoringId,
				requestParameters.userDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}
}

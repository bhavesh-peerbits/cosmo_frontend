/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { ApplicationDto } from '../models';
// @ts-ignore
import { AssociationDto } from '../models';
// @ts-ignore
import { CheckPathAssetsDto } from '../models';
// @ts-ignore
import { CheckPathDto } from '../models';
// @ts-ignore
import { CreateMonitoringDto } from '../models';
// @ts-ignore
import { DeltaDto } from '../models';
// @ts-ignore
import { DeltaFileDto } from '../models';
// @ts-ignore
import { FileForDeltaDto } from '../models';
// @ts-ignore
import { FileLinkDto } from '../models';
// @ts-ignore
import { FileLinkDtoList } from '../models';
// @ts-ignore
import { FocalPointAndDelegatesDto } from '../models';
// @ts-ignore
import { FrameworkTreeDto } from '../models';
// @ts-ignore
import { InlineObject17 } from '../models';
// @ts-ignore
import { InstanceAssetDto } from '../models';
// @ts-ignore
import { MonitoringDraftDto } from '../models';
// @ts-ignore
import { MonitoringDto } from '../models';
// @ts-ignore
import { PathMonitoringDto } from '../models';
// @ts-ignore
import { RunDto } from '../models';
// @ts-ignore
import { RunFileLinkDto } from '../models';
// @ts-ignore
import { ScriptDto } from '../models';
/**
 * AnalystChangeMonitoringControllerApi - axios parameter creator
 * @export
 */
export const AnalystChangeMonitoringControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {number} fileLinkId
		 * @param {FileForDeltaDto} fileForDeltaDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addAlreadyUploadedFileForDelta: async (
			runId: number,
			assetId: number,
			fileLinkId: number,
			fileForDeltaDto: FileForDeltaDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('addAlreadyUploadedFileForDelta', 'runId', runId);
			// verify required parameter 'assetId' is not null or undefined
			assertParamExists('addAlreadyUploadedFileForDelta', 'assetId', assetId);
			// verify required parameter 'fileLinkId' is not null or undefined
			assertParamExists('addAlreadyUploadedFileForDelta', 'fileLinkId', fileLinkId);
			// verify required parameter 'fileForDeltaDto' is not null or undefined
			assertParamExists(
				'addAlreadyUploadedFileForDelta',
				'fileForDeltaDto',
				fileForDeltaDto
			);
			const localVarPath =
				`/api/change-monitoring/analyst/run/{runId}/asset/{assetId}/file/{fileLinkId}/add-file-already-uploaded-for-delta`
					.replace(`{${'runId'}}`, encodeURIComponent(String(runId)))
					.replace(`{${'assetId'}}`, encodeURIComponent(String(assetId)))
					.replace(`{${'fileLinkId'}}`, encodeURIComponent(String(fileLinkId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				fileForDeltaDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {FileForDeltaDto} fileForDelta
		 * @param {any} file
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFileForDelta: async (
			runId: number,
			assetId: number,
			fileForDelta: FileForDeltaDto,
			file: any,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('addFileForDelta', 'runId', runId);
			// verify required parameter 'assetId' is not null or undefined
			assertParamExists('addFileForDelta', 'assetId', assetId);
			// verify required parameter 'fileForDelta' is not null or undefined
			assertParamExists('addFileForDelta', 'fileForDelta', fileForDelta);
			// verify required parameter 'file' is not null or undefined
			assertParamExists('addFileForDelta', 'file', file);
			const localVarPath =
				`/api/change-monitoring/analyst/run/{runId}/asset/{assetId}/add-file-for-delta`
					.replace(`{${'runId'}}`, encodeURIComponent(String(runId)))
					.replace(`{${'assetId'}}`, encodeURIComponent(String(assetId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;
			const localVarFormParams = new ((configuration && configuration.formDataCtor) ||
				FormData)();

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			if (fileForDelta !== undefined) {
				localVarFormParams.append(
					'fileForDelta',
					new Blob([JSON.stringify(fileForDelta)], { type: 'application/json' })
				);
			}

			if (file !== undefined) {
				localVarFormParams.append('file', file as any);
			}

			localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = localVarFormParams;

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {FileForDeltaDto} fileForDeltaDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addOldRunFileForDelta: async (
			runId: number,
			assetId: number,
			fileForDeltaDto: FileForDeltaDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('addOldRunFileForDelta', 'runId', runId);
			// verify required parameter 'assetId' is not null or undefined
			assertParamExists('addOldRunFileForDelta', 'assetId', assetId);
			// verify required parameter 'fileForDeltaDto' is not null or undefined
			assertParamExists('addOldRunFileForDelta', 'fileForDeltaDto', fileForDeltaDto);
			const localVarPath =
				`/api/change-monitoring/analyst/run/{runId}/asset/{assetId}/add-old-run-file-for-delta`
					.replace(`{${'runId'}}`, encodeURIComponent(String(runId)))
					.replace(`{${'assetId'}}`, encodeURIComponent(String(assetId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				fileForDeltaDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {number} assetId
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addPath: async (
			draftId: number,
			assetId: number,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'draftId' is not null or undefined
			assertParamExists('addPath', 'draftId', draftId);
			// verify required parameter 'assetId' is not null or undefined
			assertParamExists('addPath', 'assetId', assetId);
			// verify required parameter 'body' is not null or undefined
			assertParamExists('addPath', 'body', body);
			const localVarPath =
				`/api/change-monitoring/analyst/draft/{draftId}/add-path/{assetId}`
					.replace(`{${'draftId'}}`, encodeURIComponent(String(draftId)))
					.replace(`{${'assetId'}}`, encodeURIComponent(String(assetId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'text/plain';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				body,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addPathRun: async (
			runId: number,
			assetId: number,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('addPathRun', 'runId', runId);
			// verify required parameter 'assetId' is not null or undefined
			assertParamExists('addPathRun', 'assetId', assetId);
			// verify required parameter 'body' is not null or undefined
			assertParamExists('addPathRun', 'body', body);
			const localVarPath = `/api/change-monitoring/analyst/run/{runId}/add-path/{assetId}`
				.replace(`{${'runId'}}`, encodeURIComponent(String(runId)))
				.replace(`{${'assetId'}}`, encodeURIComponent(String(assetId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'text/plain';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				body,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addPathsRun: async (
			runId: number,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('addPathsRun', 'runId', runId);
			// verify required parameter 'body' is not null or undefined
			assertParamExists('addPathsRun', 'body', body);
			const localVarPath = `/api/change-monitoring/analyst/run/{runId}/add-paths`.replace(
				`{${'runId'}}`,
				encodeURIComponent(String(runId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'text/plain';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				body,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} assetId
		 * @param {Array<string>} requestBody
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkPath: async (
			assetId: number,
			requestBody: Array<string>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'assetId' is not null or undefined
			assertParamExists('checkPath', 'assetId', assetId);
			// verify required parameter 'requestBody' is not null or undefined
			assertParamExists('checkPath', 'requestBody', requestBody);
			const localVarPath = `/api/change-monitoring/analyst/check-path/{assetId}`.replace(
				`{${'assetId'}}`,
				encodeURIComponent(String(assetId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				requestBody,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {CheckPathAssetsDto} checkPathAssetsDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkPathForMultipleAssets: async (
			checkPathAssetsDto: CheckPathAssetsDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'checkPathAssetsDto' is not null or undefined
			assertParamExists(
				'checkPathForMultipleAssets',
				'checkPathAssetsDto',
				checkPathAssetsDto
			);
			const localVarPath = `/api/change-monitoring/analyst/check-path-for-multiple-assets`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				checkPathAssetsDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		closeCompletedRun1: async (
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('closeCompletedRun1', 'runId', runId);
			const localVarPath =
				`/api/change-monitoring/analyst/run/close-completed/{runId}`.replace(
					`{${'runId'}}`,
					encodeURIComponent(String(runId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		closeMonitoring: async (
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'monitoringId' is not null or undefined
			assertParamExists('closeMonitoring', 'monitoringId', monitoringId);
			const localVarPath =
				`/api/change-monitoring/analyst/monitoring/close/{monitoringId}`.replace(
					`{${'monitoringId'}}`,
					encodeURIComponent(String(monitoringId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		closeRun: async (
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('closeRun', 'runId', runId);
			const localVarPath = `/api/change-monitoring/analyst/run/close/{runId}`.replace(
				`{${'runId'}}`,
				encodeURIComponent(String(runId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {CreateMonitoringDto} createMonitoringDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createDraft: async (
			createMonitoringDto: CreateMonitoringDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'createMonitoringDto' is not null or undefined
			assertParamExists('createDraft', 'createMonitoringDto', createMonitoringDto);
			const localVarPath = `/api/change-monitoring/analyst/create-draft`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				createMonitoringDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteDraft: async (
			draftId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'draftId' is not null or undefined
			assertParamExists('deleteDraft', 'draftId', draftId);
			const localVarPath =
				`/api/change-monitoring/analyst/delete-draft/{draftId}`.replace(
					`{${'draftId'}}`,
					encodeURIComponent(String(draftId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		echo1: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/change-monitoring/analyst`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {FocalPointAndDelegatesDto} focalPointAndDelegatesDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		editMonitoringFocalpointAndDelegates: async (
			monitoringId: number,
			focalPointAndDelegatesDto: FocalPointAndDelegatesDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'monitoringId' is not null or undefined
			assertParamExists(
				'editMonitoringFocalpointAndDelegates',
				'monitoringId',
				monitoringId
			);
			// verify required parameter 'focalPointAndDelegatesDto' is not null or undefined
			assertParamExists(
				'editMonitoringFocalpointAndDelegates',
				'focalPointAndDelegatesDto',
				focalPointAndDelegatesDto
			);
			const localVarPath =
				`/api/change-monitoring/analyst/monitoring/set-focalpoint-and-delegates/{monitoringId}`.replace(
					`{${'monitoringId'}}`,
					encodeURIComponent(String(monitoringId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				focalPointAndDelegatesDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplication: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/change-monitoring/analyst/get-all-applications`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllDraftNames: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/change-monitoring/analyst/all-draft-names`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllFilesAnswers1: async (
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('getAllFilesAnswers1', 'runId', runId);
			const localVarPath = `/api/change-monitoring/analyst/run/{runId}/filelinks`.replace(
				`{${'runId'}}`,
				encodeURIComponent(String(runId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllMonitoring1: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/change-monitoring/analyst/monitoring/all`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllMonitoringDraft: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/change-monitoring/analyst/get-all-draft`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} applicationCodeName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationInstances: async (
			applicationCodeName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationCodeName' is not null or undefined
			assertParamExists(
				'getApplicationInstances',
				'applicationCodeName',
				applicationCodeName
			);
			const localVarPath =
				`/api/change-monitoring/analyst/get-application-instances/{applicationCodeName}`.replace(
					`{${'applicationCodeName'}}`,
					encodeURIComponent(String(applicationCodeName))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} instanceId
		 * @param {string} leafs
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getControls: async (
			instanceId: number,
			leafs: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'instanceId' is not null or undefined
			assertParamExists('getControls', 'instanceId', instanceId);
			// verify required parameter 'leafs' is not null or undefined
			assertParamExists('getControls', 'leafs', leafs);
			const localVarPath =
				`/api/change-monitoring/analyst/get-controls/{instanceId}/{leafs}`
					.replace(`{${'instanceId'}}`, encodeURIComponent(String(instanceId)))
					.replace(`{${'leafs'}}`, encodeURIComponent(String(leafs)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {Array<number>} requestBody
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCsvAnswer1: async (
			deltaId: number,
			requestBody: Array<number>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'deltaId' is not null or undefined
			assertParamExists('getCsvAnswer1', 'deltaId', deltaId);
			// verify required parameter 'requestBody' is not null or undefined
			assertParamExists('getCsvAnswer1', 'requestBody', requestBody);
			const localVarPath =
				`/api/change-monitoring/analyst/get-csv-answer/{deltaId}`.replace(
					`{${'deltaId'}}`,
					encodeURIComponent(String(deltaId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				requestBody,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getDraft: async (
			draftId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'draftId' is not null or undefined
			assertParamExists('getDraft', 'draftId', draftId);
			const localVarPath = `/api/change-monitoring/analyst/draft/{draftId}`.replace(
				`{${'draftId'}}`,
				encodeURIComponent(String(draftId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileFromCurrentPreviousRun: async (
			runId: number,
			assetId: number,
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('getFileFromCurrentPreviousRun', 'runId', runId);
			// verify required parameter 'assetId' is not null or undefined
			assertParamExists('getFileFromCurrentPreviousRun', 'assetId', assetId);
			// verify required parameter 'monitoringId' is not null or undefined
			assertParamExists('getFileFromCurrentPreviousRun', 'monitoringId', monitoringId);
			const localVarPath =
				`/api/change-monitoring/analyst/monitoring/{monitoringId}/run/{runId}/asset/{assetId}/get-file-previous`
					.replace(`{${'runId'}}`, encodeURIComponent(String(runId)))
					.replace(`{${'assetId'}}`, encodeURIComponent(String(assetId)))
					.replace(`{${'monitoringId'}}`, encodeURIComponent(String(monitoringId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} frameworkCode
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFrameworkByCode: async (
			frameworkCode: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'frameworkCode' is not null or undefined
			assertParamExists('getFrameworkByCode', 'frameworkCode', frameworkCode);
			const localVarPath =
				`/api/change-monitoring/analyst/get-framework-code/{frameworkCode}`.replace(
					`{${'frameworkCode'}}`,
					encodeURIComponent(String(frameworkCode))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFrameworkCodes: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/change-monitoring/analyst/get-framework-codes`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getMonitoringById: async (
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'monitoringId' is not null or undefined
			assertParamExists('getMonitoringById', 'monitoringId', monitoringId);
			const localVarPath =
				`/api/change-monitoring/analyst/monitoring/{monitoringId}`.replace(
					`{${'monitoringId'}}`,
					encodeURIComponent(String(monitoringId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getRunById: async (
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('getRunById', 'runId', runId);
			const localVarPath = `/api/change-monitoring/analyst/run/{runId}`.replace(
				`{${'runId'}}`,
				encodeURIComponent(String(runId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getScriptByDraft: async (
			draftId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'draftId' is not null or undefined
			assertParamExists('getScriptByDraft', 'draftId', draftId);
			const localVarPath =
				`/api/change-monitoring/analyst/get-all-script/{draftId}`.replace(
					`{${'draftId'}}`,
					encodeURIComponent(String(draftId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		goNextStep: async (
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('goNextStep', 'runId', runId);
			const localVarPath =
				`/api/change-monitoring/analyst/run/{runId}/go-next-step`.replace(
					`{${'runId'}}`,
					encodeURIComponent(String(runId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {Array<any>} files
		 * @param {Array<DeltaFileDto>} deltaFiles
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {string} [text]
		 * @param {FileLinkDtoList} [fileslinks]
		 * @param {boolean} [ignore]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveAnswerWithFile: async (
			deltaId: number,
			files: Array<any>,
			deltaFiles: Array<DeltaFileDto>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			text?: string,
			fileslinks?: FileLinkDtoList,
			ignore?: boolean,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'deltaId' is not null or undefined
			assertParamExists('saveAnswerWithFile', 'deltaId', deltaId);
			// verify required parameter 'files' is not null or undefined
			assertParamExists('saveAnswerWithFile', 'files', files);
			// verify required parameter 'deltaFiles' is not null or undefined
			assertParamExists('saveAnswerWithFile', 'deltaFiles', deltaFiles);
			const localVarPath =
				`/api/change-monitoring/analyst/save-answer-with-file/{deltaId}`.replace(
					`{${'deltaId'}}`,
					encodeURIComponent(String(deltaId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;
			const localVarFormParams = new ((configuration && configuration.formDataCtor) ||
				FormData)();

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (files) {
				localVarQueryParameter['files'] = files;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			if (text !== undefined) {
				localVarFormParams.append('text', text as any);
			}
			if (deltaFiles) {
				localVarFormParams.append('deltaFiles', deltaFiles.join(COLLECTION_FORMATS.csv));
			}

			if (fileslinks !== undefined) {
				localVarFormParams.append(
					'fileslinks',
					new Blob([JSON.stringify(fileslinks)], { type: 'application/json' })
				);
			}

			if (ignore !== undefined) {
				localVarFormParams.append('ignore', ignore as any);
			}

			localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = localVarFormParams;

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {MonitoringDraftDto} monitoringDraftDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveDraft1: async (
			monitoringDraftDto: MonitoringDraftDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'monitoringDraftDto' is not null or undefined
			assertParamExists('saveDraft1', 'monitoringDraftDto', monitoringDraftDto);
			const localVarPath = `/api/change-monitoring/analyst/save-draft`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				monitoringDraftDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} runId
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveNotes: async (
			runId: number,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runId' is not null or undefined
			assertParamExists('saveNotes', 'runId', runId);
			// verify required parameter 'body' is not null or undefined
			assertParamExists('saveNotes', 'body', body);
			const localVarPath =
				`/api/change-monitoring/analyst/run/{runId}/save-notes`.replace(
					`{${'runId'}}`,
					encodeURIComponent(String(runId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'text/plain';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				body,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {RunDto} runDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveRun: async (
			runDto: RunDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'runDto' is not null or undefined
			assertParamExists('saveRun', 'runDto', runDto);
			const localVarPath = `/api/change-monitoring/analyst/run/save`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				runDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {Array<string>} requestBody
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		setMonitoringCollaborator: async (
			monitoringId: number,
			requestBody: Array<string>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'monitoringId' is not null or undefined
			assertParamExists('setMonitoringCollaborator', 'monitoringId', monitoringId);
			// verify required parameter 'requestBody' is not null or undefined
			assertParamExists('setMonitoringCollaborator', 'requestBody', requestBody);
			const localVarPath =
				`/api/change-monitoring/analyst/monitoring/set-collaborators/{monitoringId}`.replace(
					`{${'monitoringId'}}`,
					encodeURIComponent(String(monitoringId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				requestBody,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {MonitoringDraftDto} monitoringDraftDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		startMonitoring: async (
			monitoringDraftDto: MonitoringDraftDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'monitoringDraftDto' is not null or undefined
			assertParamExists('startMonitoring', 'monitoringDraftDto', monitoringDraftDto);
			const localVarPath = `/api/change-monitoring/analyst/start-monitoring`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				monitoringDraftDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {InlineObject17} inlineObject17
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		uploadCsvAnswer1: async (
			deltaId: number,
			inlineObject17: InlineObject17,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'deltaId' is not null or undefined
			assertParamExists('uploadCsvAnswer1', 'deltaId', deltaId);
			// verify required parameter 'inlineObject17' is not null or undefined
			assertParamExists('uploadCsvAnswer1', 'inlineObject17', inlineObject17);
			const localVarPath =
				`/api/change-monitoring/analyst/upload-csv-answer/{deltaId}`.replace(
					`{${'deltaId'}}`,
					encodeURIComponent(String(deltaId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				inlineObject17,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * AnalystChangeMonitoringControllerApi - functional programming interface
 * @export
 */
export const AnalystChangeMonitoringControllerApiFp = function (
	configuration?: Configuration
) {
	const localVarAxiosParamCreator =
		AnalystChangeMonitoringControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {number} fileLinkId
		 * @param {FileForDeltaDto} fileForDeltaDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addAlreadyUploadedFileForDelta(
			runId: number,
			assetId: number,
			fileLinkId: number,
			fileForDeltaDto: FileForDeltaDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.addAlreadyUploadedFileForDelta(
					runId,
					assetId,
					fileLinkId,
					fileForDeltaDto,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {FileForDeltaDto} fileForDelta
		 * @param {any} file
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addFileForDelta(
			runId: number,
			assetId: number,
			fileForDelta: FileForDeltaDto,
			file: any,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addFileForDelta(
				runId,
				assetId,
				fileForDelta,
				file,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {FileForDeltaDto} fileForDeltaDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addOldRunFileForDelta(
			runId: number,
			assetId: number,
			fileForDeltaDto: FileForDeltaDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addOldRunFileForDelta(
				runId,
				assetId,
				fileForDeltaDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {number} assetId
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addPath(
			draftId: number,
			assetId: number,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PathMonitoringDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addPath(
				draftId,
				assetId,
				body,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addPathRun(
			runId: number,
			assetId: number,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addPathRun(
				runId,
				assetId,
				body,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addPathsRun(
			runId: number,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addPathsRun(
				runId,
				body,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} assetId
		 * @param {Array<string>} requestBody
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkPath(
			assetId: number,
			requestBody: Array<string>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CheckPathDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.checkPath(
				assetId,
				requestBody,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {CheckPathAssetsDto} checkPathAssetsDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async checkPathForMultipleAssets(
			checkPathAssetsDto: CheckPathAssetsDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CheckPathDto>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.checkPathForMultipleAssets(
					checkPathAssetsDto,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async closeCompletedRun1(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.closeCompletedRun1(
				runId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async closeMonitoring(
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.closeMonitoring(
				monitoringId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async closeRun(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.closeRun(
				runId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {CreateMonitoringDto} createMonitoringDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createDraft(
			createMonitoringDto: CreateMonitoringDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDraftDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createDraft(
				createMonitoringDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteDraft(
			draftId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDraft(
				draftId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		async echo1(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.echo1(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {FocalPointAndDelegatesDto} focalPointAndDelegatesDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async editMonitoringFocalpointAndDelegates(
			monitoringId: number,
			focalPointAndDelegatesDto: FocalPointAndDelegatesDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDto>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.editMonitoringFocalpointAndDelegates(
					monitoringId,
					focalPointAndDelegatesDto,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllApplication(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllApplication(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllDraftNames(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDraftNames(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllFilesAnswers1(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FileLinkDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllFilesAnswers1(
				runId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllMonitoring1(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MonitoringDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMonitoring1(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllMonitoringDraft(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<MonitoringDraftDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMonitoringDraft(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} applicationCodeName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getApplicationInstances(
			applicationCodeName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstanceAssetDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationInstances(
				applicationCodeName,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} instanceId
		 * @param {string} leafs
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getControls(
			instanceId: number,
			leafs: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssociationDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getControls(
				instanceId,
				leafs,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {Array<number>} requestBody
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getCsvAnswer1(
			deltaId: number,
			requestBody: Array<number>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getCsvAnswer1(
				deltaId,
				requestBody,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getDraft(
			draftId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDraftDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getDraft(
				draftId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFileFromCurrentPreviousRun(
			runId: number,
			assetId: number,
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RunFileLinkDto>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getFileFromCurrentPreviousRun(
					runId,
					assetId,
					monitoringId,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} frameworkCode
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFrameworkByCode(
			frameworkCode: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameworkTreeDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFrameworkByCode(
				frameworkCode,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getFrameworkCodes(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getFrameworkCodes(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getMonitoringById(
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getMonitoringById(
				monitoringId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getRunById(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getRunById(
				runId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getScriptByDraft(
			draftId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScriptDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getScriptByDraft(
				draftId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async goNextStep(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.goNextStep(
				runId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {Array<any>} files
		 * @param {Array<DeltaFileDto>} deltaFiles
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {string} [text]
		 * @param {FileLinkDtoList} [fileslinks]
		 * @param {boolean} [ignore]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveAnswerWithFile(
			deltaId: number,
			files: Array<any>,
			deltaFiles: Array<DeltaFileDto>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			text?: string,
			fileslinks?: FileLinkDtoList,
			ignore?: boolean,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeltaDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.saveAnswerWithFile(
				deltaId,
				files,
				deltaFiles,
				acceptLanguage,
				text,
				fileslinks,
				ignore,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {MonitoringDraftDto} monitoringDraftDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveDraft1(
			monitoringDraftDto: MonitoringDraftDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDraftDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.saveDraft1(
				monitoringDraftDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} runId
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveNotes(
			runId: number,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.saveNotes(
				runId,
				body,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {RunDto} runDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveRun(
			runDto: RunDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RunDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.saveRun(
				runDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {Array<string>} requestBody
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async setMonitoringCollaborator(
			monitoringId: number,
			requestBody: Array<string>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MonitoringDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.setMonitoringCollaborator(
				monitoringId,
				requestBody,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {MonitoringDraftDto} monitoringDraftDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async startMonitoring(
			monitoringDraftDto: MonitoringDraftDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.startMonitoring(
				monitoringDraftDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {InlineObject17} inlineObject17
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async uploadCsvAnswer1(
			deltaId: number,
			inlineObject17: InlineObject17,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.uploadCsvAnswer1(
				deltaId,
				inlineObject17,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * AnalystChangeMonitoringControllerApi - factory interface
 * @export
 */
export const AnalystChangeMonitoringControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = AnalystChangeMonitoringControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {number} fileLinkId
		 * @param {FileForDeltaDto} fileForDeltaDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addAlreadyUploadedFileForDelta(
			runId: number,
			assetId: number,
			fileLinkId: number,
			fileForDeltaDto: FileForDeltaDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.addAlreadyUploadedFileForDelta(
					runId,
					assetId,
					fileLinkId,
					fileForDeltaDto,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {FileForDeltaDto} fileForDelta
		 * @param {any} file
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFileForDelta(
			runId: number,
			assetId: number,
			fileForDelta: FileForDeltaDto,
			file: any,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.addFileForDelta(runId, assetId, fileForDelta, file, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {FileForDeltaDto} fileForDeltaDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addOldRunFileForDelta(
			runId: number,
			assetId: number,
			fileForDeltaDto: FileForDeltaDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.addOldRunFileForDelta(runId, assetId, fileForDeltaDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {number} assetId
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addPath(
			draftId: number,
			assetId: number,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<PathMonitoringDto> {
			return localVarFp
				.addPath(draftId, assetId, body, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addPathRun(
			runId: number,
			assetId: number,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.addPathRun(runId, assetId, body, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addPathsRun(
			runId: number,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.addPathsRun(runId, body, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} assetId
		 * @param {Array<string>} requestBody
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkPath(
			assetId: number,
			requestBody: Array<string>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<CheckPathDto>> {
			return localVarFp
				.checkPath(assetId, requestBody, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {CheckPathAssetsDto} checkPathAssetsDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		checkPathForMultipleAssets(
			checkPathAssetsDto: CheckPathAssetsDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<CheckPathDto>> {
			return localVarFp
				.checkPathForMultipleAssets(checkPathAssetsDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		closeCompletedRun1(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<RunDto> {
			return localVarFp
				.closeCompletedRun1(runId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		closeMonitoring(
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDto> {
			return localVarFp
				.closeMonitoring(monitoringId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		closeRun(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<RunDto> {
			return localVarFp
				.closeRun(runId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {CreateMonitoringDto} createMonitoringDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createDraft(
			createMonitoringDto: CreateMonitoringDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDraftDto> {
			return localVarFp
				.createDraft(createMonitoringDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteDraft(
			draftId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.deleteDraft(draftId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		echo1(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.echo1(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {FocalPointAndDelegatesDto} focalPointAndDelegatesDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		editMonitoringFocalpointAndDelegates(
			monitoringId: number,
			focalPointAndDelegatesDto: FocalPointAndDelegatesDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDto> {
			return localVarFp
				.editMonitoringFocalpointAndDelegates(
					monitoringId,
					focalPointAndDelegatesDto,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplication(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ApplicationDto>> {
			return localVarFp
				.getAllApplication(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllDraftNames(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<string>> {
			return localVarFp
				.getAllDraftNames(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllFilesAnswers1(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<FileLinkDto>> {
			return localVarFp
				.getAllFilesAnswers1(runId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllMonitoring1(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<MonitoringDto>> {
			return localVarFp
				.getAllMonitoring1(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllMonitoringDraft(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<MonitoringDraftDto>> {
			return localVarFp
				.getAllMonitoringDraft(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} applicationCodeName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationInstances(
			applicationCodeName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<InstanceAssetDto>> {
			return localVarFp
				.getApplicationInstances(applicationCodeName, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} instanceId
		 * @param {string} leafs
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getControls(
			instanceId: number,
			leafs: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<AssociationDto>> {
			return localVarFp
				.getControls(instanceId, leafs, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {Array<number>} requestBody
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCsvAnswer1(
			deltaId: number,
			requestBody: Array<number>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<object> {
			return localVarFp
				.getCsvAnswer1(deltaId, requestBody, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getDraft(
			draftId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDraftDto> {
			return localVarFp
				.getDraft(draftId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {number} assetId
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFileFromCurrentPreviousRun(
			runId: number,
			assetId: number,
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<RunFileLinkDto>> {
			return localVarFp
				.getFileFromCurrentPreviousRun(
					runId,
					assetId,
					monitoringId,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} frameworkCode
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFrameworkByCode(
			frameworkCode: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<FrameworkTreeDto> {
			return localVarFp
				.getFrameworkByCode(frameworkCode, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getFrameworkCodes(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<string>> {
			return localVarFp
				.getFrameworkCodes(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getMonitoringById(
			monitoringId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDto> {
			return localVarFp
				.getMonitoringById(monitoringId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getRunById(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<RunDto> {
			return localVarFp
				.getRunById(runId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} draftId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getScriptByDraft(
			draftId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ScriptDto>> {
			return localVarFp
				.getScriptByDraft(draftId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		goNextStep(
			runId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.goNextStep(runId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {Array<any>} files
		 * @param {Array<DeltaFileDto>} deltaFiles
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {string} [text]
		 * @param {FileLinkDtoList} [fileslinks]
		 * @param {boolean} [ignore]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveAnswerWithFile(
			deltaId: number,
			files: Array<any>,
			deltaFiles: Array<DeltaFileDto>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			text?: string,
			fileslinks?: FileLinkDtoList,
			ignore?: boolean,
			options?: any
		): AxiosPromise<DeltaDto> {
			return localVarFp
				.saveAnswerWithFile(
					deltaId,
					files,
					deltaFiles,
					acceptLanguage,
					text,
					fileslinks,
					ignore,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {MonitoringDraftDto} monitoringDraftDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveDraft1(
			monitoringDraftDto: MonitoringDraftDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDraftDto> {
			return localVarFp
				.saveDraft1(monitoringDraftDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} runId
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveNotes(
			runId: number,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.saveNotes(runId, body, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {RunDto} runDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveRun(
			runDto: RunDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<RunDto> {
			return localVarFp
				.saveRun(runDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} monitoringId
		 * @param {Array<string>} requestBody
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		setMonitoringCollaborator(
			monitoringId: number,
			requestBody: Array<string>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<MonitoringDto> {
			return localVarFp
				.setMonitoringCollaborator(monitoringId, requestBody, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {MonitoringDraftDto} monitoringDraftDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		startMonitoring(
			monitoringDraftDto: MonitoringDraftDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.startMonitoring(monitoringDraftDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {InlineObject17} inlineObject17
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		uploadCsvAnswer1(
			deltaId: number,
			inlineObject17: InlineObject17,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.uploadCsvAnswer1(deltaId, inlineObject17, acceptLanguage, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for addAlreadyUploadedFileForDelta operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiAddAlreadyUploadedFileForDeltaRequest
 */
export interface AnalystChangeMonitoringControllerApiAddAlreadyUploadedFileForDeltaRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiAddAlreadyUploadedFileForDelta
	 */
	readonly runId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiAddAlreadyUploadedFileForDelta
	 */
	readonly assetId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiAddAlreadyUploadedFileForDelta
	 */
	readonly fileLinkId: number;

	/**
	 *
	 * @type {FileForDeltaDto}
	 * @memberof AnalystChangeMonitoringControllerApiAddAlreadyUploadedFileForDelta
	 */
	readonly fileForDeltaDto: FileForDeltaDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiAddAlreadyUploadedFileForDelta
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for addFileForDelta operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiAddFileForDeltaRequest
 */
export interface AnalystChangeMonitoringControllerApiAddFileForDeltaRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiAddFileForDelta
	 */
	readonly runId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiAddFileForDelta
	 */
	readonly assetId: number;

	/**
	 *
	 * @type {FileForDeltaDto}
	 * @memberof AnalystChangeMonitoringControllerApiAddFileForDelta
	 */
	readonly fileForDelta: FileForDeltaDto;

	/**
	 *
	 * @type {any}
	 * @memberof AnalystChangeMonitoringControllerApiAddFileForDelta
	 */
	readonly file: any;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiAddFileForDelta
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for addOldRunFileForDelta operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiAddOldRunFileForDeltaRequest
 */
export interface AnalystChangeMonitoringControllerApiAddOldRunFileForDeltaRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiAddOldRunFileForDelta
	 */
	readonly runId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiAddOldRunFileForDelta
	 */
	readonly assetId: number;

	/**
	 *
	 * @type {FileForDeltaDto}
	 * @memberof AnalystChangeMonitoringControllerApiAddOldRunFileForDelta
	 */
	readonly fileForDeltaDto: FileForDeltaDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiAddOldRunFileForDelta
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for addPath operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiAddPathRequest
 */
export interface AnalystChangeMonitoringControllerApiAddPathRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiAddPath
	 */
	readonly draftId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiAddPath
	 */
	readonly assetId: number;

	/**
	 *
	 * @type {string}
	 * @memberof AnalystChangeMonitoringControllerApiAddPath
	 */
	readonly body: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiAddPath
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for addPathRun operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiAddPathRunRequest
 */
export interface AnalystChangeMonitoringControllerApiAddPathRunRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiAddPathRun
	 */
	readonly runId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiAddPathRun
	 */
	readonly assetId: number;

	/**
	 *
	 * @type {string}
	 * @memberof AnalystChangeMonitoringControllerApiAddPathRun
	 */
	readonly body: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiAddPathRun
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for addPathsRun operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiAddPathsRunRequest
 */
export interface AnalystChangeMonitoringControllerApiAddPathsRunRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiAddPathsRun
	 */
	readonly runId: number;

	/**
	 *
	 * @type {string}
	 * @memberof AnalystChangeMonitoringControllerApiAddPathsRun
	 */
	readonly body: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiAddPathsRun
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for checkPath operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiCheckPathRequest
 */
export interface AnalystChangeMonitoringControllerApiCheckPathRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiCheckPath
	 */
	readonly assetId: number;

	/**
	 *
	 * @type {Array<string>}
	 * @memberof AnalystChangeMonitoringControllerApiCheckPath
	 */
	readonly requestBody: Array<string>;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiCheckPath
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for checkPathForMultipleAssets operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiCheckPathForMultipleAssetsRequest
 */
export interface AnalystChangeMonitoringControllerApiCheckPathForMultipleAssetsRequest {
	/**
	 *
	 * @type {CheckPathAssetsDto}
	 * @memberof AnalystChangeMonitoringControllerApiCheckPathForMultipleAssets
	 */
	readonly checkPathAssetsDto: CheckPathAssetsDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiCheckPathForMultipleAssets
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for closeCompletedRun1 operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiCloseCompletedRun1Request
 */
export interface AnalystChangeMonitoringControllerApiCloseCompletedRun1Request {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiCloseCompletedRun1
	 */
	readonly runId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiCloseCompletedRun1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for closeMonitoring operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiCloseMonitoringRequest
 */
export interface AnalystChangeMonitoringControllerApiCloseMonitoringRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiCloseMonitoring
	 */
	readonly monitoringId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiCloseMonitoring
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for closeRun operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiCloseRunRequest
 */
export interface AnalystChangeMonitoringControllerApiCloseRunRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiCloseRun
	 */
	readonly runId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiCloseRun
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for createDraft operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiCreateDraftRequest
 */
export interface AnalystChangeMonitoringControllerApiCreateDraftRequest {
	/**
	 *
	 * @type {CreateMonitoringDto}
	 * @memberof AnalystChangeMonitoringControllerApiCreateDraft
	 */
	readonly createMonitoringDto: CreateMonitoringDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiCreateDraft
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for deleteDraft operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiDeleteDraftRequest
 */
export interface AnalystChangeMonitoringControllerApiDeleteDraftRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiDeleteDraft
	 */
	readonly draftId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiDeleteDraft
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for echo1 operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiEcho1Request
 */
export interface AnalystChangeMonitoringControllerApiEcho1Request {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiEcho1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for editMonitoringFocalpointAndDelegates operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegatesRequest
 */
export interface AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegatesRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegates
	 */
	readonly monitoringId: number;

	/**
	 *
	 * @type {FocalPointAndDelegatesDto}
	 * @memberof AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegates
	 */
	readonly focalPointAndDelegatesDto: FocalPointAndDelegatesDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegates
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllApplication operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetAllApplicationRequest
 */
export interface AnalystChangeMonitoringControllerApiGetAllApplicationRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetAllApplication
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllDraftNames operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetAllDraftNamesRequest
 */
export interface AnalystChangeMonitoringControllerApiGetAllDraftNamesRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetAllDraftNames
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllFilesAnswers1 operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetAllFilesAnswers1Request
 */
export interface AnalystChangeMonitoringControllerApiGetAllFilesAnswers1Request {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetAllFilesAnswers1
	 */
	readonly runId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetAllFilesAnswers1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllMonitoring1 operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetAllMonitoring1Request
 */
export interface AnalystChangeMonitoringControllerApiGetAllMonitoring1Request {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetAllMonitoring1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllMonitoringDraft operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetAllMonitoringDraftRequest
 */
export interface AnalystChangeMonitoringControllerApiGetAllMonitoringDraftRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetAllMonitoringDraft
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getApplicationInstances operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetApplicationInstancesRequest
 */
export interface AnalystChangeMonitoringControllerApiGetApplicationInstancesRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystChangeMonitoringControllerApiGetApplicationInstances
	 */
	readonly applicationCodeName: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetApplicationInstances
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getControls operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetControlsRequest
 */
export interface AnalystChangeMonitoringControllerApiGetControlsRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetControls
	 */
	readonly instanceId: number;

	/**
	 *
	 * @type {string}
	 * @memberof AnalystChangeMonitoringControllerApiGetControls
	 */
	readonly leafs: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetControls
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getCsvAnswer1 operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetCsvAnswer1Request
 */
export interface AnalystChangeMonitoringControllerApiGetCsvAnswer1Request {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetCsvAnswer1
	 */
	readonly deltaId: number;

	/**
	 *
	 * @type {Array<number>}
	 * @memberof AnalystChangeMonitoringControllerApiGetCsvAnswer1
	 */
	readonly requestBody: Array<number>;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetCsvAnswer1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getDraft operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetDraftRequest
 */
export interface AnalystChangeMonitoringControllerApiGetDraftRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetDraft
	 */
	readonly draftId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetDraft
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getFileFromCurrentPreviousRun operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetFileFromCurrentPreviousRunRequest
 */
export interface AnalystChangeMonitoringControllerApiGetFileFromCurrentPreviousRunRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetFileFromCurrentPreviousRun
	 */
	readonly runId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetFileFromCurrentPreviousRun
	 */
	readonly assetId: number;

	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetFileFromCurrentPreviousRun
	 */
	readonly monitoringId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetFileFromCurrentPreviousRun
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getFrameworkByCode operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetFrameworkByCodeRequest
 */
export interface AnalystChangeMonitoringControllerApiGetFrameworkByCodeRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystChangeMonitoringControllerApiGetFrameworkByCode
	 */
	readonly frameworkCode: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetFrameworkByCode
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getFrameworkCodes operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetFrameworkCodesRequest
 */
export interface AnalystChangeMonitoringControllerApiGetFrameworkCodesRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetFrameworkCodes
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getMonitoringById operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetMonitoringByIdRequest
 */
export interface AnalystChangeMonitoringControllerApiGetMonitoringByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetMonitoringById
	 */
	readonly monitoringId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetMonitoringById
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getRunById operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetRunByIdRequest
 */
export interface AnalystChangeMonitoringControllerApiGetRunByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetRunById
	 */
	readonly runId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetRunById
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getScriptByDraft operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGetScriptByDraftRequest
 */
export interface AnalystChangeMonitoringControllerApiGetScriptByDraftRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGetScriptByDraft
	 */
	readonly draftId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGetScriptByDraft
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for goNextStep operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiGoNextStepRequest
 */
export interface AnalystChangeMonitoringControllerApiGoNextStepRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiGoNextStep
	 */
	readonly runId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiGoNextStep
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for saveAnswerWithFile operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiSaveAnswerWithFileRequest
 */
export interface AnalystChangeMonitoringControllerApiSaveAnswerWithFileRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiSaveAnswerWithFile
	 */
	readonly deltaId: number;

	/**
	 *
	 * @type {Array<any>}
	 * @memberof AnalystChangeMonitoringControllerApiSaveAnswerWithFile
	 */
	readonly files: Array<any>;

	/**
	 *
	 * @type {Array<DeltaFileDto>}
	 * @memberof AnalystChangeMonitoringControllerApiSaveAnswerWithFile
	 */
	readonly deltaFiles: Array<DeltaFileDto>;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiSaveAnswerWithFile
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';

	/**
	 *
	 * @type {string}
	 * @memberof AnalystChangeMonitoringControllerApiSaveAnswerWithFile
	 */
	readonly text?: string;

	/**
	 *
	 * @type {FileLinkDtoList}
	 * @memberof AnalystChangeMonitoringControllerApiSaveAnswerWithFile
	 */
	readonly fileslinks?: FileLinkDtoList;

	/**
	 *
	 * @type {boolean}
	 * @memberof AnalystChangeMonitoringControllerApiSaveAnswerWithFile
	 */
	readonly ignore?: boolean;
}

/**
 * Request parameters for saveDraft1 operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiSaveDraft1Request
 */
export interface AnalystChangeMonitoringControllerApiSaveDraft1Request {
	/**
	 *
	 * @type {MonitoringDraftDto}
	 * @memberof AnalystChangeMonitoringControllerApiSaveDraft1
	 */
	readonly monitoringDraftDto: MonitoringDraftDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiSaveDraft1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for saveNotes operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiSaveNotesRequest
 */
export interface AnalystChangeMonitoringControllerApiSaveNotesRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiSaveNotes
	 */
	readonly runId: number;

	/**
	 *
	 * @type {string}
	 * @memberof AnalystChangeMonitoringControllerApiSaveNotes
	 */
	readonly body: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiSaveNotes
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for saveRun operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiSaveRunRequest
 */
export interface AnalystChangeMonitoringControllerApiSaveRunRequest {
	/**
	 *
	 * @type {RunDto}
	 * @memberof AnalystChangeMonitoringControllerApiSaveRun
	 */
	readonly runDto: RunDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiSaveRun
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for setMonitoringCollaborator operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiSetMonitoringCollaboratorRequest
 */
export interface AnalystChangeMonitoringControllerApiSetMonitoringCollaboratorRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiSetMonitoringCollaborator
	 */
	readonly monitoringId: number;

	/**
	 *
	 * @type {Array<string>}
	 * @memberof AnalystChangeMonitoringControllerApiSetMonitoringCollaborator
	 */
	readonly requestBody: Array<string>;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiSetMonitoringCollaborator
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for startMonitoring operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiStartMonitoringRequest
 */
export interface AnalystChangeMonitoringControllerApiStartMonitoringRequest {
	/**
	 *
	 * @type {MonitoringDraftDto}
	 * @memberof AnalystChangeMonitoringControllerApiStartMonitoring
	 */
	readonly monitoringDraftDto: MonitoringDraftDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiStartMonitoring
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for uploadCsvAnswer1 operation in AnalystChangeMonitoringControllerApi.
 * @export
 * @interface AnalystChangeMonitoringControllerApiUploadCsvAnswer1Request
 */
export interface AnalystChangeMonitoringControllerApiUploadCsvAnswer1Request {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystChangeMonitoringControllerApiUploadCsvAnswer1
	 */
	readonly deltaId: number;

	/**
	 *
	 * @type {InlineObject17}
	 * @memberof AnalystChangeMonitoringControllerApiUploadCsvAnswer1
	 */
	readonly inlineObject17: InlineObject17;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystChangeMonitoringControllerApiUploadCsvAnswer1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * AnalystChangeMonitoringControllerApi - object-oriented interface
 * @export
 * @class AnalystChangeMonitoringControllerApi
 * @extends {BaseAPI}
 */
export class AnalystChangeMonitoringControllerApi extends BaseAPI {
	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiAddAlreadyUploadedFileForDeltaRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public addAlreadyUploadedFileForDelta(
		requestParameters: AnalystChangeMonitoringControllerApiAddAlreadyUploadedFileForDeltaRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.addAlreadyUploadedFileForDelta(
				requestParameters.runId,
				requestParameters.assetId,
				requestParameters.fileLinkId,
				requestParameters.fileForDeltaDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiAddFileForDeltaRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public addFileForDelta(
		requestParameters: AnalystChangeMonitoringControllerApiAddFileForDeltaRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.addFileForDelta(
				requestParameters.runId,
				requestParameters.assetId,
				requestParameters.fileForDelta,
				requestParameters.file,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiAddOldRunFileForDeltaRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public addOldRunFileForDelta(
		requestParameters: AnalystChangeMonitoringControllerApiAddOldRunFileForDeltaRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.addOldRunFileForDelta(
				requestParameters.runId,
				requestParameters.assetId,
				requestParameters.fileForDeltaDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiAddPathRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public addPath(
		requestParameters: AnalystChangeMonitoringControllerApiAddPathRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.addPath(
				requestParameters.draftId,
				requestParameters.assetId,
				requestParameters.body,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiAddPathRunRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public addPathRun(
		requestParameters: AnalystChangeMonitoringControllerApiAddPathRunRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.addPathRun(
				requestParameters.runId,
				requestParameters.assetId,
				requestParameters.body,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiAddPathsRunRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public addPathsRun(
		requestParameters: AnalystChangeMonitoringControllerApiAddPathsRunRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.addPathsRun(
				requestParameters.runId,
				requestParameters.body,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiCheckPathRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public checkPath(
		requestParameters: AnalystChangeMonitoringControllerApiCheckPathRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.checkPath(
				requestParameters.assetId,
				requestParameters.requestBody,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiCheckPathForMultipleAssetsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public checkPathForMultipleAssets(
		requestParameters: AnalystChangeMonitoringControllerApiCheckPathForMultipleAssetsRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.checkPathForMultipleAssets(
				requestParameters.checkPathAssetsDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiCloseCompletedRun1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public closeCompletedRun1(
		requestParameters: AnalystChangeMonitoringControllerApiCloseCompletedRun1Request,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.closeCompletedRun1(
				requestParameters.runId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiCloseMonitoringRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public closeMonitoring(
		requestParameters: AnalystChangeMonitoringControllerApiCloseMonitoringRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.closeMonitoring(
				requestParameters.monitoringId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiCloseRunRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public closeRun(
		requestParameters: AnalystChangeMonitoringControllerApiCloseRunRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.closeRun(requestParameters.runId, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiCreateDraftRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public createDraft(
		requestParameters: AnalystChangeMonitoringControllerApiCreateDraftRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.createDraft(
				requestParameters.createMonitoringDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiDeleteDraftRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public deleteDraft(
		requestParameters: AnalystChangeMonitoringControllerApiDeleteDraftRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.deleteDraft(requestParameters.draftId, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiEcho1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @deprecated
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public echo1(
		requestParameters: AnalystChangeMonitoringControllerApiEcho1Request = {},
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.echo1(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegatesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public editMonitoringFocalpointAndDelegates(
		requestParameters: AnalystChangeMonitoringControllerApiEditMonitoringFocalpointAndDelegatesRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.editMonitoringFocalpointAndDelegates(
				requestParameters.monitoringId,
				requestParameters.focalPointAndDelegatesDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetAllApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getAllApplication(
		requestParameters: AnalystChangeMonitoringControllerApiGetAllApplicationRequest = {},
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getAllApplication(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetAllDraftNamesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getAllDraftNames(
		requestParameters: AnalystChangeMonitoringControllerApiGetAllDraftNamesRequest = {},
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getAllDraftNames(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetAllFilesAnswers1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getAllFilesAnswers1(
		requestParameters: AnalystChangeMonitoringControllerApiGetAllFilesAnswers1Request,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getAllFilesAnswers1(
				requestParameters.runId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetAllMonitoring1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getAllMonitoring1(
		requestParameters: AnalystChangeMonitoringControllerApiGetAllMonitoring1Request = {},
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getAllMonitoring1(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetAllMonitoringDraftRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getAllMonitoringDraft(
		requestParameters: AnalystChangeMonitoringControllerApiGetAllMonitoringDraftRequest = {},
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getAllMonitoringDraft(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetApplicationInstancesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getApplicationInstances(
		requestParameters: AnalystChangeMonitoringControllerApiGetApplicationInstancesRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getApplicationInstances(
				requestParameters.applicationCodeName,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetControlsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getControls(
		requestParameters: AnalystChangeMonitoringControllerApiGetControlsRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getControls(
				requestParameters.instanceId,
				requestParameters.leafs,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetCsvAnswer1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getCsvAnswer1(
		requestParameters: AnalystChangeMonitoringControllerApiGetCsvAnswer1Request,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getCsvAnswer1(
				requestParameters.deltaId,
				requestParameters.requestBody,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetDraftRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getDraft(
		requestParameters: AnalystChangeMonitoringControllerApiGetDraftRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getDraft(requestParameters.draftId, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetFileFromCurrentPreviousRunRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getFileFromCurrentPreviousRun(
		requestParameters: AnalystChangeMonitoringControllerApiGetFileFromCurrentPreviousRunRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getFileFromCurrentPreviousRun(
				requestParameters.runId,
				requestParameters.assetId,
				requestParameters.monitoringId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetFrameworkByCodeRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getFrameworkByCode(
		requestParameters: AnalystChangeMonitoringControllerApiGetFrameworkByCodeRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getFrameworkByCode(
				requestParameters.frameworkCode,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetFrameworkCodesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getFrameworkCodes(
		requestParameters: AnalystChangeMonitoringControllerApiGetFrameworkCodesRequest = {},
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getFrameworkCodes(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetMonitoringByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getMonitoringById(
		requestParameters: AnalystChangeMonitoringControllerApiGetMonitoringByIdRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getMonitoringById(
				requestParameters.monitoringId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetRunByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getRunById(
		requestParameters: AnalystChangeMonitoringControllerApiGetRunByIdRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getRunById(requestParameters.runId, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGetScriptByDraftRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public getScriptByDraft(
		requestParameters: AnalystChangeMonitoringControllerApiGetScriptByDraftRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.getScriptByDraft(
				requestParameters.draftId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiGoNextStepRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public goNextStep(
		requestParameters: AnalystChangeMonitoringControllerApiGoNextStepRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.goNextStep(requestParameters.runId, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiSaveAnswerWithFileRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public saveAnswerWithFile(
		requestParameters: AnalystChangeMonitoringControllerApiSaveAnswerWithFileRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.saveAnswerWithFile(
				requestParameters.deltaId,
				requestParameters.files,
				requestParameters.deltaFiles,
				requestParameters.acceptLanguage,
				requestParameters.text,
				requestParameters.fileslinks,
				requestParameters.ignore,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiSaveDraft1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public saveDraft1(
		requestParameters: AnalystChangeMonitoringControllerApiSaveDraft1Request,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.saveDraft1(
				requestParameters.monitoringDraftDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiSaveNotesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public saveNotes(
		requestParameters: AnalystChangeMonitoringControllerApiSaveNotesRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.saveNotes(
				requestParameters.runId,
				requestParameters.body,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiSaveRunRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public saveRun(
		requestParameters: AnalystChangeMonitoringControllerApiSaveRunRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.saveRun(requestParameters.runDto, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiSetMonitoringCollaboratorRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public setMonitoringCollaborator(
		requestParameters: AnalystChangeMonitoringControllerApiSetMonitoringCollaboratorRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.setMonitoringCollaborator(
				requestParameters.monitoringId,
				requestParameters.requestBody,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiStartMonitoringRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public startMonitoring(
		requestParameters: AnalystChangeMonitoringControllerApiStartMonitoringRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.startMonitoring(
				requestParameters.monitoringDraftDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystChangeMonitoringControllerApiUploadCsvAnswer1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystChangeMonitoringControllerApi
	 */
	public uploadCsvAnswer1(
		requestParameters: AnalystChangeMonitoringControllerApiUploadCsvAnswer1Request,
		options?: AxiosRequestConfig
	) {
		return AnalystChangeMonitoringControllerApiFp(this.configuration)
			.uploadCsvAnswer1(
				requestParameters.deltaId,
				requestParameters.inlineObject17,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}
}

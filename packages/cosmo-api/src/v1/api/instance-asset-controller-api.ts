/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { AssetDto } from '../models';
/**
 * InstanceAssetControllerApi - axios parameter creator
 * @export
 */
export const InstanceAssetControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {AssetDto} assetDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createAsset: async (
			appId: number,
			instanceId: number,
			assetDto: AssetDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('createAsset', 'appId', appId);
			// verify required parameter 'instanceId' is not null or undefined
			assertParamExists('createAsset', 'instanceId', instanceId);
			// verify required parameter 'assetDto' is not null or undefined
			assertParamExists('createAsset', 'assetDto', assetDto);
			const localVarPath = `/api/applications/{appId}/instance/{instanceId}/asset`
				.replace(`{${'appId'}}`, encodeURIComponent(String(appId)))
				.replace(`{${'instanceId'}}`, encodeURIComponent(String(instanceId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				assetDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {number} assetId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createAssetRelationship: async (
			appId: number,
			instanceId: number,
			assetId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('createAssetRelationship', 'appId', appId);
			// verify required parameter 'instanceId' is not null or undefined
			assertParamExists('createAssetRelationship', 'instanceId', instanceId);
			// verify required parameter 'assetId' is not null or undefined
			assertParamExists('createAssetRelationship', 'assetId', assetId);
			const localVarPath =
				`/api/applications/{appId}/instance/{instanceId}/asset/{assetId}`
					.replace(`{${'appId'}}`, encodeURIComponent(String(appId)))
					.replace(`{${'instanceId'}}`, encodeURIComponent(String(instanceId)))
					.replace(`{${'assetId'}}`, encodeURIComponent(String(assetId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {number} assetId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteAssetRelationship: async (
			appId: number,
			instanceId: number,
			assetId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('deleteAssetRelationship', 'appId', appId);
			// verify required parameter 'instanceId' is not null or undefined
			assertParamExists('deleteAssetRelationship', 'instanceId', instanceId);
			// verify required parameter 'assetId' is not null or undefined
			assertParamExists('deleteAssetRelationship', 'assetId', assetId);
			const localVarPath =
				`/api/applications/{appId}/instance/{instanceId}/asset/{assetId}`
					.replace(`{${'appId'}}`, encodeURIComponent(String(appId)))
					.replace(`{${'instanceId'}}`, encodeURIComponent(String(instanceId)))
					.replace(`{${'assetId'}}`, encodeURIComponent(String(assetId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {number} assetId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAsset: async (
			appId: number,
			instanceId: number,
			assetId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('getAsset', 'appId', appId);
			// verify required parameter 'instanceId' is not null or undefined
			assertParamExists('getAsset', 'instanceId', instanceId);
			// verify required parameter 'assetId' is not null or undefined
			assertParamExists('getAsset', 'assetId', assetId);
			const localVarPath =
				`/api/applications/{appId}/instance/{instanceId}/asset/{assetId}`
					.replace(`{${'appId'}}`, encodeURIComponent(String(appId)))
					.replace(`{${'instanceId'}}`, encodeURIComponent(String(instanceId)))
					.replace(`{${'assetId'}}`, encodeURIComponent(String(assetId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAssetList: async (
			appId: number,
			instanceId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('getAssetList', 'appId', appId);
			// verify required parameter 'instanceId' is not null or undefined
			assertParamExists('getAssetList', 'instanceId', instanceId);
			const localVarPath = `/api/applications/{appId}/instance/{instanceId}/asset`
				.replace(`{${'appId'}}`, encodeURIComponent(String(appId)))
				.replace(`{${'instanceId'}}`, encodeURIComponent(String(instanceId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * InstanceAssetControllerApi - functional programming interface
 * @export
 */
export const InstanceAssetControllerApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		InstanceAssetControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {AssetDto} assetDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createAsset(
			appId: number,
			instanceId: number,
			assetDto: AssetDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createAsset(
				appId,
				instanceId,
				assetDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {number} assetId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createAssetRelationship(
			appId: number,
			instanceId: number,
			assetId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createAssetRelationship(
				appId,
				instanceId,
				assetId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {number} assetId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteAssetRelationship(
			appId: number,
			instanceId: number,
			assetId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAssetRelationship(
				appId,
				instanceId,
				assetId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {number} assetId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAsset(
			appId: number,
			instanceId: number,
			assetId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAsset(
				appId,
				instanceId,
				assetId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAssetList(
			appId: number,
			instanceId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AssetDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAssetList(
				appId,
				instanceId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * InstanceAssetControllerApi - factory interface
 * @export
 */
export const InstanceAssetControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = InstanceAssetControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {AssetDto} assetDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createAsset(
			appId: number,
			instanceId: number,
			assetDto: AssetDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<AssetDto> {
			return localVarFp
				.createAsset(appId, instanceId, assetDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {number} assetId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createAssetRelationship(
			appId: number,
			instanceId: number,
			assetId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<AssetDto> {
			return localVarFp
				.createAssetRelationship(appId, instanceId, assetId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {number} assetId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteAssetRelationship(
			appId: number,
			instanceId: number,
			assetId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.deleteAssetRelationship(appId, instanceId, assetId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {number} assetId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAsset(
			appId: number,
			instanceId: number,
			assetId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<AssetDto> {
			return localVarFp
				.getAsset(appId, instanceId, assetId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} instanceId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAssetList(
			appId: number,
			instanceId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<AssetDto>> {
			return localVarFp
				.getAssetList(appId, instanceId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for createAsset operation in InstanceAssetControllerApi.
 * @export
 * @interface InstanceAssetControllerApiCreateAssetRequest
 */
export interface InstanceAssetControllerApiCreateAssetRequest {
	/**
	 *
	 * @type {number}
	 * @memberof InstanceAssetControllerApiCreateAsset
	 */
	readonly appId: number;

	/**
	 *
	 * @type {number}
	 * @memberof InstanceAssetControllerApiCreateAsset
	 */
	readonly instanceId: number;

	/**
	 *
	 * @type {AssetDto}
	 * @memberof InstanceAssetControllerApiCreateAsset
	 */
	readonly assetDto: AssetDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof InstanceAssetControllerApiCreateAsset
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for createAssetRelationship operation in InstanceAssetControllerApi.
 * @export
 * @interface InstanceAssetControllerApiCreateAssetRelationshipRequest
 */
export interface InstanceAssetControllerApiCreateAssetRelationshipRequest {
	/**
	 *
	 * @type {number}
	 * @memberof InstanceAssetControllerApiCreateAssetRelationship
	 */
	readonly appId: number;

	/**
	 *
	 * @type {number}
	 * @memberof InstanceAssetControllerApiCreateAssetRelationship
	 */
	readonly instanceId: number;

	/**
	 *
	 * @type {number}
	 * @memberof InstanceAssetControllerApiCreateAssetRelationship
	 */
	readonly assetId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof InstanceAssetControllerApiCreateAssetRelationship
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for deleteAssetRelationship operation in InstanceAssetControllerApi.
 * @export
 * @interface InstanceAssetControllerApiDeleteAssetRelationshipRequest
 */
export interface InstanceAssetControllerApiDeleteAssetRelationshipRequest {
	/**
	 *
	 * @type {number}
	 * @memberof InstanceAssetControllerApiDeleteAssetRelationship
	 */
	readonly appId: number;

	/**
	 *
	 * @type {number}
	 * @memberof InstanceAssetControllerApiDeleteAssetRelationship
	 */
	readonly instanceId: number;

	/**
	 *
	 * @type {number}
	 * @memberof InstanceAssetControllerApiDeleteAssetRelationship
	 */
	readonly assetId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof InstanceAssetControllerApiDeleteAssetRelationship
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAsset operation in InstanceAssetControllerApi.
 * @export
 * @interface InstanceAssetControllerApiGetAssetRequest
 */
export interface InstanceAssetControllerApiGetAssetRequest {
	/**
	 *
	 * @type {number}
	 * @memberof InstanceAssetControllerApiGetAsset
	 */
	readonly appId: number;

	/**
	 *
	 * @type {number}
	 * @memberof InstanceAssetControllerApiGetAsset
	 */
	readonly instanceId: number;

	/**
	 *
	 * @type {number}
	 * @memberof InstanceAssetControllerApiGetAsset
	 */
	readonly assetId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof InstanceAssetControllerApiGetAsset
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAssetList operation in InstanceAssetControllerApi.
 * @export
 * @interface InstanceAssetControllerApiGetAssetListRequest
 */
export interface InstanceAssetControllerApiGetAssetListRequest {
	/**
	 *
	 * @type {number}
	 * @memberof InstanceAssetControllerApiGetAssetList
	 */
	readonly appId: number;

	/**
	 *
	 * @type {number}
	 * @memberof InstanceAssetControllerApiGetAssetList
	 */
	readonly instanceId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof InstanceAssetControllerApiGetAssetList
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * InstanceAssetControllerApi - object-oriented interface
 * @export
 * @class InstanceAssetControllerApi
 * @extends {BaseAPI}
 */
export class InstanceAssetControllerApi extends BaseAPI {
	/**
	 *
	 * @param {InstanceAssetControllerApiCreateAssetRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InstanceAssetControllerApi
	 */
	public createAsset(
		requestParameters: InstanceAssetControllerApiCreateAssetRequest,
		options?: AxiosRequestConfig
	) {
		return InstanceAssetControllerApiFp(this.configuration)
			.createAsset(
				requestParameters.appId,
				requestParameters.instanceId,
				requestParameters.assetDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {InstanceAssetControllerApiCreateAssetRelationshipRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InstanceAssetControllerApi
	 */
	public createAssetRelationship(
		requestParameters: InstanceAssetControllerApiCreateAssetRelationshipRequest,
		options?: AxiosRequestConfig
	) {
		return InstanceAssetControllerApiFp(this.configuration)
			.createAssetRelationship(
				requestParameters.appId,
				requestParameters.instanceId,
				requestParameters.assetId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {InstanceAssetControllerApiDeleteAssetRelationshipRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InstanceAssetControllerApi
	 */
	public deleteAssetRelationship(
		requestParameters: InstanceAssetControllerApiDeleteAssetRelationshipRequest,
		options?: AxiosRequestConfig
	) {
		return InstanceAssetControllerApiFp(this.configuration)
			.deleteAssetRelationship(
				requestParameters.appId,
				requestParameters.instanceId,
				requestParameters.assetId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {InstanceAssetControllerApiGetAssetRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InstanceAssetControllerApi
	 */
	public getAsset(
		requestParameters: InstanceAssetControllerApiGetAssetRequest,
		options?: AxiosRequestConfig
	) {
		return InstanceAssetControllerApiFp(this.configuration)
			.getAsset(
				requestParameters.appId,
				requestParameters.instanceId,
				requestParameters.assetId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {InstanceAssetControllerApiGetAssetListRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof InstanceAssetControllerApi
	 */
	public getAssetList(
		requestParameters: InstanceAssetControllerApiGetAssetListRequest,
		options?: AxiosRequestConfig
	) {
		return InstanceAssetControllerApiFp(this.configuration)
			.getAssetList(
				requestParameters.appId,
				requestParameters.instanceId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}
}

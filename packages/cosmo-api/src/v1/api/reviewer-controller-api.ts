/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { ApplicationDto } from '../models';
// @ts-ignore
import { ProcedureAppInstanceDto } from '../models';
// @ts-ignore
import { ReviewApplicationDto } from '../models';
// @ts-ignore
import { ReviewProcedureDto } from '../models';
/**
 * ReviewerControllerApi - axios parameter creator
 * @export
 */
export const ReviewerControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplicationWhereAProcedureIsDelegatedOrOwner: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/reviewer/applicationsInReview`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationsForReview: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/reviewer/onlyApplicationInReview`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} applicationId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getProcedureForReview: async (
			applicationId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationId' is not null or undefined
			assertParamExists('getProcedureForReview', 'applicationId', applicationId);
			const localVarPath = `/api/reviewer/application/{applicationId}`.replace(
				`{${'applicationId'}}`,
				encodeURIComponent(String(applicationId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} applicationId
		 * @param {ReviewApplicationDto} reviewApplicationDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		reviewApplication: async (
			applicationId: number,
			reviewApplicationDto: ReviewApplicationDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationId' is not null or undefined
			assertParamExists('reviewApplication', 'applicationId', applicationId);
			// verify required parameter 'reviewApplicationDto' is not null or undefined
			assertParamExists(
				'reviewApplication',
				'reviewApplicationDto',
				reviewApplicationDto
			);
			const localVarPath = `/api/reviewer/application/{applicationId}`.replace(
				`{${'applicationId'}}`,
				encodeURIComponent(String(applicationId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				reviewApplicationDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} applicationId
		 * @param {number} procedureId
		 * @param {number} procedureAppInstanceId
		 * @param {ReviewProcedureDto} reviewProcedureDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		reviewProcedure: async (
			applicationId: number,
			procedureId: number,
			procedureAppInstanceId: number,
			reviewProcedureDto: ReviewProcedureDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationId' is not null or undefined
			assertParamExists('reviewProcedure', 'applicationId', applicationId);
			// verify required parameter 'procedureId' is not null or undefined
			assertParamExists('reviewProcedure', 'procedureId', procedureId);
			// verify required parameter 'procedureAppInstanceId' is not null or undefined
			assertParamExists(
				'reviewProcedure',
				'procedureAppInstanceId',
				procedureAppInstanceId
			);
			// verify required parameter 'reviewProcedureDto' is not null or undefined
			assertParamExists('reviewProcedure', 'reviewProcedureDto', reviewProcedureDto);
			const localVarPath =
				`/api/reviewer/application/{applicationId}/procedure/{procedureId}/{procedureAppInstanceId}`
					.replace(`{${'applicationId'}}`, encodeURIComponent(String(applicationId)))
					.replace(`{${'procedureId'}}`, encodeURIComponent(String(procedureId)))
					.replace(
						`{${'procedureAppInstanceId'}}`,
						encodeURIComponent(String(procedureAppInstanceId))
					);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				reviewProcedureDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * ReviewerControllerApi - functional programming interface
 * @export
 */
export const ReviewerControllerApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ReviewerControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllApplicationWhereAProcedureIsDelegatedOrOwner(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationDto>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getAllApplicationWhereAProcedureIsDelegatedOrOwner(
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getApplicationsForReview(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationsForReview(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} applicationId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getProcedureForReview(
			applicationId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<ProcedureAppInstanceDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getProcedureForReview(
				applicationId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} applicationId
		 * @param {ReviewApplicationDto} reviewApplicationDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async reviewApplication(
			applicationId: number,
			reviewApplicationDto: ReviewApplicationDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.reviewApplication(
				applicationId,
				reviewApplicationDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} applicationId
		 * @param {number} procedureId
		 * @param {number} procedureAppInstanceId
		 * @param {ReviewProcedureDto} reviewProcedureDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async reviewProcedure(
			applicationId: number,
			procedureId: number,
			procedureAppInstanceId: number,
			reviewProcedureDto: ReviewProcedureDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcedureAppInstanceDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.reviewProcedure(
				applicationId,
				procedureId,
				procedureAppInstanceId,
				reviewProcedureDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * ReviewerControllerApi - factory interface
 * @export
 */
export const ReviewerControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = ReviewerControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplicationWhereAProcedureIsDelegatedOrOwner(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ApplicationDto>> {
			return localVarFp
				.getAllApplicationWhereAProcedureIsDelegatedOrOwner(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationsForReview(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ApplicationDto>> {
			return localVarFp
				.getApplicationsForReview(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} applicationId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getProcedureForReview(
			applicationId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ProcedureAppInstanceDto>> {
			return localVarFp
				.getProcedureForReview(applicationId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} applicationId
		 * @param {ReviewApplicationDto} reviewApplicationDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		reviewApplication(
			applicationId: number,
			reviewApplicationDto: ReviewApplicationDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ApplicationDto> {
			return localVarFp
				.reviewApplication(applicationId, reviewApplicationDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} applicationId
		 * @param {number} procedureId
		 * @param {number} procedureAppInstanceId
		 * @param {ReviewProcedureDto} reviewProcedureDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		reviewProcedure(
			applicationId: number,
			procedureId: number,
			procedureAppInstanceId: number,
			reviewProcedureDto: ReviewProcedureDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ProcedureAppInstanceDto> {
			return localVarFp
				.reviewProcedure(
					applicationId,
					procedureId,
					procedureAppInstanceId,
					reviewProcedureDto,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for getAllApplicationWhereAProcedureIsDelegatedOrOwner operation in ReviewerControllerApi.
 * @export
 * @interface ReviewerControllerApiGetAllApplicationWhereAProcedureIsDelegatedOrOwnerRequest
 */
export interface ReviewerControllerApiGetAllApplicationWhereAProcedureIsDelegatedOrOwnerRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ReviewerControllerApiGetAllApplicationWhereAProcedureIsDelegatedOrOwner
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getApplicationsForReview operation in ReviewerControllerApi.
 * @export
 * @interface ReviewerControllerApiGetApplicationsForReviewRequest
 */
export interface ReviewerControllerApiGetApplicationsForReviewRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ReviewerControllerApiGetApplicationsForReview
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getProcedureForReview operation in ReviewerControllerApi.
 * @export
 * @interface ReviewerControllerApiGetProcedureForReviewRequest
 */
export interface ReviewerControllerApiGetProcedureForReviewRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ReviewerControllerApiGetProcedureForReview
	 */
	readonly applicationId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ReviewerControllerApiGetProcedureForReview
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for reviewApplication operation in ReviewerControllerApi.
 * @export
 * @interface ReviewerControllerApiReviewApplicationRequest
 */
export interface ReviewerControllerApiReviewApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ReviewerControllerApiReviewApplication
	 */
	readonly applicationId: number;

	/**
	 *
	 * @type {ReviewApplicationDto}
	 * @memberof ReviewerControllerApiReviewApplication
	 */
	readonly reviewApplicationDto: ReviewApplicationDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ReviewerControllerApiReviewApplication
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for reviewProcedure operation in ReviewerControllerApi.
 * @export
 * @interface ReviewerControllerApiReviewProcedureRequest
 */
export interface ReviewerControllerApiReviewProcedureRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ReviewerControllerApiReviewProcedure
	 */
	readonly applicationId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ReviewerControllerApiReviewProcedure
	 */
	readonly procedureId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ReviewerControllerApiReviewProcedure
	 */
	readonly procedureAppInstanceId: number;

	/**
	 *
	 * @type {ReviewProcedureDto}
	 * @memberof ReviewerControllerApiReviewProcedure
	 */
	readonly reviewProcedureDto: ReviewProcedureDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ReviewerControllerApiReviewProcedure
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * ReviewerControllerApi - object-oriented interface
 * @export
 * @class ReviewerControllerApi
 * @extends {BaseAPI}
 */
export class ReviewerControllerApi extends BaseAPI {
	/**
	 *
	 * @param {ReviewerControllerApiGetAllApplicationWhereAProcedureIsDelegatedOrOwnerRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ReviewerControllerApi
	 */
	public getAllApplicationWhereAProcedureIsDelegatedOrOwner(
		requestParameters: ReviewerControllerApiGetAllApplicationWhereAProcedureIsDelegatedOrOwnerRequest = {},
		options?: AxiosRequestConfig
	) {
		return ReviewerControllerApiFp(this.configuration)
			.getAllApplicationWhereAProcedureIsDelegatedOrOwner(
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ReviewerControllerApiGetApplicationsForReviewRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ReviewerControllerApi
	 */
	public getApplicationsForReview(
		requestParameters: ReviewerControllerApiGetApplicationsForReviewRequest = {},
		options?: AxiosRequestConfig
	) {
		return ReviewerControllerApiFp(this.configuration)
			.getApplicationsForReview(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ReviewerControllerApiGetProcedureForReviewRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ReviewerControllerApi
	 */
	public getProcedureForReview(
		requestParameters: ReviewerControllerApiGetProcedureForReviewRequest,
		options?: AxiosRequestConfig
	) {
		return ReviewerControllerApiFp(this.configuration)
			.getProcedureForReview(
				requestParameters.applicationId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ReviewerControllerApiReviewApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ReviewerControllerApi
	 */
	public reviewApplication(
		requestParameters: ReviewerControllerApiReviewApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ReviewerControllerApiFp(this.configuration)
			.reviewApplication(
				requestParameters.applicationId,
				requestParameters.reviewApplicationDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ReviewerControllerApiReviewProcedureRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ReviewerControllerApi
	 */
	public reviewProcedure(
		requestParameters: ReviewerControllerApiReviewProcedureRequest,
		options?: AxiosRequestConfig
	) {
		return ReviewerControllerApiFp(this.configuration)
			.reviewProcedure(
				requestParameters.applicationId,
				requestParameters.procedureId,
				requestParameters.procedureAppInstanceId,
				requestParameters.reviewProcedureDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}
}

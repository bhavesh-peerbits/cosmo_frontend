/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { AnswerDto } from '../models';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { ApplicationDto } from '../models';
// @ts-ignore
import { CampaignDto } from '../models';
// @ts-ignore
import { CsvAnswerParsingDto } from '../models';
// @ts-ignore
import { InlineObject9 } from '../models';
// @ts-ignore
import { ReviewDto } from '../models';
// @ts-ignore
import { UserDto } from '../models';
/**
 * AnalystCampaignControllerApi - axios parameter creator
 * @export
 */
export const AnalystCampaignControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} reviewId
		 * @param {InlineObject9} inlineObject9
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addAnswerToGivenReview: async (
			reviewId: number,
			inlineObject9: InlineObject9,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'reviewId' is not null or undefined
			assertParamExists('addAnswerToGivenReview', 'reviewId', reviewId);
			// verify required parameter 'inlineObject9' is not null or undefined
			assertParamExists('addAnswerToGivenReview', 'inlineObject9', inlineObject9);
			const localVarPath = `/api/analyst/campaign/answer/{reviewId}`.replace(
				`{${'reviewId'}}`,
				encodeURIComponent(String(reviewId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				inlineObject9,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {Array<ApplicationDto>} applicationDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addApplicationsToCampaign: async (
			campaignName: string,
			applicationDto: Array<ApplicationDto>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'campaignName' is not null or undefined
			assertParamExists('addApplicationsToCampaign', 'campaignName', campaignName);
			// verify required parameter 'applicationDto' is not null or undefined
			assertParamExists('addApplicationsToCampaign', 'applicationDto', applicationDto);
			const localVarPath =
				`/api/analyst/campaign/name/{campaignName}/application`.replace(
					`{${'campaignName'}}`,
					encodeURIComponent(String(campaignName))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				applicationDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {Array<UserDto>} userDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addContributorsToCampaign: async (
			campaignName: string,
			userDto: Array<UserDto>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'campaignName' is not null or undefined
			assertParamExists('addContributorsToCampaign', 'campaignName', campaignName);
			// verify required parameter 'userDto' is not null or undefined
			assertParamExists('addContributorsToCampaign', 'userDto', userDto);
			const localVarPath =
				`/api/analyst/campaign/name/{campaignName}/contributor`.replace(
					`{${'campaignName'}}`,
					encodeURIComponent(String(campaignName))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				userDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		archiveCampaign: async (
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'campaignName' is not null or undefined
			assertParamExists('archiveCampaign', 'campaignName', campaignName);
			const localVarPath =
				`/api/analyst/campaign/admin/name/{campaignName}/archive`.replace(
					`{${'campaignName'}}`,
					encodeURIComponent(String(campaignName))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		changeCampaignName: async (
			campaignName: string,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'campaignName' is not null or undefined
			assertParamExists('changeCampaignName', 'campaignName', campaignName);
			// verify required parameter 'body' is not null or undefined
			assertParamExists('changeCampaignName', 'body', body);
			const localVarPath = `/api/analyst/campaign/name/{campaignName}/name`.replace(
				`{${'campaignName'}}`,
				encodeURIComponent(String(campaignName))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				body,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		changeCampaignStatus: async (
			campaignName: string,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'campaignName' is not null or undefined
			assertParamExists('changeCampaignStatus', 'campaignName', campaignName);
			// verify required parameter 'body' is not null or undefined
			assertParamExists('changeCampaignStatus', 'body', body);
			const localVarPath =
				`/api/analyst/campaign/admin/name/{campaignName}/status`.replace(
					`{${'campaignName'}}`,
					encodeURIComponent(String(campaignName))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				body,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {CampaignDto} campaignDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createNewCampaign: async (
			campaignDto: CampaignDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'campaignDto' is not null or undefined
			assertParamExists('createNewCampaign', 'campaignDto', campaignDto);
			const localVarPath = `/api/analyst/campaign`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				campaignDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteCampaignByName: async (
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'campaignName' is not null or undefined
			assertParamExists('deleteCampaignByName', 'campaignName', campaignName);
			const localVarPath = `/api/analyst/campaign/name/{campaignName}`.replace(
				`{${'campaignName'}}`,
				encodeURIComponent(String(campaignName))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllCampaigns1: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/analyst/campaign/all`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} reviewId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAnswersForGivenReview1: async (
			reviewId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'reviewId' is not null or undefined
			assertParamExists('getAnswersForGivenReview1', 'reviewId', reviewId);
			const localVarPath = `/api/analyst/campaign/answer/{reviewId}`.replace(
				`{${'reviewId'}}`,
				encodeURIComponent(String(reviewId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationsOfCampaign1: async (
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'campaignName' is not null or undefined
			assertParamExists('getApplicationsOfCampaign1', 'campaignName', campaignName);
			const localVarPath =
				`/api/analyst/campaign/name/{campaignName}/application`.replace(
					`{${'campaignName'}}`,
					encodeURIComponent(String(campaignName))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} campaignId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCampaignById1: async (
			campaignId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'campaignId' is not null or undefined
			assertParamExists('getCampaignById1', 'campaignId', campaignId);
			const localVarPath = `/api/analyst/campaign/{campaignId}`.replace(
				`{${'campaignId'}}`,
				encodeURIComponent(String(campaignId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCampaignByName1: async (
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'campaignName' is not null or undefined
			assertParamExists('getCampaignByName1', 'campaignName', campaignName);
			const localVarPath = `/api/analyst/campaign/name/{campaignName}`.replace(
				`{${'campaignName'}}`,
				encodeURIComponent(String(campaignName))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getPossibleContributors: async (
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'campaignName' is not null or undefined
			assertParamExists('getPossibleContributors', 'campaignName', campaignName);
			const localVarPath =
				`/api/analyst/campaign/name/{campaignName}/possible-contributors`.replace(
					`{${'campaignName'}}`,
					encodeURIComponent(String(campaignName))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		isCampaignNameNotAvailable: async (
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'campaignName' is not null or undefined
			assertParamExists('isCampaignNameNotAvailable', 'campaignName', campaignName);
			const localVarPath =
				`/api/analyst/campaign/name/{campaignName}/is-not-available`.replace(
					`{${'campaignName'}}`,
					encodeURIComponent(String(campaignName))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		setDueDateForCampaign: async (
			campaignName: string,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'campaignName' is not null or undefined
			assertParamExists('setDueDateForCampaign', 'campaignName', campaignName);
			// verify required parameter 'body' is not null or undefined
			assertParamExists('setDueDateForCampaign', 'body', body);
			const localVarPath = `/api/analyst/campaign/name/{campaignName}/due-date`.replace(
				`{${'campaignName'}}`,
				encodeURIComponent(String(campaignName))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				body,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * AnalystCampaignControllerApi - functional programming interface
 * @export
 */
export const AnalystCampaignControllerApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		AnalystCampaignControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} reviewId
		 * @param {InlineObject9} inlineObject9
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addAnswerToGivenReview(
			reviewId: number,
			inlineObject9: InlineObject9,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CsvAnswerParsingDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addAnswerToGivenReview(
				reviewId,
				inlineObject9,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {Array<ApplicationDto>} applicationDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addApplicationsToCampaign(
			campaignName: string,
			applicationDto: Array<ApplicationDto>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addApplicationsToCampaign(
				campaignName,
				applicationDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {Array<UserDto>} userDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addContributorsToCampaign(
			campaignName: string,
			userDto: Array<UserDto>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addContributorsToCampaign(
				campaignName,
				userDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async archiveCampaign(
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.archiveCampaign(
				campaignName,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async changeCampaignName(
			campaignName: string,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.changeCampaignName(
				campaignName,
				body,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async changeCampaignStatus(
			campaignName: string,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.changeCampaignStatus(
				campaignName,
				body,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {CampaignDto} campaignDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createNewCampaign(
			campaignDto: CampaignDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createNewCampaign(
				campaignDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteCampaignByName(
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCampaignByName(
				campaignName,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllCampaigns1(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CampaignDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCampaigns1(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} reviewId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAnswersForGivenReview1(
			reviewId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnswerDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAnswersForGivenReview1(
				reviewId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getApplicationsOfCampaign1(
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ReviewDto>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getApplicationsOfCampaign1(
					campaignName,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} campaignId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getCampaignById1(
			campaignId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignById1(
				campaignId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getCampaignByName1(
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CampaignDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getCampaignByName1(
				campaignName,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getPossibleContributors(
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getPossibleContributors(
				campaignName,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async isCampaignNameNotAvailable(
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.isCampaignNameNotAvailable(
					campaignName,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async setDueDateForCampaign(
			campaignName: string,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.setDueDateForCampaign(
				campaignName,
				body,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * AnalystCampaignControllerApi - factory interface
 * @export
 */
export const AnalystCampaignControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = AnalystCampaignControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} reviewId
		 * @param {InlineObject9} inlineObject9
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addAnswerToGivenReview(
			reviewId: number,
			inlineObject9: InlineObject9,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<CsvAnswerParsingDto> {
			return localVarFp
				.addAnswerToGivenReview(reviewId, inlineObject9, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {Array<ApplicationDto>} applicationDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addApplicationsToCampaign(
			campaignName: string,
			applicationDto: Array<ApplicationDto>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.addApplicationsToCampaign(campaignName, applicationDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {Array<UserDto>} userDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addContributorsToCampaign(
			campaignName: string,
			userDto: Array<UserDto>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.addContributorsToCampaign(campaignName, userDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		archiveCampaign(
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.archiveCampaign(campaignName, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		changeCampaignName(
			campaignName: string,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.changeCampaignName(campaignName, body, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		changeCampaignStatus(
			campaignName: string,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.changeCampaignStatus(campaignName, body, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {CampaignDto} campaignDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createNewCampaign(
			campaignDto: CampaignDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<CampaignDto> {
			return localVarFp
				.createNewCampaign(campaignDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteCampaignByName(
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.deleteCampaignByName(campaignName, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllCampaigns1(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<CampaignDto>> {
			return localVarFp
				.getAllCampaigns1(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} reviewId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAnswersForGivenReview1(
			reviewId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<AnswerDto>> {
			return localVarFp
				.getAnswersForGivenReview1(reviewId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationsOfCampaign1(
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ReviewDto>> {
			return localVarFp
				.getApplicationsOfCampaign1(campaignName, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} campaignId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCampaignById1(
			campaignId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<CampaignDto> {
			return localVarFp
				.getCampaignById1(campaignId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCampaignByName1(
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<CampaignDto> {
			return localVarFp
				.getCampaignByName1(campaignName, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getPossibleContributors(
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<UserDto>> {
			return localVarFp
				.getPossibleContributors(campaignName, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		isCampaignNameNotAvailable(
			campaignName: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<boolean> {
			return localVarFp
				.isCampaignNameNotAvailable(campaignName, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} campaignName
		 * @param {string} body
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		setDueDateForCampaign(
			campaignName: string,
			body: string,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.setDueDateForCampaign(campaignName, body, acceptLanguage, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for addAnswerToGivenReview operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiAddAnswerToGivenReviewRequest
 */
export interface AnalystCampaignControllerApiAddAnswerToGivenReviewRequest {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystCampaignControllerApiAddAnswerToGivenReview
	 */
	readonly reviewId: number;

	/**
	 *
	 * @type {InlineObject9}
	 * @memberof AnalystCampaignControllerApiAddAnswerToGivenReview
	 */
	readonly inlineObject9: InlineObject9;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiAddAnswerToGivenReview
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for addApplicationsToCampaign operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiAddApplicationsToCampaignRequest
 */
export interface AnalystCampaignControllerApiAddApplicationsToCampaignRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiAddApplicationsToCampaign
	 */
	readonly campaignName: string;

	/**
	 *
	 * @type {Array<ApplicationDto>}
	 * @memberof AnalystCampaignControllerApiAddApplicationsToCampaign
	 */
	readonly applicationDto: Array<ApplicationDto>;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiAddApplicationsToCampaign
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for addContributorsToCampaign operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiAddContributorsToCampaignRequest
 */
export interface AnalystCampaignControllerApiAddContributorsToCampaignRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiAddContributorsToCampaign
	 */
	readonly campaignName: string;

	/**
	 *
	 * @type {Array<UserDto>}
	 * @memberof AnalystCampaignControllerApiAddContributorsToCampaign
	 */
	readonly userDto: Array<UserDto>;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiAddContributorsToCampaign
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for archiveCampaign operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiArchiveCampaignRequest
 */
export interface AnalystCampaignControllerApiArchiveCampaignRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiArchiveCampaign
	 */
	readonly campaignName: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiArchiveCampaign
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for changeCampaignName operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiChangeCampaignNameRequest
 */
export interface AnalystCampaignControllerApiChangeCampaignNameRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiChangeCampaignName
	 */
	readonly campaignName: string;

	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiChangeCampaignName
	 */
	readonly body: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiChangeCampaignName
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for changeCampaignStatus operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiChangeCampaignStatusRequest
 */
export interface AnalystCampaignControllerApiChangeCampaignStatusRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiChangeCampaignStatus
	 */
	readonly campaignName: string;

	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiChangeCampaignStatus
	 */
	readonly body: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiChangeCampaignStatus
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for createNewCampaign operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiCreateNewCampaignRequest
 */
export interface AnalystCampaignControllerApiCreateNewCampaignRequest {
	/**
	 *
	 * @type {CampaignDto}
	 * @memberof AnalystCampaignControllerApiCreateNewCampaign
	 */
	readonly campaignDto: CampaignDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiCreateNewCampaign
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for deleteCampaignByName operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiDeleteCampaignByNameRequest
 */
export interface AnalystCampaignControllerApiDeleteCampaignByNameRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiDeleteCampaignByName
	 */
	readonly campaignName: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiDeleteCampaignByName
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllCampaigns1 operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiGetAllCampaigns1Request
 */
export interface AnalystCampaignControllerApiGetAllCampaigns1Request {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiGetAllCampaigns1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAnswersForGivenReview1 operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiGetAnswersForGivenReview1Request
 */
export interface AnalystCampaignControllerApiGetAnswersForGivenReview1Request {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystCampaignControllerApiGetAnswersForGivenReview1
	 */
	readonly reviewId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiGetAnswersForGivenReview1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getApplicationsOfCampaign1 operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiGetApplicationsOfCampaign1Request
 */
export interface AnalystCampaignControllerApiGetApplicationsOfCampaign1Request {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiGetApplicationsOfCampaign1
	 */
	readonly campaignName: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiGetApplicationsOfCampaign1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getCampaignById1 operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiGetCampaignById1Request
 */
export interface AnalystCampaignControllerApiGetCampaignById1Request {
	/**
	 *
	 * @type {number}
	 * @memberof AnalystCampaignControllerApiGetCampaignById1
	 */
	readonly campaignId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiGetCampaignById1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getCampaignByName1 operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiGetCampaignByName1Request
 */
export interface AnalystCampaignControllerApiGetCampaignByName1Request {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiGetCampaignByName1
	 */
	readonly campaignName: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiGetCampaignByName1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getPossibleContributors operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiGetPossibleContributorsRequest
 */
export interface AnalystCampaignControllerApiGetPossibleContributorsRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiGetPossibleContributors
	 */
	readonly campaignName: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiGetPossibleContributors
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for isCampaignNameNotAvailable operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiIsCampaignNameNotAvailableRequest
 */
export interface AnalystCampaignControllerApiIsCampaignNameNotAvailableRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiIsCampaignNameNotAvailable
	 */
	readonly campaignName: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiIsCampaignNameNotAvailable
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for setDueDateForCampaign operation in AnalystCampaignControllerApi.
 * @export
 * @interface AnalystCampaignControllerApiSetDueDateForCampaignRequest
 */
export interface AnalystCampaignControllerApiSetDueDateForCampaignRequest {
	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiSetDueDateForCampaign
	 */
	readonly campaignName: string;

	/**
	 *
	 * @type {string}
	 * @memberof AnalystCampaignControllerApiSetDueDateForCampaign
	 */
	readonly body: string;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof AnalystCampaignControllerApiSetDueDateForCampaign
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * AnalystCampaignControllerApi - object-oriented interface
 * @export
 * @class AnalystCampaignControllerApi
 * @extends {BaseAPI}
 */
export class AnalystCampaignControllerApi extends BaseAPI {
	/**
	 *
	 * @param {AnalystCampaignControllerApiAddAnswerToGivenReviewRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public addAnswerToGivenReview(
		requestParameters: AnalystCampaignControllerApiAddAnswerToGivenReviewRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.addAnswerToGivenReview(
				requestParameters.reviewId,
				requestParameters.inlineObject9,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiAddApplicationsToCampaignRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public addApplicationsToCampaign(
		requestParameters: AnalystCampaignControllerApiAddApplicationsToCampaignRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.addApplicationsToCampaign(
				requestParameters.campaignName,
				requestParameters.applicationDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiAddContributorsToCampaignRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public addContributorsToCampaign(
		requestParameters: AnalystCampaignControllerApiAddContributorsToCampaignRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.addContributorsToCampaign(
				requestParameters.campaignName,
				requestParameters.userDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiArchiveCampaignRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public archiveCampaign(
		requestParameters: AnalystCampaignControllerApiArchiveCampaignRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.archiveCampaign(
				requestParameters.campaignName,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiChangeCampaignNameRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public changeCampaignName(
		requestParameters: AnalystCampaignControllerApiChangeCampaignNameRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.changeCampaignName(
				requestParameters.campaignName,
				requestParameters.body,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiChangeCampaignStatusRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public changeCampaignStatus(
		requestParameters: AnalystCampaignControllerApiChangeCampaignStatusRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.changeCampaignStatus(
				requestParameters.campaignName,
				requestParameters.body,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiCreateNewCampaignRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public createNewCampaign(
		requestParameters: AnalystCampaignControllerApiCreateNewCampaignRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.createNewCampaign(
				requestParameters.campaignDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiDeleteCampaignByNameRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public deleteCampaignByName(
		requestParameters: AnalystCampaignControllerApiDeleteCampaignByNameRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.deleteCampaignByName(
				requestParameters.campaignName,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiGetAllCampaigns1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public getAllCampaigns1(
		requestParameters: AnalystCampaignControllerApiGetAllCampaigns1Request = {},
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.getAllCampaigns1(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiGetAnswersForGivenReview1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public getAnswersForGivenReview1(
		requestParameters: AnalystCampaignControllerApiGetAnswersForGivenReview1Request,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.getAnswersForGivenReview1(
				requestParameters.reviewId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiGetApplicationsOfCampaign1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public getApplicationsOfCampaign1(
		requestParameters: AnalystCampaignControllerApiGetApplicationsOfCampaign1Request,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.getApplicationsOfCampaign1(
				requestParameters.campaignName,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiGetCampaignById1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public getCampaignById1(
		requestParameters: AnalystCampaignControllerApiGetCampaignById1Request,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.getCampaignById1(
				requestParameters.campaignId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiGetCampaignByName1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public getCampaignByName1(
		requestParameters: AnalystCampaignControllerApiGetCampaignByName1Request,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.getCampaignByName1(
				requestParameters.campaignName,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiGetPossibleContributorsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public getPossibleContributors(
		requestParameters: AnalystCampaignControllerApiGetPossibleContributorsRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.getPossibleContributors(
				requestParameters.campaignName,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiIsCampaignNameNotAvailableRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public isCampaignNameNotAvailable(
		requestParameters: AnalystCampaignControllerApiIsCampaignNameNotAvailableRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.isCampaignNameNotAvailable(
				requestParameters.campaignName,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {AnalystCampaignControllerApiSetDueDateForCampaignRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AnalystCampaignControllerApi
	 */
	public setDueDateForCampaign(
		requestParameters: AnalystCampaignControllerApiSetDueDateForCampaignRequest,
		options?: AxiosRequestConfig
	) {
		return AnalystCampaignControllerApiFp(this.configuration)
			.setDueDateForCampaign(
				requestParameters.campaignName,
				requestParameters.body,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}
}

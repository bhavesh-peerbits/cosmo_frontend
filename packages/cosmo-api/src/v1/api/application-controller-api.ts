/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { Application } from '../models';
// @ts-ignore
import { ControlAppInstance } from '../models';
// @ts-ignore
import { ControlAppInstanceKey } from '../models';
// @ts-ignore
import { ProcedureAppInstance } from '../models';
// @ts-ignore
import { ProcedureAppInstanceKey } from '../models';
// @ts-ignore
import { UserApplication } from '../models';
// @ts-ignore
import { UserApplicationKey } from '../models';
/**
 * ApplicationControllerApi - axios parameter creator
 * @export
 */
export const ApplicationControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} procedureid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addApplicationToProcedure1: async (
			applicationid: number,
			procedureid: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists('addApplicationToProcedure1', 'applicationid', applicationid);
			// verify required parameter 'procedureid' is not null or undefined
			assertParamExists('addApplicationToProcedure1', 'procedureid', procedureid);
			const localVarPath = `/api/applications/{applicationid}/procedure/{procedureid}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			if (procedureid !== undefined) {
				localVarQueryParameter['procedureid'] = procedureid;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} controlid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addControlToApplication: async (
			applicationid: number,
			controlid: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists('addControlToApplication', 'applicationid', applicationid);
			// verify required parameter 'controlid' is not null or undefined
			assertParamExists('addControlToApplication', 'controlid', controlid);
			const localVarPath = `/api/applications/{applicationid}/controls`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			if (controlid !== undefined) {
				localVarQueryParameter['controlid'] = controlid;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} userid
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addUserToApplication: async (
			userid: string,
			applicationid: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'userid' is not null or undefined
			assertParamExists('addUserToApplication', 'userid', userid);
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists('addUserToApplication', 'applicationid', applicationid);
			const localVarPath = `/api/applications/{applicationid}/users`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (userid !== undefined) {
				localVarQueryParameter['userid'] = userid;
			}

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {Application} application
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createApplication: async (
			application: Application,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'application' is not null or undefined
			assertParamExists('createApplication', 'application', application);
			const localVarPath = `/api/applications`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				application,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteApplication: async (
			id: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('deleteApplication', 'id', id);
			const localVarPath = `/api/applications/{id}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (id !== undefined) {
				localVarQueryParameter['id'] = id;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} userid
		 * @param {number} applicationid
		 * @param {UserApplicationKey} userApplicationKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteApplicationUserAssociation: async (
			userid: string,
			applicationid: number,
			userApplicationKey: UserApplicationKey,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'userid' is not null or undefined
			assertParamExists('deleteApplicationUserAssociation', 'userid', userid);
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists(
				'deleteApplicationUserAssociation',
				'applicationid',
				applicationid
			);
			// verify required parameter 'userApplicationKey' is not null or undefined
			assertParamExists(
				'deleteApplicationUserAssociation',
				'userApplicationKey',
				userApplicationKey
			);
			const localVarPath = `/api/applications/{applicationid}/users/{userid}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (userid !== undefined) {
				localVarQueryParameter['userid'] = userid;
			}

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				userApplicationKey,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} controlid
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteControlApplicationAssociation1: async (
			applicationid: number,
			controlid: number,
			controlAppInstanceKey: ControlAppInstanceKey,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists(
				'deleteControlApplicationAssociation1',
				'applicationid',
				applicationid
			);
			// verify required parameter 'controlid' is not null or undefined
			assertParamExists('deleteControlApplicationAssociation1', 'controlid', controlid);
			// verify required parameter 'controlAppInstanceKey' is not null or undefined
			assertParamExists(
				'deleteControlApplicationAssociation1',
				'controlAppInstanceKey',
				controlAppInstanceKey
			);
			const localVarPath = `/api/applications/{appid}/controls/{controlid}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			if (controlid !== undefined) {
				localVarQueryParameter['controlid'] = controlid;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				controlAppInstanceKey,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} procedureid
		 * @param {ProcedureAppInstanceKey} procedureAppInstanceKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteProcedureApplicationAssociation1: async (
			applicationid: number,
			procedureid: number,
			procedureAppInstanceKey: ProcedureAppInstanceKey,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists(
				'deleteProcedureApplicationAssociation1',
				'applicationid',
				applicationid
			);
			// verify required parameter 'procedureid' is not null or undefined
			assertParamExists(
				'deleteProcedureApplicationAssociation1',
				'procedureid',
				procedureid
			);
			// verify required parameter 'procedureAppInstanceKey' is not null or undefined
			assertParamExists(
				'deleteProcedureApplicationAssociation1',
				'procedureAppInstanceKey',
				procedureAppInstanceKey
			);
			const localVarPath = `/api/applications/{applicationid}/procedure/{procedureid}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			if (procedureid !== undefined) {
				localVarQueryParameter['procedureid'] = procedureid;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				procedureAppInstanceKey,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplications: async (
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/applications`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllControlForApplication: async (
			applicationid: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists('getAllControlForApplication', 'applicationid', applicationid);
			const localVarPath = `/api/applications/{applicationid}/controls`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllProcedureForApplication: async (
			applicationid: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists('getAllProcedureForApplication', 'applicationid', applicationid);
			const localVarPath = `/api/applications/{applicationid}/procedure`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllUserForApplication: async (
			applicationid: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists('getAllUserForApplication', 'applicationid', applicationid);
			const localVarPath = `/api/applications/{applicationid}/users`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationById: async (
			id: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('getApplicationById', 'id', id);
			const localVarPath = `/api/applications/{id}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (id !== undefined) {
				localVarQueryParameter['id'] = id;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationByName: async (
			name: string,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'name' is not null or undefined
			assertParamExists('getApplicationByName', 'name', name);
			const localVarPath = `/api/applications/{name}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (name !== undefined) {
				localVarQueryParameter['name'] = name;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {number} controlid
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getSpecificControlAppInstance1: async (
			controlAppInstanceKey: ControlAppInstanceKey,
			controlid: number,
			applicationid: number,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'controlAppInstanceKey' is not null or undefined
			assertParamExists(
				'getSpecificControlAppInstance1',
				'controlAppInstanceKey',
				controlAppInstanceKey
			);
			// verify required parameter 'controlid' is not null or undefined
			assertParamExists('getSpecificControlAppInstance1', 'controlid', controlid);
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists('getSpecificControlAppInstance1', 'applicationid', applicationid);
			const localVarPath = `/api/applications/{applicationid}/controls/{controlid}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (controlAppInstanceKey !== undefined) {
				localVarQueryParameter['controlAppInstanceKey'] = controlAppInstanceKey;
			}

			if (controlid !== undefined) {
				localVarQueryParameter['controlid'] = controlid;
			}

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} procedureid
		 * @param {ProcedureAppInstanceKey} procedureAppInstanceKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getSpecificProcedureAppInstance1: async (
			applicationid: number,
			procedureid: number,
			procedureAppInstanceKey: ProcedureAppInstanceKey,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists(
				'getSpecificProcedureAppInstance1',
				'applicationid',
				applicationid
			);
			// verify required parameter 'procedureid' is not null or undefined
			assertParamExists('getSpecificProcedureAppInstance1', 'procedureid', procedureid);
			// verify required parameter 'procedureAppInstanceKey' is not null or undefined
			assertParamExists(
				'getSpecificProcedureAppInstance1',
				'procedureAppInstanceKey',
				procedureAppInstanceKey
			);
			const localVarPath = `/api/applications/{applicationid}/procedure/{procedureid}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			if (procedureid !== undefined) {
				localVarQueryParameter['procedureid'] = procedureid;
			}

			if (procedureAppInstanceKey !== undefined) {
				localVarQueryParameter['procedureAppInstanceKey'] = procedureAppInstanceKey;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} procedureid
		 * @param {ProcedureAppInstance} procedureAppInstance
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyApplicationToProcedure1: async (
			applicationid: number,
			procedureid: number,
			procedureAppInstance: ProcedureAppInstance,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists('modifyApplicationToProcedure1', 'applicationid', applicationid);
			// verify required parameter 'procedureid' is not null or undefined
			assertParamExists('modifyApplicationToProcedure1', 'procedureid', procedureid);
			// verify required parameter 'procedureAppInstance' is not null or undefined
			assertParamExists(
				'modifyApplicationToProcedure1',
				'procedureAppInstance',
				procedureAppInstance
			);
			const localVarPath = `/api/applications/{applicationid}/procedure/{procedureid}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			if (procedureid !== undefined) {
				localVarQueryParameter['procedureid'] = procedureid;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				procedureAppInstance,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} controlid
		 * @param {ControlAppInstance} controlAppInstance
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyControlToApplication: async (
			applicationid: number,
			controlid: number,
			controlAppInstance: ControlAppInstance,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists('modifyControlToApplication', 'applicationid', applicationid);
			// verify required parameter 'controlid' is not null or undefined
			assertParamExists('modifyControlToApplication', 'controlid', controlid);
			// verify required parameter 'controlAppInstance' is not null or undefined
			assertParamExists(
				'modifyControlToApplication',
				'controlAppInstance',
				controlAppInstance
			);
			const localVarPath = `/api/applications/{applicationid}/controls/{controlid}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			if (controlid !== undefined) {
				localVarQueryParameter['controlid'] = controlid;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				controlAppInstance,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {string} userid
		 * @param {number} applicationid
		 * @param {UserApplication} userApplication
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyUserToApplicationAssociation: async (
			userid: string,
			applicationid: number,
			userApplication: UserApplication,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'userid' is not null or undefined
			assertParamExists('modifyUserToApplicationAssociation', 'userid', userid);
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists(
				'modifyUserToApplicationAssociation',
				'applicationid',
				applicationid
			);
			// verify required parameter 'userApplication' is not null or undefined
			assertParamExists(
				'modifyUserToApplicationAssociation',
				'userApplication',
				userApplication
			);
			const localVarPath = `/api/applications/{applicationid}/users/{userid}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (userid !== undefined) {
				localVarQueryParameter['userid'] = userid;
			}

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				userApplication,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {Application} application
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateApplication: async (
			id: number,
			application: Application,
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('updateApplication', 'id', id);
			// verify required parameter 'application' is not null or undefined
			assertParamExists('updateApplication', 'application', application);
			const localVarPath = `/api/applications/{id}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (id !== undefined) {
				localVarQueryParameter['id'] = id;
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				application,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * ApplicationControllerApi - functional programming interface
 * @export
 */
export const ApplicationControllerApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		ApplicationControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} procedureid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addApplicationToProcedure1(
			applicationid: number,
			procedureid: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcedureAppInstance>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.addApplicationToProcedure1(
					applicationid,
					procedureid,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} controlid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addControlToApplication(
			applicationid: number,
			controlid: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlAppInstance>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addControlToApplication(
				applicationid,
				controlid,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} userid
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addUserToApplication(
			userid: string,
			applicationid: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserApplication>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addUserToApplication(
				userid,
				applicationid,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {Application} application
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createApplication(
			application: Application,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createApplication(
				application,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteApplication(
			id: number,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApplication(
				id,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} userid
		 * @param {number} applicationid
		 * @param {UserApplicationKey} userApplicationKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteApplicationUserAssociation(
			userid: string,
			applicationid: number,
			userApplicationKey: UserApplicationKey,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.deleteApplicationUserAssociation(
					userid,
					applicationid,
					userApplicationKey,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} controlid
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteControlApplicationAssociation1(
			applicationid: number,
			controlid: number,
			controlAppInstanceKey: ControlAppInstanceKey,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.deleteControlApplicationAssociation1(
					applicationid,
					controlid,
					controlAppInstanceKey,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} procedureid
		 * @param {ProcedureAppInstanceKey} procedureAppInstanceKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteProcedureApplicationAssociation1(
			applicationid: number,
			procedureid: number,
			procedureAppInstanceKey: ProcedureAppInstanceKey,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.deleteProcedureApplicationAssociation1(
					applicationid,
					procedureid,
					procedureAppInstanceKey,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllApplications(
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Application>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllApplications(
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllControlForApplication(
			applicationid: number,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<ControlAppInstance>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getAllControlForApplication(
					applicationid,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllProcedureForApplication(
			applicationid: number,
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<ProcedureAppInstance>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getAllProcedureForApplication(
					applicationid,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllUserForApplication(
			applicationid: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserApplication>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserForApplication(
				applicationid,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getApplicationById(
			id: number,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationById(
				id,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getApplicationByName(
			name: string,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Application>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationByName(
				name,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {number} controlid
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getSpecificControlAppInstance1(
			controlAppInstanceKey: ControlAppInstanceKey,
			controlid: number,
			applicationid: number,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlAppInstance>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getSpecificControlAppInstance1(
					controlAppInstanceKey,
					controlid,
					applicationid,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} procedureid
		 * @param {ProcedureAppInstanceKey} procedureAppInstanceKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getSpecificProcedureAppInstance1(
			applicationid: number,
			procedureid: number,
			procedureAppInstanceKey: ProcedureAppInstanceKey,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcedureAppInstance>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getSpecificProcedureAppInstance1(
					applicationid,
					procedureid,
					procedureAppInstanceKey,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} procedureid
		 * @param {ProcedureAppInstance} procedureAppInstance
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async modifyApplicationToProcedure1(
			applicationid: number,
			procedureid: number,
			procedureAppInstance: ProcedureAppInstance,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcedureAppInstance>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.modifyApplicationToProcedure1(
					applicationid,
					procedureid,
					procedureAppInstance,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} controlid
		 * @param {ControlAppInstance} controlAppInstance
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async modifyControlToApplication(
			applicationid: number,
			controlid: number,
			controlAppInstance: ControlAppInstance,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlAppInstance>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.modifyControlToApplication(
					applicationid,
					controlid,
					controlAppInstance,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {string} userid
		 * @param {number} applicationid
		 * @param {UserApplication} userApplication
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async modifyUserToApplicationAssociation(
			userid: string,
			applicationid: number,
			userApplication: UserApplication,
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserApplication>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.modifyUserToApplicationAssociation(
					userid,
					applicationid,
					userApplication,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} id
		 * @param {Application} application
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateApplication(
			id: number,
			application: Application,
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.updateApplication(
				id,
				application,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * ApplicationControllerApi - factory interface
 * @export
 */
export const ApplicationControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = ApplicationControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} procedureid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addApplicationToProcedure1(
			applicationid: number,
			procedureid: number,
			options?: any
		): AxiosPromise<ProcedureAppInstance> {
			return localVarFp
				.addApplicationToProcedure1(applicationid, procedureid, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} controlid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addControlToApplication(
			applicationid: number,
			controlid: number,
			options?: any
		): AxiosPromise<ControlAppInstance> {
			return localVarFp
				.addControlToApplication(applicationid, controlid, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} userid
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addUserToApplication(
			userid: string,
			applicationid: number,
			options?: any
		): AxiosPromise<UserApplication> {
			return localVarFp
				.addUserToApplication(userid, applicationid, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {Application} application
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createApplication(
			application: Application,
			options?: any
		): AxiosPromise<Application> {
			return localVarFp
				.createApplication(application, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteApplication(id: number, options?: any): AxiosPromise<string> {
			return localVarFp
				.deleteApplication(id, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} userid
		 * @param {number} applicationid
		 * @param {UserApplicationKey} userApplicationKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteApplicationUserAssociation(
			userid: string,
			applicationid: number,
			userApplicationKey: UserApplicationKey,
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.deleteApplicationUserAssociation(
					userid,
					applicationid,
					userApplicationKey,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} controlid
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteControlApplicationAssociation1(
			applicationid: number,
			controlid: number,
			controlAppInstanceKey: ControlAppInstanceKey,
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.deleteControlApplicationAssociation1(
					applicationid,
					controlid,
					controlAppInstanceKey,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} procedureid
		 * @param {ProcedureAppInstanceKey} procedureAppInstanceKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteProcedureApplicationAssociation1(
			applicationid: number,
			procedureid: number,
			procedureAppInstanceKey: ProcedureAppInstanceKey,
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.deleteProcedureApplicationAssociation1(
					applicationid,
					procedureid,
					procedureAppInstanceKey,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplications(options?: any): AxiosPromise<Array<Application>> {
			return localVarFp
				.getAllApplications(options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllControlForApplication(
			applicationid: number,
			options?: any
		): AxiosPromise<Array<ControlAppInstance>> {
			return localVarFp
				.getAllControlForApplication(applicationid, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllProcedureForApplication(
			applicationid: number,
			options?: any
		): AxiosPromise<Array<ProcedureAppInstance>> {
			return localVarFp
				.getAllProcedureForApplication(applicationid, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllUserForApplication(
			applicationid: number,
			options?: any
		): AxiosPromise<Array<UserApplication>> {
			return localVarFp
				.getAllUserForApplication(applicationid, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationById(id: number, options?: any): AxiosPromise<Application> {
			return localVarFp
				.getApplicationById(id, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} name
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationByName(name: string, options?: any): AxiosPromise<Array<Application>> {
			return localVarFp
				.getApplicationByName(name, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {number} controlid
		 * @param {number} applicationid
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getSpecificControlAppInstance1(
			controlAppInstanceKey: ControlAppInstanceKey,
			controlid: number,
			applicationid: number,
			options?: any
		): AxiosPromise<ControlAppInstance> {
			return localVarFp
				.getSpecificControlAppInstance1(
					controlAppInstanceKey,
					controlid,
					applicationid,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} procedureid
		 * @param {ProcedureAppInstanceKey} procedureAppInstanceKey
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getSpecificProcedureAppInstance1(
			applicationid: number,
			procedureid: number,
			procedureAppInstanceKey: ProcedureAppInstanceKey,
			options?: any
		): AxiosPromise<ProcedureAppInstance> {
			return localVarFp
				.getSpecificProcedureAppInstance1(
					applicationid,
					procedureid,
					procedureAppInstanceKey,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} procedureid
		 * @param {ProcedureAppInstance} procedureAppInstance
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyApplicationToProcedure1(
			applicationid: number,
			procedureid: number,
			procedureAppInstance: ProcedureAppInstance,
			options?: any
		): AxiosPromise<ProcedureAppInstance> {
			return localVarFp
				.modifyApplicationToProcedure1(
					applicationid,
					procedureid,
					procedureAppInstance,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} controlid
		 * @param {ControlAppInstance} controlAppInstance
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyControlToApplication(
			applicationid: number,
			controlid: number,
			controlAppInstance: ControlAppInstance,
			options?: any
		): AxiosPromise<ControlAppInstance> {
			return localVarFp
				.modifyControlToApplication(applicationid, controlid, controlAppInstance, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} userid
		 * @param {number} applicationid
		 * @param {UserApplication} userApplication
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyUserToApplicationAssociation(
			userid: string,
			applicationid: number,
			userApplication: UserApplication,
			options?: any
		): AxiosPromise<UserApplication> {
			return localVarFp
				.modifyUserToApplicationAssociation(
					userid,
					applicationid,
					userApplication,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {Application} application
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateApplication(
			id: number,
			application: Application,
			options?: any
		): AxiosPromise<Application> {
			return localVarFp
				.updateApplication(id, application, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for addApplicationToProcedure1 operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiAddApplicationToProcedure1Request
 */
export interface ApplicationControllerApiAddApplicationToProcedure1Request {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiAddApplicationToProcedure1
	 */
	readonly applicationid: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiAddApplicationToProcedure1
	 */
	readonly procedureid: number;
}

/**
 * Request parameters for addControlToApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiAddControlToApplicationRequest
 */
export interface ApplicationControllerApiAddControlToApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiAddControlToApplication
	 */
	readonly applicationid: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiAddControlToApplication
	 */
	readonly controlid: number;
}

/**
 * Request parameters for addUserToApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiAddUserToApplicationRequest
 */
export interface ApplicationControllerApiAddUserToApplicationRequest {
	/**
	 *
	 * @type {string}
	 * @memberof ApplicationControllerApiAddUserToApplication
	 */
	readonly userid: string;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiAddUserToApplication
	 */
	readonly applicationid: number;
}

/**
 * Request parameters for createApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiCreateApplicationRequest
 */
export interface ApplicationControllerApiCreateApplicationRequest {
	/**
	 *
	 * @type {Application}
	 * @memberof ApplicationControllerApiCreateApplication
	 */
	readonly application: Application;
}

/**
 * Request parameters for deleteApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiDeleteApplicationRequest
 */
export interface ApplicationControllerApiDeleteApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiDeleteApplication
	 */
	readonly id: number;
}

/**
 * Request parameters for deleteApplicationUserAssociation operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiDeleteApplicationUserAssociationRequest
 */
export interface ApplicationControllerApiDeleteApplicationUserAssociationRequest {
	/**
	 *
	 * @type {string}
	 * @memberof ApplicationControllerApiDeleteApplicationUserAssociation
	 */
	readonly userid: string;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiDeleteApplicationUserAssociation
	 */
	readonly applicationid: number;

	/**
	 *
	 * @type {UserApplicationKey}
	 * @memberof ApplicationControllerApiDeleteApplicationUserAssociation
	 */
	readonly userApplicationKey: UserApplicationKey;
}

/**
 * Request parameters for deleteControlApplicationAssociation1 operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiDeleteControlApplicationAssociation1Request
 */
export interface ApplicationControllerApiDeleteControlApplicationAssociation1Request {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiDeleteControlApplicationAssociation1
	 */
	readonly applicationid: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiDeleteControlApplicationAssociation1
	 */
	readonly controlid: number;

	/**
	 *
	 * @type {ControlAppInstanceKey}
	 * @memberof ApplicationControllerApiDeleteControlApplicationAssociation1
	 */
	readonly controlAppInstanceKey: ControlAppInstanceKey;
}

/**
 * Request parameters for deleteProcedureApplicationAssociation1 operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiDeleteProcedureApplicationAssociation1Request
 */
export interface ApplicationControllerApiDeleteProcedureApplicationAssociation1Request {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiDeleteProcedureApplicationAssociation1
	 */
	readonly applicationid: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiDeleteProcedureApplicationAssociation1
	 */
	readonly procedureid: number;

	/**
	 *
	 * @type {ProcedureAppInstanceKey}
	 * @memberof ApplicationControllerApiDeleteProcedureApplicationAssociation1
	 */
	readonly procedureAppInstanceKey: ProcedureAppInstanceKey;
}

/**
 * Request parameters for getAllControlForApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetAllControlForApplicationRequest
 */
export interface ApplicationControllerApiGetAllControlForApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetAllControlForApplication
	 */
	readonly applicationid: number;
}

/**
 * Request parameters for getAllProcedureForApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetAllProcedureForApplicationRequest
 */
export interface ApplicationControllerApiGetAllProcedureForApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetAllProcedureForApplication
	 */
	readonly applicationid: number;
}

/**
 * Request parameters for getAllUserForApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetAllUserForApplicationRequest
 */
export interface ApplicationControllerApiGetAllUserForApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetAllUserForApplication
	 */
	readonly applicationid: number;
}

/**
 * Request parameters for getApplicationById operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetApplicationByIdRequest
 */
export interface ApplicationControllerApiGetApplicationByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetApplicationById
	 */
	readonly id: number;
}

/**
 * Request parameters for getApplicationByName operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetApplicationByNameRequest
 */
export interface ApplicationControllerApiGetApplicationByNameRequest {
	/**
	 *
	 * @type {string}
	 * @memberof ApplicationControllerApiGetApplicationByName
	 */
	readonly name: string;
}

/**
 * Request parameters for getSpecificControlAppInstance1 operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetSpecificControlAppInstance1Request
 */
export interface ApplicationControllerApiGetSpecificControlAppInstance1Request {
	/**
	 *
	 * @type {ControlAppInstanceKey}
	 * @memberof ApplicationControllerApiGetSpecificControlAppInstance1
	 */
	readonly controlAppInstanceKey: ControlAppInstanceKey;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetSpecificControlAppInstance1
	 */
	readonly controlid: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetSpecificControlAppInstance1
	 */
	readonly applicationid: number;
}

/**
 * Request parameters for getSpecificProcedureAppInstance1 operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetSpecificProcedureAppInstance1Request
 */
export interface ApplicationControllerApiGetSpecificProcedureAppInstance1Request {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetSpecificProcedureAppInstance1
	 */
	readonly applicationid: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetSpecificProcedureAppInstance1
	 */
	readonly procedureid: number;

	/**
	 *
	 * @type {ProcedureAppInstanceKey}
	 * @memberof ApplicationControllerApiGetSpecificProcedureAppInstance1
	 */
	readonly procedureAppInstanceKey: ProcedureAppInstanceKey;
}

/**
 * Request parameters for modifyApplicationToProcedure1 operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiModifyApplicationToProcedure1Request
 */
export interface ApplicationControllerApiModifyApplicationToProcedure1Request {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiModifyApplicationToProcedure1
	 */
	readonly applicationid: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiModifyApplicationToProcedure1
	 */
	readonly procedureid: number;

	/**
	 *
	 * @type {ProcedureAppInstance}
	 * @memberof ApplicationControllerApiModifyApplicationToProcedure1
	 */
	readonly procedureAppInstance: ProcedureAppInstance;
}

/**
 * Request parameters for modifyControlToApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiModifyControlToApplicationRequest
 */
export interface ApplicationControllerApiModifyControlToApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiModifyControlToApplication
	 */
	readonly applicationid: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiModifyControlToApplication
	 */
	readonly controlid: number;

	/**
	 *
	 * @type {ControlAppInstance}
	 * @memberof ApplicationControllerApiModifyControlToApplication
	 */
	readonly controlAppInstance: ControlAppInstance;
}

/**
 * Request parameters for modifyUserToApplicationAssociation operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiModifyUserToApplicationAssociationRequest
 */
export interface ApplicationControllerApiModifyUserToApplicationAssociationRequest {
	/**
	 *
	 * @type {string}
	 * @memberof ApplicationControllerApiModifyUserToApplicationAssociation
	 */
	readonly userid: string;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiModifyUserToApplicationAssociation
	 */
	readonly applicationid: number;

	/**
	 *
	 * @type {UserApplication}
	 * @memberof ApplicationControllerApiModifyUserToApplicationAssociation
	 */
	readonly userApplication: UserApplication;
}

/**
 * Request parameters for updateApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiUpdateApplicationRequest
 */
export interface ApplicationControllerApiUpdateApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiUpdateApplication
	 */
	readonly id: number;

	/**
	 *
	 * @type {Application}
	 * @memberof ApplicationControllerApiUpdateApplication
	 */
	readonly application: Application;
}

/**
 * ApplicationControllerApi - object-oriented interface
 * @export
 * @class ApplicationControllerApi
 * @extends {BaseAPI}
 */
export class ApplicationControllerApi extends BaseAPI {
	/**
	 *
	 * @param {ApplicationControllerApiAddApplicationToProcedure1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public addApplicationToProcedure1(
		requestParameters: ApplicationControllerApiAddApplicationToProcedure1Request,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.addApplicationToProcedure1(
				requestParameters.applicationid,
				requestParameters.procedureid,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiAddControlToApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public addControlToApplication(
		requestParameters: ApplicationControllerApiAddControlToApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.addControlToApplication(
				requestParameters.applicationid,
				requestParameters.controlid,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiAddUserToApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public addUserToApplication(
		requestParameters: ApplicationControllerApiAddUserToApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.addUserToApplication(
				requestParameters.userid,
				requestParameters.applicationid,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiCreateApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public createApplication(
		requestParameters: ApplicationControllerApiCreateApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.createApplication(requestParameters.application, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiDeleteApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public deleteApplication(
		requestParameters: ApplicationControllerApiDeleteApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.deleteApplication(requestParameters.id, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiDeleteApplicationUserAssociationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public deleteApplicationUserAssociation(
		requestParameters: ApplicationControllerApiDeleteApplicationUserAssociationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.deleteApplicationUserAssociation(
				requestParameters.userid,
				requestParameters.applicationid,
				requestParameters.userApplicationKey,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiDeleteControlApplicationAssociation1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public deleteControlApplicationAssociation1(
		requestParameters: ApplicationControllerApiDeleteControlApplicationAssociation1Request,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.deleteControlApplicationAssociation1(
				requestParameters.applicationid,
				requestParameters.controlid,
				requestParameters.controlAppInstanceKey,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiDeleteProcedureApplicationAssociation1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public deleteProcedureApplicationAssociation1(
		requestParameters: ApplicationControllerApiDeleteProcedureApplicationAssociation1Request,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.deleteProcedureApplicationAssociation1(
				requestParameters.applicationid,
				requestParameters.procedureid,
				requestParameters.procedureAppInstanceKey,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getAllApplications(options?: AxiosRequestConfig) {
		return ApplicationControllerApiFp(this.configuration)
			.getAllApplications(options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetAllControlForApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getAllControlForApplication(
		requestParameters: ApplicationControllerApiGetAllControlForApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getAllControlForApplication(requestParameters.applicationid, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetAllProcedureForApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getAllProcedureForApplication(
		requestParameters: ApplicationControllerApiGetAllProcedureForApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getAllProcedureForApplication(requestParameters.applicationid, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetAllUserForApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getAllUserForApplication(
		requestParameters: ApplicationControllerApiGetAllUserForApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getAllUserForApplication(requestParameters.applicationid, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetApplicationByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getApplicationById(
		requestParameters: ApplicationControllerApiGetApplicationByIdRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getApplicationById(requestParameters.id, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetApplicationByNameRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getApplicationByName(
		requestParameters: ApplicationControllerApiGetApplicationByNameRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getApplicationByName(requestParameters.name, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetSpecificControlAppInstance1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getSpecificControlAppInstance1(
		requestParameters: ApplicationControllerApiGetSpecificControlAppInstance1Request,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getSpecificControlAppInstance1(
				requestParameters.controlAppInstanceKey,
				requestParameters.controlid,
				requestParameters.applicationid,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetSpecificProcedureAppInstance1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getSpecificProcedureAppInstance1(
		requestParameters: ApplicationControllerApiGetSpecificProcedureAppInstance1Request,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getSpecificProcedureAppInstance1(
				requestParameters.applicationid,
				requestParameters.procedureid,
				requestParameters.procedureAppInstanceKey,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiModifyApplicationToProcedure1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public modifyApplicationToProcedure1(
		requestParameters: ApplicationControllerApiModifyApplicationToProcedure1Request,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.modifyApplicationToProcedure1(
				requestParameters.applicationid,
				requestParameters.procedureid,
				requestParameters.procedureAppInstance,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiModifyControlToApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public modifyControlToApplication(
		requestParameters: ApplicationControllerApiModifyControlToApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.modifyControlToApplication(
				requestParameters.applicationid,
				requestParameters.controlid,
				requestParameters.controlAppInstance,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiModifyUserToApplicationAssociationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public modifyUserToApplicationAssociation(
		requestParameters: ApplicationControllerApiModifyUserToApplicationAssociationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.modifyUserToApplicationAssociation(
				requestParameters.userid,
				requestParameters.applicationid,
				requestParameters.userApplication,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiUpdateApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public updateApplication(
		requestParameters: ApplicationControllerApiUpdateApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.updateApplication(requestParameters.id, requestParameters.application, options)
			.then(request => request(this.axios, this.basePath));
	}
}

/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { ApplicationAuditDto } from '../models';
// @ts-ignore
import { ApplicationDto } from '../models';
// @ts-ignore
import { ControlAppInstance } from '../models';
// @ts-ignore
import { ControlAppInstanceKey } from '../models';
// @ts-ignore
import { ProcedureAppInstance } from '../models';
// @ts-ignore
import { ProcedureAppInstanceDto } from '../models';
/**
 * ApplicationControllerApi - axios parameter creator
 * @export
 */
export const ApplicationControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} appId
		 * @param {number} controlId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		addControlToApplication: async (
			appId: number,
			controlId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('addControlToApplication', 'appId', appId);
			// verify required parameter 'controlId' is not null or undefined
			assertParamExists('addControlToApplication', 'controlId', controlId);
			const localVarPath = `/api/applications/{appId}/controls`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (appId !== undefined) {
				localVarQueryParameter['appId'] = appId;
			}

			if (controlId !== undefined) {
				localVarQueryParameter['controlId'] = controlId;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {ApplicationDto} applicationDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createApplication: async (
			applicationDto: ApplicationDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationDto' is not null or undefined
			assertParamExists('createApplication', 'applicationDto', applicationDto);
			const localVarPath = `/api/applications`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				applicationDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteApplication: async (
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('deleteApplication', 'appId', appId);
			const localVarPath = `/api/applications/{appId}`.replace(
				`{${'appId'}}`,
				encodeURIComponent(String(appId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} controlid
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		deleteControlApplicationAssociation1: async (
			applicationid: number,
			controlid: number,
			controlAppInstanceKey: ControlAppInstanceKey,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'applicationid' is not null or undefined
			assertParamExists(
				'deleteControlApplicationAssociation1',
				'applicationid',
				applicationid
			);
			// verify required parameter 'controlid' is not null or undefined
			assertParamExists('deleteControlApplicationAssociation1', 'controlid', controlid);
			// verify required parameter 'controlAppInstanceKey' is not null or undefined
			assertParamExists(
				'deleteControlApplicationAssociation1',
				'controlAppInstanceKey',
				controlAppInstanceKey
			);
			const localVarPath = `/api/applications/{appId}/controls/{controlid}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (applicationid !== undefined) {
				localVarQueryParameter['applicationid'] = applicationid;
			}

			if (controlid !== undefined) {
				localVarQueryParameter['controlid'] = controlid;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				controlAppInstanceKey,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplications: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/applications`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllAuditForApplication: async (
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('getAllAuditForApplication', 'appId', appId);
			const localVarPath = `/api/applications/{appId}/audit`.replace(
				`{${'appId'}}`,
				encodeURIComponent(String(appId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		getAllControlForApplication: async (
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('getAllControlForApplication', 'appId', appId);
			const localVarPath = `/api/applications/{appId}/controls`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (appId !== undefined) {
				localVarQueryParameter['appId'] = appId;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllProcedureForApplication: async (
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('getAllProcedureForApplication', 'appId', appId);
			const localVarPath = `/api/applications/{appId}/procedure`.replace(
				`{${'appId'}}`,
				encodeURIComponent(String(appId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationById: async (
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('getApplicationById', 'appId', appId);
			const localVarPath = `/api/applications/{appId}`.replace(
				`{${'appId'}}`,
				encodeURIComponent(String(appId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {number} controlId
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		getSpecificControlAppInstance1: async (
			controlAppInstanceKey: ControlAppInstanceKey,
			controlId: number,
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'controlAppInstanceKey' is not null or undefined
			assertParamExists(
				'getSpecificControlAppInstance1',
				'controlAppInstanceKey',
				controlAppInstanceKey
			);
			// verify required parameter 'controlId' is not null or undefined
			assertParamExists('getSpecificControlAppInstance1', 'controlId', controlId);
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('getSpecificControlAppInstance1', 'appId', appId);
			const localVarPath = `/api/applications/{appId}/controls/{controlId}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (controlAppInstanceKey !== undefined) {
				localVarQueryParameter['controlAppInstanceKey'] = controlAppInstanceKey;
			}

			if (controlId !== undefined) {
				localVarQueryParameter['controlId'] = controlId;
			}

			if (appId !== undefined) {
				localVarQueryParameter['appId'] = appId;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} procedureid
		 * @param {number} procedureAppInstanceId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getSpecificProcedureAppInstance: async (
			appId: number,
			procedureid: number,
			procedureAppInstanceId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('getSpecificProcedureAppInstance', 'appId', appId);
			// verify required parameter 'procedureid' is not null or undefined
			assertParamExists('getSpecificProcedureAppInstance', 'procedureid', procedureid);
			// verify required parameter 'procedureAppInstanceId' is not null or undefined
			assertParamExists(
				'getSpecificProcedureAppInstance',
				'procedureAppInstanceId',
				procedureAppInstanceId
			);
			const localVarPath = `/api/applications/{appId}/procedure/{procedureid}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (appId !== undefined) {
				localVarQueryParameter['appId'] = appId;
			}

			if (procedureid !== undefined) {
				localVarQueryParameter['procedureid'] = procedureid;
			}

			if (procedureAppInstanceId !== undefined) {
				localVarQueryParameter['procedureAppInstanceId'] = procedureAppInstanceId;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} controlId
		 * @param {ControlAppInstance} controlAppInstance
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		modifyControlToApplication: async (
			appId: number,
			controlId: number,
			controlAppInstance: ControlAppInstance,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('modifyControlToApplication', 'appId', appId);
			// verify required parameter 'controlId' is not null or undefined
			assertParamExists('modifyControlToApplication', 'controlId', controlId);
			// verify required parameter 'controlAppInstance' is not null or undefined
			assertParamExists(
				'modifyControlToApplication',
				'controlAppInstance',
				controlAppInstance
			);
			const localVarPath = `/api/applications/{appId}/controls/{controlId}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (appId !== undefined) {
				localVarQueryParameter['appId'] = appId;
			}

			if (controlId !== undefined) {
				localVarQueryParameter['controlId'] = controlId;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				controlAppInstance,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} appId
		 * @param {ApplicationDto} applicationDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateApplication: async (
			appId: number,
			applicationDto: ApplicationDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'appId' is not null or undefined
			assertParamExists('updateApplication', 'appId', appId);
			// verify required parameter 'applicationDto' is not null or undefined
			assertParamExists('updateApplication', 'applicationDto', applicationDto);
			const localVarPath = `/api/applications/{appId}`.replace(
				`{${'appId'}}`,
				encodeURIComponent(String(appId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				applicationDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * ApplicationControllerApi - functional programming interface
 * @export
 */
export const ApplicationControllerApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		ApplicationControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} appId
		 * @param {number} controlId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		async addControlToApplication(
			appId: number,
			controlId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlAppInstance>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addControlToApplication(
				appId,
				controlId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {ApplicationDto} applicationDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createApplication(
			applicationDto: ApplicationDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createApplication(
				applicationDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteApplication(
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteApplication(
				appId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} controlid
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		async deleteControlApplicationAssociation1(
			applicationid: number,
			controlid: number,
			controlAppInstanceKey: ControlAppInstanceKey,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.deleteControlApplicationAssociation1(
					applicationid,
					controlid,
					controlAppInstanceKey,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllApplications(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllApplications(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllAuditForApplication(
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<ApplicationAuditDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllAuditForApplication(
				appId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		async getAllControlForApplication(
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<ControlAppInstance>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getAllControlForApplication(
					appId,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllProcedureForApplication(
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<ProcedureAppInstanceDto>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getAllProcedureForApplication(
					appId,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getApplicationById(
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getApplicationById(
				appId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {number} controlId
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		async getSpecificControlAppInstance1(
			controlAppInstanceKey: ControlAppInstanceKey,
			controlId: number,
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlAppInstance>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getSpecificControlAppInstance1(
					controlAppInstanceKey,
					controlId,
					appId,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} procedureid
		 * @param {number} procedureAppInstanceId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getSpecificProcedureAppInstance(
			appId: number,
			procedureid: number,
			procedureAppInstanceId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProcedureAppInstance>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getSpecificProcedureAppInstance(
					appId,
					procedureid,
					procedureAppInstanceId,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} controlId
		 * @param {ControlAppInstance} controlAppInstance
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		async modifyControlToApplication(
			appId: number,
			controlId: number,
			controlAppInstance: ControlAppInstance,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlAppInstance>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.modifyControlToApplication(
					appId,
					controlId,
					controlAppInstance,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} appId
		 * @param {ApplicationDto} applicationDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateApplication(
			appId: number,
			applicationDto: ApplicationDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.updateApplication(
				appId,
				applicationDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * ApplicationControllerApi - factory interface
 * @export
 */
export const ApplicationControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = ApplicationControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} appId
		 * @param {number} controlId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		addControlToApplication(
			appId: number,
			controlId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ControlAppInstance> {
			return localVarFp
				.addControlToApplication(appId, controlId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {ApplicationDto} applicationDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createApplication(
			applicationDto: ApplicationDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ApplicationDto> {
			return localVarFp
				.createApplication(applicationDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteApplication(
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.deleteApplication(appId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} applicationid
		 * @param {number} controlid
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		deleteControlApplicationAssociation1(
			applicationid: number,
			controlid: number,
			controlAppInstanceKey: ControlAppInstanceKey,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.deleteControlApplicationAssociation1(
					applicationid,
					controlid,
					controlAppInstanceKey,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplications(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ApplicationDto>> {
			return localVarFp
				.getAllApplications(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllAuditForApplication(
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ApplicationAuditDto>> {
			return localVarFp
				.getAllAuditForApplication(appId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		getAllControlForApplication(
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ControlAppInstance>> {
			return localVarFp
				.getAllControlForApplication(appId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllProcedureForApplication(
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ProcedureAppInstanceDto>> {
			return localVarFp
				.getAllProcedureForApplication(appId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getApplicationById(
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ApplicationDto> {
			return localVarFp
				.getApplicationById(appId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {number} controlId
		 * @param {number} appId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		getSpecificControlAppInstance1(
			controlAppInstanceKey: ControlAppInstanceKey,
			controlId: number,
			appId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ControlAppInstance> {
			return localVarFp
				.getSpecificControlAppInstance1(
					controlAppInstanceKey,
					controlId,
					appId,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} procedureid
		 * @param {number} procedureAppInstanceId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getSpecificProcedureAppInstance(
			appId: number,
			procedureid: number,
			procedureAppInstanceId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ProcedureAppInstance> {
			return localVarFp
				.getSpecificProcedureAppInstance(
					appId,
					procedureid,
					procedureAppInstanceId,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} appId
		 * @param {number} controlId
		 * @param {ControlAppInstance} controlAppInstance
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		modifyControlToApplication(
			appId: number,
			controlId: number,
			controlAppInstance: ControlAppInstance,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ControlAppInstance> {
			return localVarFp
				.modifyControlToApplication(
					appId,
					controlId,
					controlAppInstance,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} appId
		 * @param {ApplicationDto} applicationDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateApplication(
			appId: number,
			applicationDto: ApplicationDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ApplicationDto> {
			return localVarFp
				.updateApplication(appId, applicationDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for addControlToApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiAddControlToApplicationRequest
 */
export interface ApplicationControllerApiAddControlToApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiAddControlToApplication
	 */
	readonly appId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiAddControlToApplication
	 */
	readonly controlId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ApplicationControllerApiAddControlToApplication
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for createApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiCreateApplicationRequest
 */
export interface ApplicationControllerApiCreateApplicationRequest {
	/**
	 *
	 * @type {ApplicationDto}
	 * @memberof ApplicationControllerApiCreateApplication
	 */
	readonly applicationDto: ApplicationDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ApplicationControllerApiCreateApplication
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for deleteApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiDeleteApplicationRequest
 */
export interface ApplicationControllerApiDeleteApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiDeleteApplication
	 */
	readonly appId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ApplicationControllerApiDeleteApplication
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for deleteControlApplicationAssociation1 operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiDeleteControlApplicationAssociation1Request
 */
export interface ApplicationControllerApiDeleteControlApplicationAssociation1Request {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiDeleteControlApplicationAssociation1
	 */
	readonly applicationid: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiDeleteControlApplicationAssociation1
	 */
	readonly controlid: number;

	/**
	 *
	 * @type {ControlAppInstanceKey}
	 * @memberof ApplicationControllerApiDeleteControlApplicationAssociation1
	 */
	readonly controlAppInstanceKey: ControlAppInstanceKey;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ApplicationControllerApiDeleteControlApplicationAssociation1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllApplications operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetAllApplicationsRequest
 */
export interface ApplicationControllerApiGetAllApplicationsRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ApplicationControllerApiGetAllApplications
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllAuditForApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetAllAuditForApplicationRequest
 */
export interface ApplicationControllerApiGetAllAuditForApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetAllAuditForApplication
	 */
	readonly appId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ApplicationControllerApiGetAllAuditForApplication
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllControlForApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetAllControlForApplicationRequest
 */
export interface ApplicationControllerApiGetAllControlForApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetAllControlForApplication
	 */
	readonly appId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ApplicationControllerApiGetAllControlForApplication
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllProcedureForApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetAllProcedureForApplicationRequest
 */
export interface ApplicationControllerApiGetAllProcedureForApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetAllProcedureForApplication
	 */
	readonly appId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ApplicationControllerApiGetAllProcedureForApplication
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getApplicationById operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetApplicationByIdRequest
 */
export interface ApplicationControllerApiGetApplicationByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetApplicationById
	 */
	readonly appId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ApplicationControllerApiGetApplicationById
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getSpecificControlAppInstance1 operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetSpecificControlAppInstance1Request
 */
export interface ApplicationControllerApiGetSpecificControlAppInstance1Request {
	/**
	 *
	 * @type {ControlAppInstanceKey}
	 * @memberof ApplicationControllerApiGetSpecificControlAppInstance1
	 */
	readonly controlAppInstanceKey: ControlAppInstanceKey;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetSpecificControlAppInstance1
	 */
	readonly controlId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetSpecificControlAppInstance1
	 */
	readonly appId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ApplicationControllerApiGetSpecificControlAppInstance1
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getSpecificProcedureAppInstance operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiGetSpecificProcedureAppInstanceRequest
 */
export interface ApplicationControllerApiGetSpecificProcedureAppInstanceRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetSpecificProcedureAppInstance
	 */
	readonly appId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetSpecificProcedureAppInstance
	 */
	readonly procedureid: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiGetSpecificProcedureAppInstance
	 */
	readonly procedureAppInstanceId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ApplicationControllerApiGetSpecificProcedureAppInstance
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for modifyControlToApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiModifyControlToApplicationRequest
 */
export interface ApplicationControllerApiModifyControlToApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiModifyControlToApplication
	 */
	readonly appId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiModifyControlToApplication
	 */
	readonly controlId: number;

	/**
	 *
	 * @type {ControlAppInstance}
	 * @memberof ApplicationControllerApiModifyControlToApplication
	 */
	readonly controlAppInstance: ControlAppInstance;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ApplicationControllerApiModifyControlToApplication
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for updateApplication operation in ApplicationControllerApi.
 * @export
 * @interface ApplicationControllerApiUpdateApplicationRequest
 */
export interface ApplicationControllerApiUpdateApplicationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ApplicationControllerApiUpdateApplication
	 */
	readonly appId: number;

	/**
	 *
	 * @type {ApplicationDto}
	 * @memberof ApplicationControllerApiUpdateApplication
	 */
	readonly applicationDto: ApplicationDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ApplicationControllerApiUpdateApplication
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * ApplicationControllerApi - object-oriented interface
 * @export
 * @class ApplicationControllerApi
 * @extends {BaseAPI}
 */
export class ApplicationControllerApi extends BaseAPI {
	/**
	 *
	 * @param {ApplicationControllerApiAddControlToApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @deprecated
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public addControlToApplication(
		requestParameters: ApplicationControllerApiAddControlToApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.addControlToApplication(
				requestParameters.appId,
				requestParameters.controlId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiCreateApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public createApplication(
		requestParameters: ApplicationControllerApiCreateApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.createApplication(
				requestParameters.applicationDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiDeleteApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public deleteApplication(
		requestParameters: ApplicationControllerApiDeleteApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.deleteApplication(
				requestParameters.appId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiDeleteControlApplicationAssociation1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @deprecated
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public deleteControlApplicationAssociation1(
		requestParameters: ApplicationControllerApiDeleteControlApplicationAssociation1Request,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.deleteControlApplicationAssociation1(
				requestParameters.applicationid,
				requestParameters.controlid,
				requestParameters.controlAppInstanceKey,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetAllApplicationsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getAllApplications(
		requestParameters: ApplicationControllerApiGetAllApplicationsRequest = {},
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getAllApplications(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetAllAuditForApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getAllAuditForApplication(
		requestParameters: ApplicationControllerApiGetAllAuditForApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getAllAuditForApplication(
				requestParameters.appId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetAllControlForApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @deprecated
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getAllControlForApplication(
		requestParameters: ApplicationControllerApiGetAllControlForApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getAllControlForApplication(
				requestParameters.appId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetAllProcedureForApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getAllProcedureForApplication(
		requestParameters: ApplicationControllerApiGetAllProcedureForApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getAllProcedureForApplication(
				requestParameters.appId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetApplicationByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getApplicationById(
		requestParameters: ApplicationControllerApiGetApplicationByIdRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getApplicationById(
				requestParameters.appId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetSpecificControlAppInstance1Request} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @deprecated
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getSpecificControlAppInstance1(
		requestParameters: ApplicationControllerApiGetSpecificControlAppInstance1Request,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getSpecificControlAppInstance1(
				requestParameters.controlAppInstanceKey,
				requestParameters.controlId,
				requestParameters.appId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiGetSpecificProcedureAppInstanceRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public getSpecificProcedureAppInstance(
		requestParameters: ApplicationControllerApiGetSpecificProcedureAppInstanceRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.getSpecificProcedureAppInstance(
				requestParameters.appId,
				requestParameters.procedureid,
				requestParameters.procedureAppInstanceId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiModifyControlToApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @deprecated
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public modifyControlToApplication(
		requestParameters: ApplicationControllerApiModifyControlToApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.modifyControlToApplication(
				requestParameters.appId,
				requestParameters.controlId,
				requestParameters.controlAppInstance,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ApplicationControllerApiUpdateApplicationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ApplicationControllerApi
	 */
	public updateApplication(
		requestParameters: ApplicationControllerApiUpdateApplicationRequest,
		options?: AxiosRequestConfig
	) {
		return ApplicationControllerApiFp(this.configuration)
			.updateApplication(
				requestParameters.appId,
				requestParameters.applicationDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}
}

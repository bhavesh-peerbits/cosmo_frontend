/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { AnswerFileAlreadyUploadedDto } from '../models';
// @ts-ignore
import { AnswerMonitoringDto } from '../models';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { DeltaDto } from '../models';
// @ts-ignore
import { InlineObject17 } from '../models';
/**
 * ChangeMonitoringControllerApi - axios parameter creator
 * @export
 */
export const ChangeMonitoringControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} deltaId
		 * @param {number} deltaFileId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteAnswer: async (
			deltaId: number,
			deltaFileId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'deltaId' is not null or undefined
			assertParamExists('deleteAnswer', 'deltaId', deltaId);
			// verify required parameter 'deltaFileId' is not null or undefined
			assertParamExists('deleteAnswer', 'deltaFileId', deltaFileId);
			const localVarPath =
				`/api/change-monitoring/delta/{deltaId}/delta-file/id/{deltaFileId}/delete-answer`
					.replace(`{${'deltaId'}}`, encodeURIComponent(String(deltaId)))
					.replace(`{${'deltaFileId'}}`, encodeURIComponent(String(deltaFileId)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		echo: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/change-monitoring`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {Array<number>} requestBody
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCsvAnswer: async (
			deltaId: number,
			requestBody: Array<number>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'deltaId' is not null or undefined
			assertParamExists('getCsvAnswer', 'deltaId', deltaId);
			// verify required parameter 'requestBody' is not null or undefined
			assertParamExists('getCsvAnswer', 'requestBody', requestBody);
			const localVarPath = `/api/change-monitoring/get-csv-answer/id/{deltaId}`.replace(
				`{${'deltaId'}}`,
				encodeURIComponent(String(deltaId))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				requestBody,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {AnswerMonitoringDto} answer
		 * @param {Array<any>} files
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveAnswerWithFile: async (
			deltaId: number,
			answer: AnswerMonitoringDto,
			files: Array<any>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'deltaId' is not null or undefined
			assertParamExists('saveAnswerWithFile', 'deltaId', deltaId);
			// verify required parameter 'answer' is not null or undefined
			assertParamExists('saveAnswerWithFile', 'answer', answer);
			// verify required parameter 'files' is not null or undefined
			assertParamExists('saveAnswerWithFile', 'files', files);
			const localVarPath =
				`/api/change-monitoring/save-answer-with-file/id/{deltaId}`.replace(
					`{${'deltaId'}}`,
					encodeURIComponent(String(deltaId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;
			const localVarFormParams = new ((configuration && configuration.formDataCtor) ||
				FormData)();

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			if (answer !== undefined) {
				localVarFormParams.append(
					'answer',
					new Blob([JSON.stringify(answer)], { type: 'application/json' })
				);
			}
			if (files) {
				files.forEach(element => {
					localVarFormParams.append('files', element as any);
				});
			}

			localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = localVarFormParams;

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {AnswerFileAlreadyUploadedDto} answerFileAlreadyUploadedDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveAnswerWithFileAlreadyUploaded: async (
			deltaId: number,
			answerFileAlreadyUploadedDto: AnswerFileAlreadyUploadedDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'deltaId' is not null or undefined
			assertParamExists('saveAnswerWithFileAlreadyUploaded', 'deltaId', deltaId);
			// verify required parameter 'answerFileAlreadyUploadedDto' is not null or undefined
			assertParamExists(
				'saveAnswerWithFileAlreadyUploaded',
				'answerFileAlreadyUploadedDto',
				answerFileAlreadyUploadedDto
			);
			const localVarPath =
				`/api/change-monitoring/save-answer-with-file-already-uploaded/id/{deltaId}`.replace(
					`{${'deltaId'}}`,
					encodeURIComponent(String(deltaId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				answerFileAlreadyUploadedDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {AnswerMonitoringDto} answerMonitoringDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveAnswerWithoutFile: async (
			deltaId: number,
			answerMonitoringDto: AnswerMonitoringDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'deltaId' is not null or undefined
			assertParamExists('saveAnswerWithoutFile', 'deltaId', deltaId);
			// verify required parameter 'answerMonitoringDto' is not null or undefined
			assertParamExists(
				'saveAnswerWithoutFile',
				'answerMonitoringDto',
				answerMonitoringDto
			);
			const localVarPath =
				`/api/change-monitoring/save-answer-without-file/id/{deltaId}`.replace(
					`{${'deltaId'}}`,
					encodeURIComponent(String(deltaId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				answerMonitoringDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {InlineObject17} inlineObject17
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		uploadCsvAnswer: async (
			deltaId: number,
			inlineObject17: InlineObject17,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'deltaId' is not null or undefined
			assertParamExists('uploadCsvAnswer', 'deltaId', deltaId);
			// verify required parameter 'inlineObject17' is not null or undefined
			assertParamExists('uploadCsvAnswer', 'inlineObject17', inlineObject17);
			const localVarPath =
				`/api/change-monitoring/upload-csv-answer/id/{deltaId}`.replace(
					`{${'deltaId'}}`,
					encodeURIComponent(String(deltaId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				inlineObject17,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * ChangeMonitoringControllerApi - functional programming interface
 * @export
 */
export const ChangeMonitoringControllerApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		ChangeMonitoringControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} deltaId
		 * @param {number} deltaFileId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteAnswer(
			deltaId: number,
			deltaFileId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAnswer(
				deltaId,
				deltaFileId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		async echo(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.echo(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {Array<number>} requestBody
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getCsvAnswer(
			deltaId: number,
			requestBody: Array<number>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getCsvAnswer(
				deltaId,
				requestBody,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {AnswerMonitoringDto} answer
		 * @param {Array<any>} files
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveAnswerWithFile(
			deltaId: number,
			answer: AnswerMonitoringDto,
			files: Array<any>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeltaDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.saveAnswerWithFile(
				deltaId,
				answer,
				files,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {AnswerFileAlreadyUploadedDto} answerFileAlreadyUploadedDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveAnswerWithFileAlreadyUploaded(
			deltaId: number,
			answerFileAlreadyUploadedDto: AnswerFileAlreadyUploadedDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeltaDto>> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.saveAnswerWithFileAlreadyUploaded(
					deltaId,
					answerFileAlreadyUploadedDto,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {AnswerMonitoringDto} answerMonitoringDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveAnswerWithoutFile(
			deltaId: number,
			answerMonitoringDto: AnswerMonitoringDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeltaDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.saveAnswerWithoutFile(
				deltaId,
				answerMonitoringDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {InlineObject17} inlineObject17
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async uploadCsvAnswer(
			deltaId: number,
			inlineObject17: InlineObject17,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.uploadCsvAnswer(
				deltaId,
				inlineObject17,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * ChangeMonitoringControllerApi - factory interface
 * @export
 */
export const ChangeMonitoringControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = ChangeMonitoringControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} deltaId
		 * @param {number} deltaFileId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteAnswer(
			deltaId: number,
			deltaFileId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.deleteAnswer(deltaId, deltaFileId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @deprecated
		 * @throws {RequiredError}
		 */
		echo(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.echo(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {Array<number>} requestBody
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getCsvAnswer(
			deltaId: number,
			requestBody: Array<number>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<object> {
			return localVarFp
				.getCsvAnswer(deltaId, requestBody, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {AnswerMonitoringDto} answer
		 * @param {Array<any>} files
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveAnswerWithFile(
			deltaId: number,
			answer: AnswerMonitoringDto,
			files: Array<any>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<DeltaDto> {
			return localVarFp
				.saveAnswerWithFile(deltaId, answer, files, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {AnswerFileAlreadyUploadedDto} answerFileAlreadyUploadedDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveAnswerWithFileAlreadyUploaded(
			deltaId: number,
			answerFileAlreadyUploadedDto: AnswerFileAlreadyUploadedDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<DeltaDto> {
			return localVarFp
				.saveAnswerWithFileAlreadyUploaded(
					deltaId,
					answerFileAlreadyUploadedDto,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {AnswerMonitoringDto} answerMonitoringDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveAnswerWithoutFile(
			deltaId: number,
			answerMonitoringDto: AnswerMonitoringDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<DeltaDto> {
			return localVarFp
				.saveAnswerWithoutFile(deltaId, answerMonitoringDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} deltaId
		 * @param {InlineObject17} inlineObject17
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		uploadCsvAnswer(
			deltaId: number,
			inlineObject17: InlineObject17,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.uploadCsvAnswer(deltaId, inlineObject17, acceptLanguage, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for deleteAnswer operation in ChangeMonitoringControllerApi.
 * @export
 * @interface ChangeMonitoringControllerApiDeleteAnswerRequest
 */
export interface ChangeMonitoringControllerApiDeleteAnswerRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ChangeMonitoringControllerApiDeleteAnswer
	 */
	readonly deltaId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ChangeMonitoringControllerApiDeleteAnswer
	 */
	readonly deltaFileId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ChangeMonitoringControllerApiDeleteAnswer
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for echo operation in ChangeMonitoringControllerApi.
 * @export
 * @interface ChangeMonitoringControllerApiEchoRequest
 */
export interface ChangeMonitoringControllerApiEchoRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ChangeMonitoringControllerApiEcho
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getCsvAnswer operation in ChangeMonitoringControllerApi.
 * @export
 * @interface ChangeMonitoringControllerApiGetCsvAnswerRequest
 */
export interface ChangeMonitoringControllerApiGetCsvAnswerRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ChangeMonitoringControllerApiGetCsvAnswer
	 */
	readonly deltaId: number;

	/**
	 *
	 * @type {Array<number>}
	 * @memberof ChangeMonitoringControllerApiGetCsvAnswer
	 */
	readonly requestBody: Array<number>;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ChangeMonitoringControllerApiGetCsvAnswer
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for saveAnswerWithFile operation in ChangeMonitoringControllerApi.
 * @export
 * @interface ChangeMonitoringControllerApiSaveAnswerWithFileRequest
 */
export interface ChangeMonitoringControllerApiSaveAnswerWithFileRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ChangeMonitoringControllerApiSaveAnswerWithFile
	 */
	readonly deltaId: number;

	/**
	 *
	 * @type {AnswerMonitoringDto}
	 * @memberof ChangeMonitoringControllerApiSaveAnswerWithFile
	 */
	readonly answer: AnswerMonitoringDto;

	/**
	 *
	 * @type {Array<any>}
	 * @memberof ChangeMonitoringControllerApiSaveAnswerWithFile
	 */
	readonly files: Array<any>;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ChangeMonitoringControllerApiSaveAnswerWithFile
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for saveAnswerWithFileAlreadyUploaded operation in ChangeMonitoringControllerApi.
 * @export
 * @interface ChangeMonitoringControllerApiSaveAnswerWithFileAlreadyUploadedRequest
 */
export interface ChangeMonitoringControllerApiSaveAnswerWithFileAlreadyUploadedRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ChangeMonitoringControllerApiSaveAnswerWithFileAlreadyUploaded
	 */
	readonly deltaId: number;

	/**
	 *
	 * @type {AnswerFileAlreadyUploadedDto}
	 * @memberof ChangeMonitoringControllerApiSaveAnswerWithFileAlreadyUploaded
	 */
	readonly answerFileAlreadyUploadedDto: AnswerFileAlreadyUploadedDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ChangeMonitoringControllerApiSaveAnswerWithFileAlreadyUploaded
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for saveAnswerWithoutFile operation in ChangeMonitoringControllerApi.
 * @export
 * @interface ChangeMonitoringControllerApiSaveAnswerWithoutFileRequest
 */
export interface ChangeMonitoringControllerApiSaveAnswerWithoutFileRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ChangeMonitoringControllerApiSaveAnswerWithoutFile
	 */
	readonly deltaId: number;

	/**
	 *
	 * @type {AnswerMonitoringDto}
	 * @memberof ChangeMonitoringControllerApiSaveAnswerWithoutFile
	 */
	readonly answerMonitoringDto: AnswerMonitoringDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ChangeMonitoringControllerApiSaveAnswerWithoutFile
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for uploadCsvAnswer operation in ChangeMonitoringControllerApi.
 * @export
 * @interface ChangeMonitoringControllerApiUploadCsvAnswerRequest
 */
export interface ChangeMonitoringControllerApiUploadCsvAnswerRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ChangeMonitoringControllerApiUploadCsvAnswer
	 */
	readonly deltaId: number;

	/**
	 *
	 * @type {InlineObject17}
	 * @memberof ChangeMonitoringControllerApiUploadCsvAnswer
	 */
	readonly inlineObject17: InlineObject17;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ChangeMonitoringControllerApiUploadCsvAnswer
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * ChangeMonitoringControllerApi - object-oriented interface
 * @export
 * @class ChangeMonitoringControllerApi
 * @extends {BaseAPI}
 */
export class ChangeMonitoringControllerApi extends BaseAPI {
	/**
	 *
	 * @param {ChangeMonitoringControllerApiDeleteAnswerRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChangeMonitoringControllerApi
	 */
	public deleteAnswer(
		requestParameters: ChangeMonitoringControllerApiDeleteAnswerRequest,
		options?: AxiosRequestConfig
	) {
		return ChangeMonitoringControllerApiFp(this.configuration)
			.deleteAnswer(
				requestParameters.deltaId,
				requestParameters.deltaFileId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ChangeMonitoringControllerApiEchoRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @deprecated
	 * @throws {RequiredError}
	 * @memberof ChangeMonitoringControllerApi
	 */
	public echo(
		requestParameters: ChangeMonitoringControllerApiEchoRequest = {},
		options?: AxiosRequestConfig
	) {
		return ChangeMonitoringControllerApiFp(this.configuration)
			.echo(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ChangeMonitoringControllerApiGetCsvAnswerRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChangeMonitoringControllerApi
	 */
	public getCsvAnswer(
		requestParameters: ChangeMonitoringControllerApiGetCsvAnswerRequest,
		options?: AxiosRequestConfig
	) {
		return ChangeMonitoringControllerApiFp(this.configuration)
			.getCsvAnswer(
				requestParameters.deltaId,
				requestParameters.requestBody,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ChangeMonitoringControllerApiSaveAnswerWithFileRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChangeMonitoringControllerApi
	 */
	public saveAnswerWithFile(
		requestParameters: ChangeMonitoringControllerApiSaveAnswerWithFileRequest,
		options?: AxiosRequestConfig
	) {
		return ChangeMonitoringControllerApiFp(this.configuration)
			.saveAnswerWithFile(
				requestParameters.deltaId,
				requestParameters.answer,
				requestParameters.files,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ChangeMonitoringControllerApiSaveAnswerWithFileAlreadyUploadedRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChangeMonitoringControllerApi
	 */
	public saveAnswerWithFileAlreadyUploaded(
		requestParameters: ChangeMonitoringControllerApiSaveAnswerWithFileAlreadyUploadedRequest,
		options?: AxiosRequestConfig
	) {
		return ChangeMonitoringControllerApiFp(this.configuration)
			.saveAnswerWithFileAlreadyUploaded(
				requestParameters.deltaId,
				requestParameters.answerFileAlreadyUploadedDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ChangeMonitoringControllerApiSaveAnswerWithoutFileRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChangeMonitoringControllerApi
	 */
	public saveAnswerWithoutFile(
		requestParameters: ChangeMonitoringControllerApiSaveAnswerWithoutFileRequest,
		options?: AxiosRequestConfig
	) {
		return ChangeMonitoringControllerApiFp(this.configuration)
			.saveAnswerWithoutFile(
				requestParameters.deltaId,
				requestParameters.answerMonitoringDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ChangeMonitoringControllerApiUploadCsvAnswerRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ChangeMonitoringControllerApi
	 */
	public uploadCsvAnswer(
		requestParameters: ChangeMonitoringControllerApiUploadCsvAnswerRequest,
		options?: AxiosRequestConfig
	) {
		return ChangeMonitoringControllerApiFp(this.configuration)
			.uploadCsvAnswer(
				requestParameters.deltaId,
				requestParameters.inlineObject17,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}
}

/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { ApplicationDto } from '../models';
// @ts-ignore
import { FrameworkTreeDto } from '../models';
// @ts-ignore
import { InlineObject10 } from '../models';
// @ts-ignore
import { InlineObject12 } from '../models';
// @ts-ignore
import { InlineObject13 } from '../models';
// @ts-ignore
import { InlineObject7 } from '../models';
// @ts-ignore
import { InlineObject8 } from '../models';
// @ts-ignore
import { InlineObject9 } from '../models';
// @ts-ignore
import { ProcedureAppInstanceDto } from '../models';
// @ts-ignore
import { ProcedureDto } from '../models';
// @ts-ignore
import { UserDto } from '../models';
/**
 * CsvReaderControllerApi - axios parameter creator
 * @export
 */
export const CsvReaderControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {InlineObject13} inlineObject13
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addApplicationDetailsFromCSV: async (
			inlineObject13: InlineObject13,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'inlineObject13' is not null or undefined
			assertParamExists('addApplicationDetailsFromCSV', 'inlineObject13', inlineObject13);
			const localVarPath = `/api/importcsv/applicationsDetInfo`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				inlineObject13,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {InlineObject12} inlineObject12
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addApplicationFromCSV: async (
			inlineObject12: InlineObject12,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'inlineObject12' is not null or undefined
			assertParamExists('addApplicationFromCSV', 'inlineObject12', inlineObject12);
			const localVarPath = `/api/importcsv/applications`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				inlineObject12,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {any} file
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFramework: async (
			file: any,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'file' is not null or undefined
			assertParamExists('addFramework', 'file', file);
			const localVarPath = `/api/importcsv/framework`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;
			const localVarFormParams = new ((configuration && configuration.formDataCtor) ||
				FormData)();

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			if (file !== undefined) {
				localVarFormParams.append('file', file as any);
			}

			localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = localVarFormParams;

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {InlineObject9} inlineObject9
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addProcedureAppInstancesFromCSV: async (
			inlineObject9: InlineObject9,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'inlineObject9' is not null or undefined
			assertParamExists(
				'addProcedureAppInstancesFromCSV',
				'inlineObject9',
				inlineObject9
			);
			const localVarPath = `/api/importcsv/procedureAppInstances`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				inlineObject9,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {InlineObject8} inlineObject8
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addProceduresFromCSV: async (
			inlineObject8: InlineObject8,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'inlineObject8' is not null or undefined
			assertParamExists('addProceduresFromCSV', 'inlineObject8', inlineObject8);
			const localVarPath = `/api/importcsv/procedures`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				inlineObject8,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {InlineObject7} inlineObject7
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addUsersFromCSV: async (
			inlineObject7: InlineObject7,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'inlineObject7' is not null or undefined
			assertParamExists('addUsersFromCSV', 'inlineObject7', inlineObject7);
			const localVarPath = `/api/importcsv/users`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				inlineObject7,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {InlineObject10} inlineObject10
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addUsersWithoutProfilesFromCSV: async (
			inlineObject10: InlineObject10,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'inlineObject10' is not null or undefined
			assertParamExists(
				'addUsersWithoutProfilesFromCSV',
				'inlineObject10',
				inlineObject10
			);
			const localVarPath = `/api/importcsv/onlyUsers`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				inlineObject10,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * CsvReaderControllerApi - functional programming interface
 * @export
 */
export const CsvReaderControllerApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		CsvReaderControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {InlineObject13} inlineObject13
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addApplicationDetailsFromCSV(
			inlineObject13: InlineObject13,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationDto>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.addApplicationDetailsFromCSV(
					inlineObject13,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {InlineObject12} inlineObject12
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addApplicationFromCSV(
			inlineObject12: InlineObject12,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApplicationDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addApplicationFromCSV(
				inlineObject12,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {any} file
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addFramework(
			file: any,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrameworkTreeDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addFramework(
				file,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {InlineObject9} inlineObject9
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addProcedureAppInstancesFromCSV(
			inlineObject9: InlineObject9,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<ProcedureAppInstanceDto>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.addProcedureAppInstancesFromCSV(
					inlineObject9,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {InlineObject8} inlineObject8
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addProceduresFromCSV(
			inlineObject8: InlineObject8,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProcedureDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addProceduresFromCSV(
				inlineObject8,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {InlineObject7} inlineObject7
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addUsersFromCSV(
			inlineObject7: InlineObject7,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addUsersFromCSV(
				inlineObject7,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {InlineObject10} inlineObject10
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addUsersWithoutProfilesFromCSV(
			inlineObject10: InlineObject10,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDto>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.addUsersWithoutProfilesFromCSV(
					inlineObject10,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * CsvReaderControllerApi - factory interface
 * @export
 */
export const CsvReaderControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = CsvReaderControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {InlineObject13} inlineObject13
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addApplicationDetailsFromCSV(
			inlineObject13: InlineObject13,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ApplicationDto>> {
			return localVarFp
				.addApplicationDetailsFromCSV(inlineObject13, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {InlineObject12} inlineObject12
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addApplicationFromCSV(
			inlineObject12: InlineObject12,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ApplicationDto>> {
			return localVarFp
				.addApplicationFromCSV(inlineObject12, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {any} file
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addFramework(
			file: any,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<FrameworkTreeDto> {
			return localVarFp
				.addFramework(file, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {InlineObject9} inlineObject9
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addProcedureAppInstancesFromCSV(
			inlineObject9: InlineObject9,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ProcedureAppInstanceDto>> {
			return localVarFp
				.addProcedureAppInstancesFromCSV(inlineObject9, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {InlineObject8} inlineObject8
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addProceduresFromCSV(
			inlineObject8: InlineObject8,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ProcedureDto>> {
			return localVarFp
				.addProceduresFromCSV(inlineObject8, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {InlineObject7} inlineObject7
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addUsersFromCSV(
			inlineObject7: InlineObject7,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<UserDto>> {
			return localVarFp
				.addUsersFromCSV(inlineObject7, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {InlineObject10} inlineObject10
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addUsersWithoutProfilesFromCSV(
			inlineObject10: InlineObject10,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<UserDto>> {
			return localVarFp
				.addUsersWithoutProfilesFromCSV(inlineObject10, acceptLanguage, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for addApplicationDetailsFromCSV operation in CsvReaderControllerApi.
 * @export
 * @interface CsvReaderControllerApiAddApplicationDetailsFromCSVRequest
 */
export interface CsvReaderControllerApiAddApplicationDetailsFromCSVRequest {
	/**
	 *
	 * @type {InlineObject13}
	 * @memberof CsvReaderControllerApiAddApplicationDetailsFromCSV
	 */
	readonly inlineObject13: InlineObject13;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof CsvReaderControllerApiAddApplicationDetailsFromCSV
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for addApplicationFromCSV operation in CsvReaderControllerApi.
 * @export
 * @interface CsvReaderControllerApiAddApplicationFromCSVRequest
 */
export interface CsvReaderControllerApiAddApplicationFromCSVRequest {
	/**
	 *
	 * @type {InlineObject12}
	 * @memberof CsvReaderControllerApiAddApplicationFromCSV
	 */
	readonly inlineObject12: InlineObject12;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof CsvReaderControllerApiAddApplicationFromCSV
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for addFramework operation in CsvReaderControllerApi.
 * @export
 * @interface CsvReaderControllerApiAddFrameworkRequest
 */
export interface CsvReaderControllerApiAddFrameworkRequest {
	/**
	 *
	 * @type {any}
	 * @memberof CsvReaderControllerApiAddFramework
	 */
	readonly file: any;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof CsvReaderControllerApiAddFramework
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for addProcedureAppInstancesFromCSV operation in CsvReaderControllerApi.
 * @export
 * @interface CsvReaderControllerApiAddProcedureAppInstancesFromCSVRequest
 */
export interface CsvReaderControllerApiAddProcedureAppInstancesFromCSVRequest {
	/**
	 *
	 * @type {InlineObject9}
	 * @memberof CsvReaderControllerApiAddProcedureAppInstancesFromCSV
	 */
	readonly inlineObject9: InlineObject9;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof CsvReaderControllerApiAddProcedureAppInstancesFromCSV
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for addProceduresFromCSV operation in CsvReaderControllerApi.
 * @export
 * @interface CsvReaderControllerApiAddProceduresFromCSVRequest
 */
export interface CsvReaderControllerApiAddProceduresFromCSVRequest {
	/**
	 *
	 * @type {InlineObject8}
	 * @memberof CsvReaderControllerApiAddProceduresFromCSV
	 */
	readonly inlineObject8: InlineObject8;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof CsvReaderControllerApiAddProceduresFromCSV
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for addUsersFromCSV operation in CsvReaderControllerApi.
 * @export
 * @interface CsvReaderControllerApiAddUsersFromCSVRequest
 */
export interface CsvReaderControllerApiAddUsersFromCSVRequest {
	/**
	 *
	 * @type {InlineObject7}
	 * @memberof CsvReaderControllerApiAddUsersFromCSV
	 */
	readonly inlineObject7: InlineObject7;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof CsvReaderControllerApiAddUsersFromCSV
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for addUsersWithoutProfilesFromCSV operation in CsvReaderControllerApi.
 * @export
 * @interface CsvReaderControllerApiAddUsersWithoutProfilesFromCSVRequest
 */
export interface CsvReaderControllerApiAddUsersWithoutProfilesFromCSVRequest {
	/**
	 *
	 * @type {InlineObject10}
	 * @memberof CsvReaderControllerApiAddUsersWithoutProfilesFromCSV
	 */
	readonly inlineObject10: InlineObject10;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof CsvReaderControllerApiAddUsersWithoutProfilesFromCSV
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * CsvReaderControllerApi - object-oriented interface
 * @export
 * @class CsvReaderControllerApi
 * @extends {BaseAPI}
 */
export class CsvReaderControllerApi extends BaseAPI {
	/**
	 *
	 * @param {CsvReaderControllerApiAddApplicationDetailsFromCSVRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CsvReaderControllerApi
	 */
	public addApplicationDetailsFromCSV(
		requestParameters: CsvReaderControllerApiAddApplicationDetailsFromCSVRequest,
		options?: AxiosRequestConfig
	) {
		return CsvReaderControllerApiFp(this.configuration)
			.addApplicationDetailsFromCSV(
				requestParameters.inlineObject13,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CsvReaderControllerApiAddApplicationFromCSVRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CsvReaderControllerApi
	 */
	public addApplicationFromCSV(
		requestParameters: CsvReaderControllerApiAddApplicationFromCSVRequest,
		options?: AxiosRequestConfig
	) {
		return CsvReaderControllerApiFp(this.configuration)
			.addApplicationFromCSV(
				requestParameters.inlineObject12,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CsvReaderControllerApiAddFrameworkRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CsvReaderControllerApi
	 */
	public addFramework(
		requestParameters: CsvReaderControllerApiAddFrameworkRequest,
		options?: AxiosRequestConfig
	) {
		return CsvReaderControllerApiFp(this.configuration)
			.addFramework(requestParameters.file, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CsvReaderControllerApiAddProcedureAppInstancesFromCSVRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CsvReaderControllerApi
	 */
	public addProcedureAppInstancesFromCSV(
		requestParameters: CsvReaderControllerApiAddProcedureAppInstancesFromCSVRequest,
		options?: AxiosRequestConfig
	) {
		return CsvReaderControllerApiFp(this.configuration)
			.addProcedureAppInstancesFromCSV(
				requestParameters.inlineObject9,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CsvReaderControllerApiAddProceduresFromCSVRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CsvReaderControllerApi
	 */
	public addProceduresFromCSV(
		requestParameters: CsvReaderControllerApiAddProceduresFromCSVRequest,
		options?: AxiosRequestConfig
	) {
		return CsvReaderControllerApiFp(this.configuration)
			.addProceduresFromCSV(
				requestParameters.inlineObject8,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CsvReaderControllerApiAddUsersFromCSVRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CsvReaderControllerApi
	 */
	public addUsersFromCSV(
		requestParameters: CsvReaderControllerApiAddUsersFromCSVRequest,
		options?: AxiosRequestConfig
	) {
		return CsvReaderControllerApiFp(this.configuration)
			.addUsersFromCSV(
				requestParameters.inlineObject7,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {CsvReaderControllerApiAddUsersWithoutProfilesFromCSVRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof CsvReaderControllerApi
	 */
	public addUsersWithoutProfilesFromCSV(
		requestParameters: CsvReaderControllerApiAddUsersWithoutProfilesFromCSVRequest,
		options?: AxiosRequestConfig
	) {
		return CsvReaderControllerApiFp(this.configuration)
			.addUsersWithoutProfilesFromCSV(
				requestParameters.inlineObject10,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}
}

/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { DocumentTemplateDto } from '../models';
// @ts-ignore
import { PageDocumentTemplateDto } from '../models';
/**
 * DocumentTemplateControllerApi - axios parameter creator
 * @export
 */
export const DocumentTemplateControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {DocumentTemplateDto} documentTemplateDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createDocumentTemplate: async (
			documentTemplateDto: DocumentTemplateDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'documentTemplateDto' is not null or undefined
			assertParamExists(
				'createDocumentTemplate',
				'documentTemplateDto',
				documentTemplateDto
			);
			const localVarPath = `/api/document-templates/add`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				documentTemplateDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteDocumentTemplate: async (
			id: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('deleteDocumentTemplate', 'id', id);
			const localVarPath = `/api/document-templates/{id}`.replace(
				`{${'id'}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} [page] Zero-based page index (0..N)
		 * @param {number} [size] The size of the page to be returned
		 * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllDocumentTemplates: async (
			page?: number,
			size?: number,
			sort?: Array<string>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/document-templates/all`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (page !== undefined) {
				localVarQueryParameter['page'] = page;
			}

			if (size !== undefined) {
				localVarQueryParameter['size'] = size;
			}

			if (sort) {
				localVarQueryParameter['sort'] = sort;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {DocumentTemplateDto} documentTemplateDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateDocumentTemplate: async (
			id: number,
			documentTemplateDto: DocumentTemplateDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('updateDocumentTemplate', 'id', id);
			// verify required parameter 'documentTemplateDto' is not null or undefined
			assertParamExists(
				'updateDocumentTemplate',
				'documentTemplateDto',
				documentTemplateDto
			);
			const localVarPath = `/api/document-templates/{id}`.replace(
				`{${'id'}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				documentTemplateDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * DocumentTemplateControllerApi - functional programming interface
 * @export
 */
export const DocumentTemplateControllerApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator =
		DocumentTemplateControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {DocumentTemplateDto} documentTemplateDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async createDocumentTemplate(
			documentTemplateDto: DocumentTemplateDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.createDocumentTemplate(
				documentTemplateDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} id
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteDocumentTemplate(
			id: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDocumentTemplate(
				id,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} [page] Zero-based page index (0..N)
		 * @param {number} [size] The size of the page to be returned
		 * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllDocumentTemplates(
			page?: number,
			size?: number,
			sort?: Array<string>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageDocumentTemplateDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDocumentTemplates(
				page,
				size,
				sort,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} id
		 * @param {DocumentTemplateDto} documentTemplateDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async updateDocumentTemplate(
			id: number,
			documentTemplateDto: DocumentTemplateDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTemplateDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.updateDocumentTemplate(
				id,
				documentTemplateDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * DocumentTemplateControllerApi - factory interface
 * @export
 */
export const DocumentTemplateControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = DocumentTemplateControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {DocumentTemplateDto} documentTemplateDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		createDocumentTemplate(
			documentTemplateDto: DocumentTemplateDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<void> {
			return localVarFp
				.createDocumentTemplate(documentTemplateDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteDocumentTemplate(
			id: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.deleteDocumentTemplate(id, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} [page] Zero-based page index (0..N)
		 * @param {number} [size] The size of the page to be returned
		 * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllDocumentTemplates(
			page?: number,
			size?: number,
			sort?: Array<string>,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<PageDocumentTemplateDto> {
			return localVarFp
				.getAllDocumentTemplates(page, size, sort, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {DocumentTemplateDto} documentTemplateDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		updateDocumentTemplate(
			id: number,
			documentTemplateDto: DocumentTemplateDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<DocumentTemplateDto> {
			return localVarFp
				.updateDocumentTemplate(id, documentTemplateDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for createDocumentTemplate operation in DocumentTemplateControllerApi.
 * @export
 * @interface DocumentTemplateControllerApiCreateDocumentTemplateRequest
 */
export interface DocumentTemplateControllerApiCreateDocumentTemplateRequest {
	/**
	 *
	 * @type {DocumentTemplateDto}
	 * @memberof DocumentTemplateControllerApiCreateDocumentTemplate
	 */
	readonly documentTemplateDto: DocumentTemplateDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof DocumentTemplateControllerApiCreateDocumentTemplate
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for deleteDocumentTemplate operation in DocumentTemplateControllerApi.
 * @export
 * @interface DocumentTemplateControllerApiDeleteDocumentTemplateRequest
 */
export interface DocumentTemplateControllerApiDeleteDocumentTemplateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof DocumentTemplateControllerApiDeleteDocumentTemplate
	 */
	readonly id: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof DocumentTemplateControllerApiDeleteDocumentTemplate
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllDocumentTemplates operation in DocumentTemplateControllerApi.
 * @export
 * @interface DocumentTemplateControllerApiGetAllDocumentTemplatesRequest
 */
export interface DocumentTemplateControllerApiGetAllDocumentTemplatesRequest {
	/**
	 * Zero-based page index (0..N)
	 * @type {number}
	 * @memberof DocumentTemplateControllerApiGetAllDocumentTemplates
	 */
	readonly page?: number;

	/**
	 * The size of the page to be returned
	 * @type {number}
	 * @memberof DocumentTemplateControllerApiGetAllDocumentTemplates
	 */
	readonly size?: number;

	/**
	 * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
	 * @type {Array<string>}
	 * @memberof DocumentTemplateControllerApiGetAllDocumentTemplates
	 */
	readonly sort?: Array<string>;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof DocumentTemplateControllerApiGetAllDocumentTemplates
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for updateDocumentTemplate operation in DocumentTemplateControllerApi.
 * @export
 * @interface DocumentTemplateControllerApiUpdateDocumentTemplateRequest
 */
export interface DocumentTemplateControllerApiUpdateDocumentTemplateRequest {
	/**
	 *
	 * @type {number}
	 * @memberof DocumentTemplateControllerApiUpdateDocumentTemplate
	 */
	readonly id: number;

	/**
	 *
	 * @type {DocumentTemplateDto}
	 * @memberof DocumentTemplateControllerApiUpdateDocumentTemplate
	 */
	readonly documentTemplateDto: DocumentTemplateDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof DocumentTemplateControllerApiUpdateDocumentTemplate
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * DocumentTemplateControllerApi - object-oriented interface
 * @export
 * @class DocumentTemplateControllerApi
 * @extends {BaseAPI}
 */
export class DocumentTemplateControllerApi extends BaseAPI {
	/**
	 *
	 * @param {DocumentTemplateControllerApiCreateDocumentTemplateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DocumentTemplateControllerApi
	 */
	public createDocumentTemplate(
		requestParameters: DocumentTemplateControllerApiCreateDocumentTemplateRequest,
		options?: AxiosRequestConfig
	) {
		return DocumentTemplateControllerApiFp(this.configuration)
			.createDocumentTemplate(
				requestParameters.documentTemplateDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DocumentTemplateControllerApiDeleteDocumentTemplateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DocumentTemplateControllerApi
	 */
	public deleteDocumentTemplate(
		requestParameters: DocumentTemplateControllerApiDeleteDocumentTemplateRequest,
		options?: AxiosRequestConfig
	) {
		return DocumentTemplateControllerApiFp(this.configuration)
			.deleteDocumentTemplate(
				requestParameters.id,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DocumentTemplateControllerApiGetAllDocumentTemplatesRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DocumentTemplateControllerApi
	 */
	public getAllDocumentTemplates(
		requestParameters: DocumentTemplateControllerApiGetAllDocumentTemplatesRequest = {},
		options?: AxiosRequestConfig
	) {
		return DocumentTemplateControllerApiFp(this.configuration)
			.getAllDocumentTemplates(
				requestParameters.page,
				requestParameters.size,
				requestParameters.sort,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {DocumentTemplateControllerApiUpdateDocumentTemplateRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof DocumentTemplateControllerApi
	 */
	public updateDocumentTemplate(
		requestParameters: DocumentTemplateControllerApiUpdateDocumentTemplateRequest,
		options?: AxiosRequestConfig
	) {
		return DocumentTemplateControllerApiFp(this.configuration)
			.updateDocumentTemplate(
				requestParameters.id,
				requestParameters.documentTemplateDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}
}

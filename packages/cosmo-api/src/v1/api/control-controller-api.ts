/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { Control } from '../models';
// @ts-ignore
import { ControlAppInstance } from '../models';
// @ts-ignore
import { ControlAppInstanceKey } from '../models';
/**
 * ControlControllerApi - axios parameter creator
 * @export
 */
export const ControlControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {number} controlId
		 * @param {number} applicationId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addApplicationToControl: async (
			controlId: number,
			applicationId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'controlId' is not null or undefined
			assertParamExists('addApplicationToControl', 'controlId', controlId);
			// verify required parameter 'applicationId' is not null or undefined
			assertParamExists('addApplicationToControl', 'applicationId', applicationId);
			const localVarPath = `/api/controls/{controlId}/applications}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (controlId !== undefined) {
				localVarQueryParameter['controlId'] = controlId;
			}

			if (applicationId !== undefined) {
				localVarQueryParameter['applicationId'] = applicationId;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteControl: async (
			id: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('deleteControl', 'id', id);
			const localVarPath = `/api/controls/{id}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (id !== undefined) {
				localVarQueryParameter['id'] = id;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} controlId
		 * @param {number} applicationId
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteControlApplicationAssociation: async (
			controlId: number,
			applicationId: number,
			controlAppInstanceKey: ControlAppInstanceKey,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'controlId' is not null or undefined
			assertParamExists('deleteControlApplicationAssociation', 'controlId', controlId);
			// verify required parameter 'applicationId' is not null or undefined
			assertParamExists(
				'deleteControlApplicationAssociation',
				'applicationId',
				applicationId
			);
			// verify required parameter 'controlAppInstanceKey' is not null or undefined
			assertParamExists(
				'deleteControlApplicationAssociation',
				'controlAppInstanceKey',
				controlAppInstanceKey
			);
			const localVarPath = `/api/controls/{controlId}/applications/{applicationId}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (controlId !== undefined) {
				localVarQueryParameter['controlId'] = controlId;
			}

			if (applicationId !== undefined) {
				localVarQueryParameter['applicationId'] = applicationId;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				controlAppInstanceKey,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} controlId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplicationForControl: async (
			controlId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'controlId' is not null or undefined
			assertParamExists('getAllApplicationForControl', 'controlId', controlId);
			const localVarPath = `/api/controls/{controlId}/applications`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (controlId !== undefined) {
				localVarQueryParameter['controlId'] = controlId;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllControls: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/controls`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getControlById: async (
			id: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('getControlById', 'id', id);
			const localVarPath = `/api/controls/{id}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (id !== undefined) {
				localVarQueryParameter['id'] = id;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} controlId
		 * @param {number} applicationId
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getSpecificControlAppInstance: async (
			controlId: number,
			applicationId: number,
			controlAppInstanceKey: ControlAppInstanceKey,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'controlId' is not null or undefined
			assertParamExists('getSpecificControlAppInstance', 'controlId', controlId);
			// verify required parameter 'applicationId' is not null or undefined
			assertParamExists('getSpecificControlAppInstance', 'applicationId', applicationId);
			// verify required parameter 'controlAppInstanceKey' is not null or undefined
			assertParamExists(
				'getSpecificControlAppInstance',
				'controlAppInstanceKey',
				controlAppInstanceKey
			);
			const localVarPath = `/api/controls/{controlId}/applications/{applicationId}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (controlId !== undefined) {
				localVarQueryParameter['controlId'] = controlId;
			}

			if (applicationId !== undefined) {
				localVarQueryParameter['applicationId'] = applicationId;
			}

			if (controlAppInstanceKey !== undefined) {
				localVarQueryParameter['controlAppInstanceKey'] = controlAppInstanceKey;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} controlId
		 * @param {number} applicationId
		 * @param {ControlAppInstance} controlAppInstance
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyApplicationToControl: async (
			controlId: number,
			applicationId: number,
			controlAppInstance: ControlAppInstance,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'controlId' is not null or undefined
			assertParamExists('modifyApplicationToControl', 'controlId', controlId);
			// verify required parameter 'applicationId' is not null or undefined
			assertParamExists('modifyApplicationToControl', 'applicationId', applicationId);
			// verify required parameter 'controlAppInstance' is not null or undefined
			assertParamExists(
				'modifyApplicationToControl',
				'controlAppInstance',
				controlAppInstance
			);
			const localVarPath = `/api/controls/{controlId}/applications/{applicationId}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (controlId !== undefined) {
				localVarQueryParameter['controlId'] = controlId;
			}

			if (applicationId !== undefined) {
				localVarQueryParameter['applicationId'] = applicationId;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				controlAppInstance,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {Control} control
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyControl: async (
			id: number,
			control: Control,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('modifyControl', 'id', id);
			// verify required parameter 'control' is not null or undefined
			assertParamExists('modifyControl', 'control', control);
			const localVarPath = `/api/controls/{id}`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (id !== undefined) {
				localVarQueryParameter['id'] = id;
			}

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				control,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {Control} control
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		newControl: async (
			control: Control,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'control' is not null or undefined
			assertParamExists('newControl', 'control', control);
			const localVarPath = `/api/controls`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				control,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * ControlControllerApi - functional programming interface
 * @export
 */
export const ControlControllerApiFp = function (configuration?: Configuration) {
	const localVarAxiosParamCreator = ControlControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {number} controlId
		 * @param {number} applicationId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addApplicationToControl(
			controlId: number,
			applicationId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlAppInstance>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addApplicationToControl(
				controlId,
				applicationId,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} id
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteControl(
			id: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.deleteControl(
				id,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} controlId
		 * @param {number} applicationId
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async deleteControlApplicationAssociation(
			controlId: number,
			applicationId: number,
			controlAppInstanceKey: ControlAppInstanceKey,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.deleteControlApplicationAssociation(
					controlId,
					applicationId,
					controlAppInstanceKey,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} controlId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllApplicationForControl(
			controlId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<ControlAppInstance>>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getAllApplicationForControl(
					controlId,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllControls(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Control>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllControls(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} id
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getControlById(
			id: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Control>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getControlById(
				id,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} controlId
		 * @param {number} applicationId
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getSpecificControlAppInstance(
			controlId: number,
			applicationId: number,
			controlAppInstanceKey: ControlAppInstanceKey,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlAppInstance>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.getSpecificControlAppInstance(
					controlId,
					applicationId,
					controlAppInstanceKey,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} controlId
		 * @param {number} applicationId
		 * @param {ControlAppInstance} controlAppInstance
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async modifyApplicationToControl(
			controlId: number,
			applicationId: number,
			controlAppInstance: ControlAppInstance,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlAppInstance>
		> {
			const localVarAxiosArgs =
				await localVarAxiosParamCreator.modifyApplicationToControl(
					controlId,
					applicationId,
					controlAppInstance,
					acceptLanguage,
					options
				);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} id
		 * @param {Control} control
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async modifyControl(
			id: number,
			control: Control,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Control>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.modifyControl(
				id,
				control,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {Control} control
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async newControl(
			control: Control,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Control>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.newControl(
				control,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * ControlControllerApi - factory interface
 * @export
 */
export const ControlControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = ControlControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {number} controlId
		 * @param {number} applicationId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addApplicationToControl(
			controlId: number,
			applicationId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ControlAppInstance> {
			return localVarFp
				.addApplicationToControl(controlId, applicationId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteControl(
			id: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.deleteControl(id, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} controlId
		 * @param {number} applicationId
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		deleteControlApplicationAssociation(
			controlId: number,
			applicationId: number,
			controlAppInstanceKey: ControlAppInstanceKey,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<string> {
			return localVarFp
				.deleteControlApplicationAssociation(
					controlId,
					applicationId,
					controlAppInstanceKey,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} controlId
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllApplicationForControl(
			controlId: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<ControlAppInstance>> {
			return localVarFp
				.getAllApplicationForControl(controlId, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllControls(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<Control>> {
			return localVarFp
				.getAllControls(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getControlById(
			id: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Control> {
			return localVarFp
				.getControlById(id, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} controlId
		 * @param {number} applicationId
		 * @param {ControlAppInstanceKey} controlAppInstanceKey
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getSpecificControlAppInstance(
			controlId: number,
			applicationId: number,
			controlAppInstanceKey: ControlAppInstanceKey,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ControlAppInstance> {
			return localVarFp
				.getSpecificControlAppInstance(
					controlId,
					applicationId,
					controlAppInstanceKey,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} controlId
		 * @param {number} applicationId
		 * @param {ControlAppInstance} controlAppInstance
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyApplicationToControl(
			controlId: number,
			applicationId: number,
			controlAppInstance: ControlAppInstance,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<ControlAppInstance> {
			return localVarFp
				.modifyApplicationToControl(
					controlId,
					applicationId,
					controlAppInstance,
					acceptLanguage,
					options
				)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {Control} control
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		modifyControl(
			id: number,
			control: Control,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Control> {
			return localVarFp
				.modifyControl(id, control, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {Control} control
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		newControl(
			control: Control,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Control> {
			return localVarFp
				.newControl(control, acceptLanguage, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for addApplicationToControl operation in ControlControllerApi.
 * @export
 * @interface ControlControllerApiAddApplicationToControlRequest
 */
export interface ControlControllerApiAddApplicationToControlRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ControlControllerApiAddApplicationToControl
	 */
	readonly controlId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ControlControllerApiAddApplicationToControl
	 */
	readonly applicationId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ControlControllerApiAddApplicationToControl
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for deleteControl operation in ControlControllerApi.
 * @export
 * @interface ControlControllerApiDeleteControlRequest
 */
export interface ControlControllerApiDeleteControlRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ControlControllerApiDeleteControl
	 */
	readonly id: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ControlControllerApiDeleteControl
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for deleteControlApplicationAssociation operation in ControlControllerApi.
 * @export
 * @interface ControlControllerApiDeleteControlApplicationAssociationRequest
 */
export interface ControlControllerApiDeleteControlApplicationAssociationRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ControlControllerApiDeleteControlApplicationAssociation
	 */
	readonly controlId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ControlControllerApiDeleteControlApplicationAssociation
	 */
	readonly applicationId: number;

	/**
	 *
	 * @type {ControlAppInstanceKey}
	 * @memberof ControlControllerApiDeleteControlApplicationAssociation
	 */
	readonly controlAppInstanceKey: ControlAppInstanceKey;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ControlControllerApiDeleteControlApplicationAssociation
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllApplicationForControl operation in ControlControllerApi.
 * @export
 * @interface ControlControllerApiGetAllApplicationForControlRequest
 */
export interface ControlControllerApiGetAllApplicationForControlRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ControlControllerApiGetAllApplicationForControl
	 */
	readonly controlId: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ControlControllerApiGetAllApplicationForControl
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getAllControls operation in ControlControllerApi.
 * @export
 * @interface ControlControllerApiGetAllControlsRequest
 */
export interface ControlControllerApiGetAllControlsRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ControlControllerApiGetAllControls
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getControlById operation in ControlControllerApi.
 * @export
 * @interface ControlControllerApiGetControlByIdRequest
 */
export interface ControlControllerApiGetControlByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ControlControllerApiGetControlById
	 */
	readonly id: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ControlControllerApiGetControlById
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getSpecificControlAppInstance operation in ControlControllerApi.
 * @export
 * @interface ControlControllerApiGetSpecificControlAppInstanceRequest
 */
export interface ControlControllerApiGetSpecificControlAppInstanceRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ControlControllerApiGetSpecificControlAppInstance
	 */
	readonly controlId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ControlControllerApiGetSpecificControlAppInstance
	 */
	readonly applicationId: number;

	/**
	 *
	 * @type {ControlAppInstanceKey}
	 * @memberof ControlControllerApiGetSpecificControlAppInstance
	 */
	readonly controlAppInstanceKey: ControlAppInstanceKey;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ControlControllerApiGetSpecificControlAppInstance
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for modifyApplicationToControl operation in ControlControllerApi.
 * @export
 * @interface ControlControllerApiModifyApplicationToControlRequest
 */
export interface ControlControllerApiModifyApplicationToControlRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ControlControllerApiModifyApplicationToControl
	 */
	readonly controlId: number;

	/**
	 *
	 * @type {number}
	 * @memberof ControlControllerApiModifyApplicationToControl
	 */
	readonly applicationId: number;

	/**
	 *
	 * @type {ControlAppInstance}
	 * @memberof ControlControllerApiModifyApplicationToControl
	 */
	readonly controlAppInstance: ControlAppInstance;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ControlControllerApiModifyApplicationToControl
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for modifyControl operation in ControlControllerApi.
 * @export
 * @interface ControlControllerApiModifyControlRequest
 */
export interface ControlControllerApiModifyControlRequest {
	/**
	 *
	 * @type {number}
	 * @memberof ControlControllerApiModifyControl
	 */
	readonly id: number;

	/**
	 *
	 * @type {Control}
	 * @memberof ControlControllerApiModifyControl
	 */
	readonly control: Control;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ControlControllerApiModifyControl
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for newControl operation in ControlControllerApi.
 * @export
 * @interface ControlControllerApiNewControlRequest
 */
export interface ControlControllerApiNewControlRequest {
	/**
	 *
	 * @type {Control}
	 * @memberof ControlControllerApiNewControl
	 */
	readonly control: Control;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof ControlControllerApiNewControl
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * ControlControllerApi - object-oriented interface
 * @export
 * @class ControlControllerApi
 * @extends {BaseAPI}
 */
export class ControlControllerApi extends BaseAPI {
	/**
	 *
	 * @param {ControlControllerApiAddApplicationToControlRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ControlControllerApi
	 */
	public addApplicationToControl(
		requestParameters: ControlControllerApiAddApplicationToControlRequest,
		options?: AxiosRequestConfig
	) {
		return ControlControllerApiFp(this.configuration)
			.addApplicationToControl(
				requestParameters.controlId,
				requestParameters.applicationId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ControlControllerApiDeleteControlRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ControlControllerApi
	 */
	public deleteControl(
		requestParameters: ControlControllerApiDeleteControlRequest,
		options?: AxiosRequestConfig
	) {
		return ControlControllerApiFp(this.configuration)
			.deleteControl(requestParameters.id, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ControlControllerApiDeleteControlApplicationAssociationRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ControlControllerApi
	 */
	public deleteControlApplicationAssociation(
		requestParameters: ControlControllerApiDeleteControlApplicationAssociationRequest,
		options?: AxiosRequestConfig
	) {
		return ControlControllerApiFp(this.configuration)
			.deleteControlApplicationAssociation(
				requestParameters.controlId,
				requestParameters.applicationId,
				requestParameters.controlAppInstanceKey,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ControlControllerApiGetAllApplicationForControlRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ControlControllerApi
	 */
	public getAllApplicationForControl(
		requestParameters: ControlControllerApiGetAllApplicationForControlRequest,
		options?: AxiosRequestConfig
	) {
		return ControlControllerApiFp(this.configuration)
			.getAllApplicationForControl(
				requestParameters.controlId,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ControlControllerApiGetAllControlsRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ControlControllerApi
	 */
	public getAllControls(
		requestParameters: ControlControllerApiGetAllControlsRequest = {},
		options?: AxiosRequestConfig
	) {
		return ControlControllerApiFp(this.configuration)
			.getAllControls(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ControlControllerApiGetControlByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ControlControllerApi
	 */
	public getControlById(
		requestParameters: ControlControllerApiGetControlByIdRequest,
		options?: AxiosRequestConfig
	) {
		return ControlControllerApiFp(this.configuration)
			.getControlById(requestParameters.id, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ControlControllerApiGetSpecificControlAppInstanceRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ControlControllerApi
	 */
	public getSpecificControlAppInstance(
		requestParameters: ControlControllerApiGetSpecificControlAppInstanceRequest,
		options?: AxiosRequestConfig
	) {
		return ControlControllerApiFp(this.configuration)
			.getSpecificControlAppInstance(
				requestParameters.controlId,
				requestParameters.applicationId,
				requestParameters.controlAppInstanceKey,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ControlControllerApiModifyApplicationToControlRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ControlControllerApi
	 */
	public modifyApplicationToControl(
		requestParameters: ControlControllerApiModifyApplicationToControlRequest,
		options?: AxiosRequestConfig
	) {
		return ControlControllerApiFp(this.configuration)
			.modifyApplicationToControl(
				requestParameters.controlId,
				requestParameters.applicationId,
				requestParameters.controlAppInstance,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ControlControllerApiModifyControlRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ControlControllerApi
	 */
	public modifyControl(
		requestParameters: ControlControllerApiModifyControlRequest,
		options?: AxiosRequestConfig
	) {
		return ControlControllerApiFp(this.configuration)
			.modifyControl(
				requestParameters.id,
				requestParameters.control,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {ControlControllerApiNewControlRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ControlControllerApi
	 */
	public newControl(
		requestParameters: ControlControllerApiNewControlRequest,
		options?: AxiosRequestConfig
	) {
		return ControlControllerApiFp(this.configuration)
			.newControl(requestParameters.control, requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}
}

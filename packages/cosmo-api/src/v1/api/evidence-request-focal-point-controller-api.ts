/* tslint:disable */
/* eslint-disable */
/**
 * COSMO Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
	DUMMY_BASE_URL,
	assertParamExists,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	serializeDataIfNeeded,
	toPathString,
	createRequestFunction
} from '../common';
// @ts-ignore
import {
	BASE_PATH,
	COLLECTION_FORMATS,
	RequestArgs,
	BaseAPI,
	RequiredError
} from '../base';
// @ts-ignore
import { ApiErrorResponse } from '../models';
// @ts-ignore
import { EvidenceRequestDto } from '../models';
// @ts-ignore
import { StepDto } from '../models';
/**
 * EvidenceRequestFocalPointControllerApi - axios parameter creator
 * @export
 */
export const EvidenceRequestFocalPointControllerApiAxiosParamCreator = function (
	configuration?: Configuration
) {
	return {
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllEvidenceOfUser: async (
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			const localVarPath = `/api/focal-point/evidence-request/all-of-the-user`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} id
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getEvidenceRequestById: async (
			id: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'id' is not null or undefined
			assertParamExists('getEvidenceRequestById', 'id', id);
			const localVarPath = `/api/focal-point/evidence-request/{id}`.replace(
				`{${'id'}}`,
				encodeURIComponent(String(id))
			);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} erId
		 * @param {StepDto} stepDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveStepAndGoNext: async (
			erId: number,
			stepDto: StepDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'erId' is not null or undefined
			assertParamExists('saveStepAndGoNext', 'erId', erId);
			// verify required parameter 'stepDto' is not null or undefined
			assertParamExists('saveStepAndGoNext', 'stepDto', stepDto);
			const localVarPath =
				`/api/focal-point/evidence-request/step/{erId}/save-and-procede`.replace(
					`{${'erId'}}`,
					encodeURIComponent(String(erId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				stepDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} erId
		 * @param {StepDto} stepDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveStepAndReject: async (
			erId: number,
			stepDto: StepDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'erId' is not null or undefined
			assertParamExists('saveStepAndReject', 'erId', erId);
			// verify required parameter 'stepDto' is not null or undefined
			assertParamExists('saveStepAndReject', 'stepDto', stepDto);
			const localVarPath =
				`/api/focal-point/evidence-request/step/{erId}/save-and-reject`.replace(
					`{${'erId'}}`,
					encodeURIComponent(String(erId))
				);
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				stepDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		},
		/**
		 *
		 * @param {number} erId
		 * @param {number} returnStep
		 * @param {StepDto} stepDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveStepAndReturn: async (
			erId: number,
			returnStep: number,
			stepDto: StepDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options: AxiosRequestConfig = {}
		): Promise<RequestArgs> => {
			// verify required parameter 'erId' is not null or undefined
			assertParamExists('saveStepAndReturn', 'erId', erId);
			// verify required parameter 'returnStep' is not null or undefined
			assertParamExists('saveStepAndReturn', 'returnStep', returnStep);
			// verify required parameter 'stepDto' is not null or undefined
			assertParamExists('saveStepAndReturn', 'stepDto', stepDto);
			const localVarPath =
				`/api/focal-point/evidence-request/step/{erId}/save-and-return/{returnStep}`
					.replace(`{${'erId'}}`, encodeURIComponent(String(erId)))
					.replace(`{${'returnStep'}}`, encodeURIComponent(String(returnStep)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			// authentication bearerAuth required
			await setApiKeyToObject(localVarHeaderParameter, 'Authorization', configuration);

			if (acceptLanguage !== undefined && acceptLanguage !== null) {
				localVarHeaderParameter['Accept-Language'] = String(acceptLanguage);
			}

			localVarHeaderParameter['Content-Type'] = 'application/json';

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions =
				baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = {
				...localVarHeaderParameter,
				...headersFromBaseOptions,
				...options.headers
			};
			localVarRequestOptions.data = serializeDataIfNeeded(
				stepDto,
				localVarRequestOptions,
				configuration
			);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions
			};
		}
	};
};

/**
 * EvidenceRequestFocalPointControllerApi - functional programming interface
 * @export
 */
export const EvidenceRequestFocalPointControllerApiFp = function (
	configuration?: Configuration
) {
	const localVarAxiosParamCreator =
		EvidenceRequestFocalPointControllerApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getAllEvidenceOfUser(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(
				axios?: AxiosInstance,
				basePath?: string
			) => AxiosPromise<Array<EvidenceRequestDto>>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getAllEvidenceOfUser(
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} id
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getEvidenceRequestById(
			id: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<
			(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EvidenceRequestDto>
		> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getEvidenceRequestById(
				id,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} erId
		 * @param {StepDto} stepDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveStepAndGoNext(
			erId: number,
			stepDto: StepDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StepDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.saveStepAndGoNext(
				erId,
				stepDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} erId
		 * @param {StepDto} stepDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveStepAndReject(
			erId: number,
			stepDto: StepDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StepDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.saveStepAndReject(
				erId,
				stepDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		},
		/**
		 *
		 * @param {number} erId
		 * @param {number} returnStep
		 * @param {StepDto} stepDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async saveStepAndReturn(
			erId: number,
			returnStep: number,
			stepDto: StepDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: AxiosRequestConfig
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StepDto>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.saveStepAndReturn(
				erId,
				returnStep,
				stepDto,
				acceptLanguage,
				options
			);
			return createRequestFunction(
				localVarAxiosArgs,
				globalAxios,
				BASE_PATH,
				configuration
			);
		}
	};
};

/**
 * EvidenceRequestFocalPointControllerApi - factory interface
 * @export
 */
export const EvidenceRequestFocalPointControllerApiFactory = function (
	configuration?: Configuration,
	basePath?: string,
	axios?: AxiosInstance
) {
	const localVarFp = EvidenceRequestFocalPointControllerApiFp(configuration);
	return {
		/**
		 *
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getAllEvidenceOfUser(
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<Array<EvidenceRequestDto>> {
			return localVarFp
				.getAllEvidenceOfUser(acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} id
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getEvidenceRequestById(
			id: number,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<EvidenceRequestDto> {
			return localVarFp
				.getEvidenceRequestById(id, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} erId
		 * @param {StepDto} stepDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveStepAndGoNext(
			erId: number,
			stepDto: StepDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<StepDto> {
			return localVarFp
				.saveStepAndGoNext(erId, stepDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} erId
		 * @param {StepDto} stepDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveStepAndReject(
			erId: number,
			stepDto: StepDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<StepDto> {
			return localVarFp
				.saveStepAndReject(erId, stepDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		},
		/**
		 *
		 * @param {number} erId
		 * @param {number} returnStep
		 * @param {StepDto} stepDto
		 * @param {'en-US' | 'it-IT' | 'fr-FR'} [acceptLanguage]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		saveStepAndReturn(
			erId: number,
			returnStep: number,
			stepDto: StepDto,
			acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR',
			options?: any
		): AxiosPromise<StepDto> {
			return localVarFp
				.saveStepAndReturn(erId, returnStep, stepDto, acceptLanguage, options)
				.then(request => request(axios, basePath));
		}
	};
};

/**
 * Request parameters for getAllEvidenceOfUser operation in EvidenceRequestFocalPointControllerApi.
 * @export
 * @interface EvidenceRequestFocalPointControllerApiGetAllEvidenceOfUserRequest
 */
export interface EvidenceRequestFocalPointControllerApiGetAllEvidenceOfUserRequest {
	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof EvidenceRequestFocalPointControllerApiGetAllEvidenceOfUser
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for getEvidenceRequestById operation in EvidenceRequestFocalPointControllerApi.
 * @export
 * @interface EvidenceRequestFocalPointControllerApiGetEvidenceRequestByIdRequest
 */
export interface EvidenceRequestFocalPointControllerApiGetEvidenceRequestByIdRequest {
	/**
	 *
	 * @type {number}
	 * @memberof EvidenceRequestFocalPointControllerApiGetEvidenceRequestById
	 */
	readonly id: number;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof EvidenceRequestFocalPointControllerApiGetEvidenceRequestById
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for saveStepAndGoNext operation in EvidenceRequestFocalPointControllerApi.
 * @export
 * @interface EvidenceRequestFocalPointControllerApiSaveStepAndGoNextRequest
 */
export interface EvidenceRequestFocalPointControllerApiSaveStepAndGoNextRequest {
	/**
	 *
	 * @type {number}
	 * @memberof EvidenceRequestFocalPointControllerApiSaveStepAndGoNext
	 */
	readonly erId: number;

	/**
	 *
	 * @type {StepDto}
	 * @memberof EvidenceRequestFocalPointControllerApiSaveStepAndGoNext
	 */
	readonly stepDto: StepDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof EvidenceRequestFocalPointControllerApiSaveStepAndGoNext
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for saveStepAndReject operation in EvidenceRequestFocalPointControllerApi.
 * @export
 * @interface EvidenceRequestFocalPointControllerApiSaveStepAndRejectRequest
 */
export interface EvidenceRequestFocalPointControllerApiSaveStepAndRejectRequest {
	/**
	 *
	 * @type {number}
	 * @memberof EvidenceRequestFocalPointControllerApiSaveStepAndReject
	 */
	readonly erId: number;

	/**
	 *
	 * @type {StepDto}
	 * @memberof EvidenceRequestFocalPointControllerApiSaveStepAndReject
	 */
	readonly stepDto: StepDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof EvidenceRequestFocalPointControllerApiSaveStepAndReject
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * Request parameters for saveStepAndReturn operation in EvidenceRequestFocalPointControllerApi.
 * @export
 * @interface EvidenceRequestFocalPointControllerApiSaveStepAndReturnRequest
 */
export interface EvidenceRequestFocalPointControllerApiSaveStepAndReturnRequest {
	/**
	 *
	 * @type {number}
	 * @memberof EvidenceRequestFocalPointControllerApiSaveStepAndReturn
	 */
	readonly erId: number;

	/**
	 *
	 * @type {number}
	 * @memberof EvidenceRequestFocalPointControllerApiSaveStepAndReturn
	 */
	readonly returnStep: number;

	/**
	 *
	 * @type {StepDto}
	 * @memberof EvidenceRequestFocalPointControllerApiSaveStepAndReturn
	 */
	readonly stepDto: StepDto;

	/**
	 *
	 * @type {'en-US' | 'it-IT' | 'fr-FR'}
	 * @memberof EvidenceRequestFocalPointControllerApiSaveStepAndReturn
	 */
	readonly acceptLanguage?: 'en-US' | 'it-IT' | 'fr-FR';
}

/**
 * EvidenceRequestFocalPointControllerApi - object-oriented interface
 * @export
 * @class EvidenceRequestFocalPointControllerApi
 * @extends {BaseAPI}
 */
export class EvidenceRequestFocalPointControllerApi extends BaseAPI {
	/**
	 *
	 * @param {EvidenceRequestFocalPointControllerApiGetAllEvidenceOfUserRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EvidenceRequestFocalPointControllerApi
	 */
	public getAllEvidenceOfUser(
		requestParameters: EvidenceRequestFocalPointControllerApiGetAllEvidenceOfUserRequest = {},
		options?: AxiosRequestConfig
	) {
		return EvidenceRequestFocalPointControllerApiFp(this.configuration)
			.getAllEvidenceOfUser(requestParameters.acceptLanguage, options)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {EvidenceRequestFocalPointControllerApiGetEvidenceRequestByIdRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EvidenceRequestFocalPointControllerApi
	 */
	public getEvidenceRequestById(
		requestParameters: EvidenceRequestFocalPointControllerApiGetEvidenceRequestByIdRequest,
		options?: AxiosRequestConfig
	) {
		return EvidenceRequestFocalPointControllerApiFp(this.configuration)
			.getEvidenceRequestById(
				requestParameters.id,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {EvidenceRequestFocalPointControllerApiSaveStepAndGoNextRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EvidenceRequestFocalPointControllerApi
	 */
	public saveStepAndGoNext(
		requestParameters: EvidenceRequestFocalPointControllerApiSaveStepAndGoNextRequest,
		options?: AxiosRequestConfig
	) {
		return EvidenceRequestFocalPointControllerApiFp(this.configuration)
			.saveStepAndGoNext(
				requestParameters.erId,
				requestParameters.stepDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {EvidenceRequestFocalPointControllerApiSaveStepAndRejectRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EvidenceRequestFocalPointControllerApi
	 */
	public saveStepAndReject(
		requestParameters: EvidenceRequestFocalPointControllerApiSaveStepAndRejectRequest,
		options?: AxiosRequestConfig
	) {
		return EvidenceRequestFocalPointControllerApiFp(this.configuration)
			.saveStepAndReject(
				requestParameters.erId,
				requestParameters.stepDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {EvidenceRequestFocalPointControllerApiSaveStepAndReturnRequest} requestParameters Request parameters.
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof EvidenceRequestFocalPointControllerApi
	 */
	public saveStepAndReturn(
		requestParameters: EvidenceRequestFocalPointControllerApiSaveStepAndReturnRequest,
		options?: AxiosRequestConfig
	) {
		return EvidenceRequestFocalPointControllerApiFp(this.configuration)
			.saveStepAndReturn(
				requestParameters.erId,
				requestParameters.returnStep,
				requestParameters.stepDto,
				requestParameters.acceptLanguage,
				options
			)
			.then(request => request(this.axios, this.basePath));
	}
}
